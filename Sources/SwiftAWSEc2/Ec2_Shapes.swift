// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Ec2 {

    public struct DescribeVpcClassicLinkResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcSet"), required: false, type: .structure)
        ]
        /// The ClassicLink status of one or more VPCs.
        public let vpcs: VpcClassicLinkList?

        public init(vpcs: VpcClassicLinkList? = nil) {
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcSet"
        }
    }

    public struct GetConsoleScreenshotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WakeUp", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// When set to true, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.
        public let wakeUp: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(wakeUp: Bool? = nil, instanceId: String, dryRun: Bool? = nil) {
            self.wakeUp = wakeUp
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case wakeUp = "WakeUp"
            case instanceId = "InstanceId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationIds", location: .body(locationName: "AssociationId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more IAM instance profile associations.
        public let associationIds: AssociationIdList?
        /// One or more filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating | disassociated).  
        public let filters: FilterList?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(associationIds: AssociationIdList? = nil, filters: FilterList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.associationIds = associationIds
            self.filters = filters
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationId"
            case filters = "Filter"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct InstanceCountList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceCount]?

        public init(item: [InstanceCount]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum MoveStatus: String, CustomStringConvertible, Codable {
        case movingtovpc = "movingToVpc"
        case restoringtoclassic = "restoringToClassic"
        public var description: String { return self.rawValue }
    }

    public struct DescribeInstanceAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The instance attribute. Note: The enaSupport attribute is not supported at this time.
        public let attribute: InstanceAttributeName

        public init(dryRun: Bool? = nil, instanceId: String, attribute: InstanceAttributeName) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case attribute = "attribute"
        }
    }

    public struct BlobAttributeValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .blob)
        ]
        public let value: Data?

        public init(value: Data? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct ModifyVolumeAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "AutoEnableIO", required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String
        /// Indicates whether the volume should be auto-enabled for I/O operations.
        public let autoEnableIO: AttributeBooleanValue?

        public init(dryRun: Bool? = nil, volumeId: String, autoEnableIO: AttributeBooleanValue? = nil) {
            self.dryRun = dryRun
            self.volumeId = volumeId
            self.autoEnableIO = autoEnableIO
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
            case autoEnableIO = "AutoEnableIO"
        }
    }

    public enum VpnStaticRouteSource: String, CustomStringConvertible, Codable {
        case `static` = "Static"
        public var description: String { return self.rawValue }
    }

    public enum TrafficType: String, CustomStringConvertible, Codable {
        case accept = "ACCEPT"
        case reject = "REJECT"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public enum ArchitectureValues: String, CustomStringConvertible, Codable {
        case i386 = "i386"
        case x8664 = "x86_64"
        public var description: String { return self.rawValue }
    }

    public struct InternetGatewayAttachment: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// The current state of the attachment.
        public let state: AttachmentStatus?

        public init(vpcId: String? = nil, state: AttachmentStatus? = nil) {
            self.vpcId = vpcId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case state = "state"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ScheduledInstanceAvailabilitySet", location: .body(locationName: "scheduledInstanceAvailabilitySet"), required: false, type: .structure)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the available Scheduled Instances.
        public let scheduledInstanceAvailabilitySet: ScheduledInstanceAvailabilitySet?

        public init(nextToken: String? = nil, scheduledInstanceAvailabilitySet: ScheduledInstanceAvailabilitySet? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceAvailabilitySet = scheduledInstanceAvailabilitySet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduledInstanceAvailabilitySet = "scheduledInstanceAvailabilitySet"
        }
    }

    public struct RouteTableAssociationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [RouteTableAssociation]?

        public init(item: [RouteTableAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeAddressesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Addresses", location: .body(locationName: "addressesSet"), required: false, type: .structure)
        ]
        /// Information about one or more Elastic IP addresses.
        public let addresses: AddressList?

        public init(addresses: AddressList? = nil) {
            self.addresses = addresses
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "addressesSet"
        }
    }

    public struct DescribeNatGatewaysResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGateways", location: .body(locationName: "natGatewaySet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the NAT gateways.
        public let natGateways: NatGatewayList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(natGateways: NatGatewayList? = nil, nextToken: String? = nil) {
            self.natGateways = natGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case natGateways = "natGatewaySet"
            case nextToken = "nextToken"
        }
    }

    public struct CreateEgressOnlyInternetGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the VPC for which to create the egress-only Internet gateway.
        public let vpcId: String
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, clientToken: String? = nil, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.clientToken = clientToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
        }
    }

    public struct ModifyVpcAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableDnsSupport", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "EnableDnsHostnames", required: false, type: .structure)
        ]
        /// Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" will succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.
        public let enableDnsSupport: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.
        public let enableDnsHostnames: AttributeBooleanValue?

        public init(enableDnsSupport: AttributeBooleanValue? = nil, vpcId: String, enableDnsHostnames: AttributeBooleanValue? = nil) {
            self.enableDnsSupport = enableDnsSupport
            self.vpcId = vpcId
            self.enableDnsHostnames = enableDnsHostnames
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsSupport = "EnableDnsSupport"
            case vpcId = "vpcId"
            case enableDnsHostnames = "EnableDnsHostnames"
        }
    }

    public struct CreateVpcPeeringConnectionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PeerOwnerId", location: .body(locationName: "peerOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "PeerVpcId", location: .body(locationName: "peerVpcId"), required: false, type: .string)
        ]
        /// The AWS account ID of the owner of the peer VPC. Default: Your AWS account ID
        public let peerOwnerId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the requester VPC.
        public let vpcId: String?
        /// The ID of the VPC with which you are creating the VPC peering connection.
        public let peerVpcId: String?

        public init(peerOwnerId: String? = nil, dryRun: Bool? = nil, vpcId: String? = nil, peerVpcId: String? = nil) {
            self.peerOwnerId = peerOwnerId
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.peerVpcId = peerVpcId
        }

        private enum CodingKeys: String, CodingKey {
            case peerOwnerId = "peerOwnerId"
            case dryRun = "dryRun"
            case vpcId = "vpcId"
            case peerVpcId = "peerVpcId"
        }
    }

    public struct Host: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: false, type: .enum), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailableCapacity", location: .body(locationName: "availableCapacity"), required: false, type: .structure), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instances"), required: false, type: .structure), 
            AWSShapeMember(label: "HostProperties", location: .body(locationName: "hostProperties"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string)
        ]
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide. 
        public let clientToken: String?
        /// Whether auto-placement is on or off.
        public let autoPlacement: AutoPlacement?
        /// The ID of the Dedicated Host.
        public let hostId: String?
        /// The Dedicated Host's state.
        public let state: AllocationState?
        /// The number of new instances that can be launched onto the Dedicated Host.
        public let availableCapacity: AvailableCapacity?
        /// The reservation ID of the Dedicated Host. This returns a null response if the Dedicated Host doesn't have an associated reservation.
        public let hostReservationId: String?
        /// The IDs and instance type that are currently running on the Dedicated Host.
        public let instances: HostInstanceList?
        /// The hardware specifications of the Dedicated Host.
        public let hostProperties: HostProperties?
        /// The Availability Zone of the Dedicated Host.
        public let availabilityZone: String?

        public init(clientToken: String? = nil, autoPlacement: AutoPlacement? = nil, hostId: String? = nil, state: AllocationState? = nil, availableCapacity: AvailableCapacity? = nil, hostReservationId: String? = nil, instances: HostInstanceList? = nil, hostProperties: HostProperties? = nil, availabilityZone: String? = nil) {
            self.clientToken = clientToken
            self.autoPlacement = autoPlacement
            self.hostId = hostId
            self.state = state
            self.availableCapacity = availableCapacity
            self.hostReservationId = hostReservationId
            self.instances = instances
            self.hostProperties = hostProperties
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case autoPlacement = "autoPlacement"
            case hostId = "hostId"
            case state = "state"
            case availableCapacity = "availableCapacity"
            case hostReservationId = "hostReservationId"
            case instances = "instances"
            case hostProperties = "hostProperties"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct ReservedIntancesIds: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesId]?

        public init(item: [ReservedInstancesId]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TargetReservationValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetConfiguration", location: .body(locationName: "targetConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservationValue", location: .body(locationName: "reservationValue"), required: false, type: .structure)
        ]
        /// The configuration of the Convertible Reserved Instances that make up the exchange.
        public let targetConfiguration: TargetConfiguration?
        /// The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
        public let reservationValue: ReservationValue?

        public init(targetConfiguration: TargetConfiguration? = nil, reservationValue: ReservationValue? = nil) {
            self.targetConfiguration = targetConfiguration
            self.reservationValue = reservationValue
        }

        private enum CodingKeys: String, CodingKey {
            case targetConfiguration = "targetConfiguration"
            case reservationValue = "reservationValue"
        }
    }

    public struct ImportKeyPairResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string)
        ]
        /// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        public let keyFingerprint: String?
        /// The key pair name you provided.
        public let keyName: String?

        public init(keyFingerprint: String? = nil, keyName: String? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
        }
    }

    public struct SpotFleetRequestConfigSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotFleetRequestConfig]?

        public init(item: [SpotFleetRequestConfig]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelSpotFleetRequestsErrorSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CancelSpotFleetRequestsErrorItem]?

        public init(item: [CancelSpotFleetRequestsErrorItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSnapshotsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Snapshots", location: .body(locationName: "snapshotSet"), required: false, type: .structure)
        ]
        /// The NextToken value to include in a future DescribeSnapshots request. When the results of a DescribeSnapshots request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the snapshots.
        public let snapshots: SnapshotList?

        public init(nextToken: String? = nil, snapshots: SnapshotList? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case snapshots = "snapshotSet"
        }
    }

    public struct DescribeInstanceStatusRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "IncludeAllInstances", location: .body(locationName: "includeAllInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is an opaque internal value and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false 
        public let includeAllInstances: Bool?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
        public let instanceIds: InstanceIdStringList?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, includeAllInstances: Bool? = nil, nextToken: String? = nil, instanceIds: InstanceIdStringList? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.dryRun = dryRun
            self.includeAllInstances = includeAllInstances
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case dryRun = "dryRun"
            case includeAllInstances = "includeAllInstances"
            case nextToken = "NextToken"
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
        }
    }

    public struct VolumeStatusItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Actions", location: .body(locationName: "actionsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VolumeStatus", location: .body(locationName: "volumeStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "Events", location: .body(locationName: "eventsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]
        /// The details of the operation.
        public let actions: VolumeStatusActionsList?
        /// The volume status.
        public let volumeStatus: VolumeStatusInfo?
        /// A list of events associated with the volume.
        public let events: VolumeStatusEventsList?
        /// The Availability Zone of the volume.
        public let availabilityZone: String?
        /// The volume ID.
        public let volumeId: String?

        public init(actions: VolumeStatusActionsList? = nil, volumeStatus: VolumeStatusInfo? = nil, events: VolumeStatusEventsList? = nil, availabilityZone: String? = nil, volumeId: String? = nil) {
            self.actions = actions
            self.volumeStatus = volumeStatus
            self.events = events
            self.availabilityZone = availabilityZone
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actionsSet"
            case volumeStatus = "volumeStatus"
            case events = "eventsSet"
            case availabilityZone = "availabilityZone"
            case volumeId = "volumeId"
        }
    }

    public struct CreateRouteTableResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTable", location: .body(locationName: "routeTable"), required: false, type: .structure)
        ]
        /// Information about the route table.
        public let routeTable: RouteTable?

        public init(routeTable: RouteTable? = nil) {
            self.routeTable = routeTable
        }

        private enum CodingKeys: String, CodingKey {
            case routeTable = "routeTable"
        }
    }

    public struct EnableVpcClassicLinkRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public struct InstanceNetworkInterface: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "MacAddress", location: .body(locationName: "macAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The MAC address.
        public let macAddress: String?
        /// Indicates whether to validate network traffic to or from this network interface.
        public let sourceDestCheck: Bool?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The ID of the AWS account that created the network interface.
        public let ownerId: String?
        /// The network interface attachment.
        public let attachment: InstanceNetworkInterfaceAttachment?
        /// The description.
        public let description: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// One or more private IPv4 addresses associated with the network interface.
        public let privateIpAddresses: InstancePrivateIpAddressList?
        /// The ID of the VPC.
        public let vpcId: String?
        /// One or more IPv6 addresses associated with the network interface.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// One or more security groups.
        public let groups: GroupIdentifierList?
        /// The association information for an Elastic IPv4 associated with the network interface.
        public let association: InstanceNetworkInterfaceAssociation?

        public init(subnetId: String? = nil, networkInterfaceId: String? = nil, macAddress: String? = nil, sourceDestCheck: Bool? = nil, privateDnsName: String? = nil, ownerId: String? = nil, attachment: InstanceNetworkInterfaceAttachment? = nil, description: String? = nil, privateIpAddress: String? = nil, status: NetworkInterfaceStatus? = nil, privateIpAddresses: InstancePrivateIpAddressList? = nil, vpcId: String? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, groups: GroupIdentifierList? = nil, association: InstanceNetworkInterfaceAssociation? = nil) {
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
            self.macAddress = macAddress
            self.sourceDestCheck = sourceDestCheck
            self.privateDnsName = privateDnsName
            self.ownerId = ownerId
            self.attachment = attachment
            self.description = description
            self.privateIpAddress = privateIpAddress
            self.status = status
            self.privateIpAddresses = privateIpAddresses
            self.vpcId = vpcId
            self.ipv6Addresses = ipv6Addresses
            self.groups = groups
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case networkInterfaceId = "networkInterfaceId"
            case macAddress = "macAddress"
            case sourceDestCheck = "sourceDestCheck"
            case privateDnsName = "privateDnsName"
            case ownerId = "ownerId"
            case attachment = "attachment"
            case description = "description"
            case privateIpAddress = "privateIpAddress"
            case status = "status"
            case privateIpAddresses = "privateIpAddressesSet"
            case vpcId = "vpcId"
            case ipv6Addresses = "ipv6AddressesSet"
            case groups = "groupSet"
            case association = "association"
        }
    }

    public struct CreateNetworkInterfaceResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterface", location: .body(locationName: "networkInterface"), required: false, type: .structure)
        ]
        /// Information about the network interface.
        public let networkInterface: NetworkInterface?

        public init(networkInterface: NetworkInterface? = nil) {
            self.networkInterface = networkInterface
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterface = "networkInterface"
        }
    }

    public struct ReservedInstancesModificationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesModification]?

        public init(item: [ReservedInstancesModification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ResetInstanceAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: true, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The attribute to reset.  You can only reset the following attributes: kernel | ramdisk | sourceDestCheck. To change an instance attribute, use ModifyInstanceAttribute. 
        public let attribute: InstanceAttributeName

        public init(dryRun: Bool? = nil, instanceId: String, attribute: InstanceAttributeName) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceId = "instanceId"
            case attribute = "attribute"
        }
    }

    public struct Monitoring: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let state: MonitoringState?

        public init(state: MonitoringState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct RequestSpotLaunchSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string)
        ]
        /// One or more block device mapping entries. Although you can specify encrypted EBS volumes in this block device mapping for your Spot Instances, these volumes are not encrypted.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let userData: String?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The ID of the kernel.
        public let kernelId: String?
        /// One or more security group IDs.
        public let securityGroupIds: ValueStringList?
        /// Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The instance type.
        public let instanceType: InstanceType?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: ValueStringList?
        /// The name of the key pair.
        public let keyName: String?
        /// Deprecated.
        public let addressingType: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?

        public init(blockDeviceMappings: BlockDeviceMappingList? = nil, subnetId: String? = nil, userData: String? = nil, ebsOptimized: Bool? = nil, kernelId: String? = nil, securityGroupIds: ValueStringList? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, instanceType: InstanceType? = nil, securityGroups: ValueStringList? = nil, keyName: String? = nil, addressingType: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.subnetId = subnetId
            self.userData = userData
            self.ebsOptimized = ebsOptimized
            self.kernelId = kernelId
            self.securityGroupIds = securityGroupIds
            self.monitoring = monitoring
            self.instanceType = instanceType
            self.securityGroups = securityGroups
            self.keyName = keyName
            self.addressingType = addressingType
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case subnetId = "subnetId"
            case userData = "userData"
            case ebsOptimized = "ebsOptimized"
            case kernelId = "kernelId"
            case securityGroupIds = "SecurityGroupId"
            case monitoring = "monitoring"
            case instanceType = "instanceType"
            case securityGroups = "SecurityGroup"
            case keyName = "keyName"
            case addressingType = "addressingType"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case networkInterfaces = "NetworkInterface"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
        }
    }

    public struct AssociateVpcCidrBlockRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "AmazonProvidedIpv6CidrBlock", location: .body(locationName: "amazonProvidedIpv6CidrBlock"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?

        public init(vpcId: String, amazonProvidedIpv6CidrBlock: Bool? = nil) {
            self.vpcId = vpcId
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
        }
    }

    public struct ImageDiskContainer: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", required: false, type: .structure), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID of the EBS snapshot to be used for importing the snapshot.
        public let snapshotId: String?
        /// The format of the disk image being imported. Valid values: RAW | VHD | VMDK | OVA 
        public let format: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucket?
        /// The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
        public let url: String?
        /// The block device mapping for the disk.
        public let deviceName: String?
        /// The description of the disk image.
        public let description: String?

        public init(snapshotId: String? = nil, format: String? = nil, userBucket: UserBucket? = nil, url: String? = nil, deviceName: String? = nil, description: String? = nil) {
            self.snapshotId = snapshotId
            self.format = format
            self.userBucket = userBucket
            self.url = url
            self.deviceName = deviceName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case format = "Format"
            case userBucket = "UserBucket"
            case url = "Url"
            case deviceName = "DeviceName"
            case description = "Description"
        }
    }

    public struct PurchaseReservedInstancesOfferingRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesOfferingId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "LimitPrice", location: .body(locationName: "limitPrice"), required: false, type: .structure)
        ]
        /// The ID of the Reserved Instance offering to purchase.
        public let reservedInstancesOfferingId: String
        /// The number of Reserved Instances to purchase.
        public let instanceCount: Int32
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
        public let limitPrice: ReservedInstanceLimitPrice?

        public init(reservedInstancesOfferingId: String, instanceCount: Int32, dryRun: Bool? = nil, limitPrice: ReservedInstanceLimitPrice? = nil) {
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
            self.instanceCount = instanceCount
            self.dryRun = dryRun
            self.limitPrice = limitPrice
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesOfferingId = "ReservedInstancesOfferingId"
            case instanceCount = "InstanceCount"
            case dryRun = "dryRun"
            case limitPrice = "limitPrice"
        }
    }

    public struct ReservedInstances: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringCharges", location: .body(locationName: "recurringCharges"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .float), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingClass", location: .body(locationName: "offeringClass"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .timestamp), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .long), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .float)
        ]
        /// The recurring charge tag assigned to the resource.
        public let recurringCharges: RecurringChargesList?
        /// Any tags assigned to the resource.
        public let tags: TagList?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?
        /// The state of the Reserved Instance purchase.
        public let state: ReservedInstanceState?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The offering class of the Reserved Instance.
        public let offeringClass: OfferingClassType?
        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The date and time the Reserved Instance started.
        public let start: TimeStamp?
        /// The time when the Reserved Instance expires.
        public let end: TimeStamp?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The number of reservations purchased.
        public let instanceCount: Int32?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The scope of the Reserved Instance.
        public let scope: Scope?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?

        public init(recurringCharges: RecurringChargesList? = nil, tags: TagList? = nil, usagePrice: Float? = nil, state: ReservedInstanceState? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, offeringClass: OfferingClassType? = nil, availabilityZone: String? = nil, start: TimeStamp? = nil, end: TimeStamp? = nil, reservedInstancesId: String? = nil, currencyCode: CurrencyCodeValues? = nil, instanceCount: Int32? = nil, duration: Int64? = nil, scope: Scope? = nil, fixedPrice: Float? = nil) {
            self.recurringCharges = recurringCharges
            self.tags = tags
            self.usagePrice = usagePrice
            self.state = state
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.offeringClass = offeringClass
            self.availabilityZone = availabilityZone
            self.start = start
            self.end = end
            self.reservedInstancesId = reservedInstancesId
            self.currencyCode = currencyCode
            self.instanceCount = instanceCount
            self.duration = duration
            self.scope = scope
            self.fixedPrice = fixedPrice
        }

        private enum CodingKeys: String, CodingKey {
            case recurringCharges = "recurringCharges"
            case tags = "tagSet"
            case usagePrice = "usagePrice"
            case state = "state"
            case instanceTenancy = "instanceTenancy"
            case instanceType = "instanceType"
            case offeringType = "offeringType"
            case productDescription = "productDescription"
            case offeringClass = "offeringClass"
            case availabilityZone = "availabilityZone"
            case start = "start"
            case end = "end"
            case reservedInstancesId = "reservedInstancesId"
            case currencyCode = "currencyCode"
            case instanceCount = "instanceCount"
            case duration = "duration"
            case scope = "scope"
            case fixedPrice = "fixedPrice"
        }
    }

    public struct DescribeFpgaImagesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImages", location: .body(locationName: "fpgaImageSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more FPGA images.
        public let fpgaImages: FpgaImageList?

        public init(nextToken: String? = nil, fpgaImages: FpgaImageList? = nil) {
            self.nextToken = nextToken
            self.fpgaImages = fpgaImages
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case fpgaImages = "fpgaImageSet"
        }
    }

    public struct NetworkInterfaceIpv6Address: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", location: .body(locationName: "ipv6Address"), required: false, type: .string)
        ]
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
        }
    }

    public struct DescribeCustomerGatewaysRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayIds", location: .body(locationName: "CustomerGatewayId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more customer gateway IDs. Default: Describes all your customer gateways.
        public let customerGatewayIds: CustomerGatewayIdStringList?
        /// One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway's Internet-routable external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(customerGatewayIds: CustomerGatewayIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.customerGatewayIds = customerGatewayIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayIds = "CustomerGatewayId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "MacAddress", location: .body(locationName: "macAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "InterfaceType", location: .body(locationName: "interfaceType"), required: false, type: .enum), 
            AWSShapeMember(label: "TagSet", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "RequesterId", location: .body(locationName: "requesterId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "RequesterManaged", location: .body(locationName: "requesterManaged"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The MAC address.
        public let macAddress: String?
        /// Indicates whether traffic to or from the instance is validated.
        public let sourceDestCheck: Bool?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The network interface attachment.
        public let attachment: NetworkInterfaceAttachment?
        /// The type of interface.
        public let interfaceType: NetworkInterfaceType?
        /// Any tags assigned to the network interface.
        public let tagSet: TagList?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).
        public let requesterId: String?
        /// A description.
        public let description: String?
        /// The AWS account ID of the owner of the network interface.
        public let ownerId: String?
        /// The private IPv4 addresses associated with the network interface.
        public let privateIpAddresses: NetworkInterfacePrivateIpAddressList?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// Indicates whether the network interface is being managed by AWS.
        public let requesterManaged: Bool?
        /// The IPv6 addresses associated with the network interface.
        public let ipv6Addresses: NetworkInterfaceIpv6AddressesList?
        /// Any security groups for the network interface.
        public let groups: GroupIdentifierList?
        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?

        public init(subnetId: String? = nil, networkInterfaceId: String? = nil, macAddress: String? = nil, sourceDestCheck: Bool? = nil, privateDnsName: String? = nil, attachment: NetworkInterfaceAttachment? = nil, interfaceType: NetworkInterfaceType? = nil, tagSet: TagList? = nil, privateIpAddress: String? = nil, requesterId: String? = nil, description: String? = nil, ownerId: String? = nil, privateIpAddresses: NetworkInterfacePrivateIpAddressList? = nil, vpcId: String? = nil, availabilityZone: String? = nil, status: NetworkInterfaceStatus? = nil, requesterManaged: Bool? = nil, ipv6Addresses: NetworkInterfaceIpv6AddressesList? = nil, groups: GroupIdentifierList? = nil, association: NetworkInterfaceAssociation? = nil) {
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
            self.macAddress = macAddress
            self.sourceDestCheck = sourceDestCheck
            self.privateDnsName = privateDnsName
            self.attachment = attachment
            self.interfaceType = interfaceType
            self.tagSet = tagSet
            self.privateIpAddress = privateIpAddress
            self.requesterId = requesterId
            self.description = description
            self.ownerId = ownerId
            self.privateIpAddresses = privateIpAddresses
            self.vpcId = vpcId
            self.availabilityZone = availabilityZone
            self.status = status
            self.requesterManaged = requesterManaged
            self.ipv6Addresses = ipv6Addresses
            self.groups = groups
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case networkInterfaceId = "networkInterfaceId"
            case macAddress = "macAddress"
            case sourceDestCheck = "sourceDestCheck"
            case privateDnsName = "privateDnsName"
            case attachment = "attachment"
            case interfaceType = "interfaceType"
            case tagSet = "tagSet"
            case privateIpAddress = "privateIpAddress"
            case requesterId = "requesterId"
            case description = "description"
            case ownerId = "ownerId"
            case privateIpAddresses = "privateIpAddressesSet"
            case vpcId = "vpcId"
            case availabilityZone = "availabilityZone"
            case status = "status"
            case requesterManaged = "requesterManaged"
            case ipv6Addresses = "ipv6AddressesSet"
            case groups = "groupSet"
            case association = "association"
        }
    }

    public struct VolumeModificationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeModification]?

        public init(item: [VolumeModification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum VolumeModificationState: String, CustomStringConvertible, Codable {
        case modifying = "modifying"
        case optimizing = "optimizing"
        case completed = "completed"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct Subnet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MapPublicIpOnLaunch", location: .body(locationName: "mapPublicIpOnLaunch"), required: false, type: .boolean), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "DefaultForAz", location: .body(locationName: "defaultForAz"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "AssignIpv6AddressOnCreation", location: .body(locationName: "assignIpv6AddressOnCreation"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociationSet", location: .body(locationName: "ipv6CidrBlockAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailableIpAddressCount", location: .body(locationName: "availableIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string)
        ]
        /// Indicates whether instances launched in this subnet receive a public IPv4 address.
        public let mapPublicIpOnLaunch: Bool?
        /// The ID of the subnet.
        public let subnetId: String?
        /// Indicates whether this is the default subnet for the Availability Zone.
        public let defaultForAz: Bool?
        /// The ID of the VPC the subnet is in.
        public let vpcId: String?
        /// The current state of the subnet.
        public let state: SubnetState?
        /// Any tags assigned to the subnet.
        public let tags: TagList?
        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
        public let assignIpv6AddressOnCreation: Bool?
        /// Information about the IPv6 CIDR blocks associated with the subnet.
        public let ipv6CidrBlockAssociationSet: SubnetIpv6CidrBlockAssociationSet?
        /// The number of unused private IPv4 addresses in the subnet. Note that the IPv4 addresses for any stopped instances are considered unavailable.
        public let availableIpAddressCount: Int32?
        /// The Availability Zone of the subnet.
        public let availabilityZone: String?
        /// The IPv4 CIDR block assigned to the subnet.
        public let cidrBlock: String?

        public init(mapPublicIpOnLaunch: Bool? = nil, subnetId: String? = nil, defaultForAz: Bool? = nil, vpcId: String? = nil, state: SubnetState? = nil, tags: TagList? = nil, assignIpv6AddressOnCreation: Bool? = nil, ipv6CidrBlockAssociationSet: SubnetIpv6CidrBlockAssociationSet? = nil, availableIpAddressCount: Int32? = nil, availabilityZone: String? = nil, cidrBlock: String? = nil) {
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.subnetId = subnetId
            self.defaultForAz = defaultForAz
            self.vpcId = vpcId
            self.state = state
            self.tags = tags
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.availableIpAddressCount = availableIpAddressCount
            self.availabilityZone = availabilityZone
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case mapPublicIpOnLaunch = "mapPublicIpOnLaunch"
            case subnetId = "subnetId"
            case defaultForAz = "defaultForAz"
            case vpcId = "vpcId"
            case state = "state"
            case tags = "tagSet"
            case assignIpv6AddressOnCreation = "assignIpv6AddressOnCreation"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case availableIpAddressCount = "availableIpAddressCount"
            case availabilityZone = "availabilityZone"
            case cidrBlock = "cidrBlock"
        }
    }

    public struct CancelSpotInstanceRequestsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CancelledSpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .structure)
        ]
        /// One or more Spot instance requests.
        public let cancelledSpotInstanceRequests: CancelledSpotInstanceRequestList?

        public init(cancelledSpotInstanceRequests: CancelledSpotInstanceRequestList? = nil) {
            self.cancelledSpotInstanceRequests = cancelledSpotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case cancelledSpotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct DhcpConfigurationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DhcpConfiguration]?

        public init(item: [DhcpConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EnableVolumeIORequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the volume.
        public let volumeId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(volumeId: String, dryRun: Bool? = nil) {
            self.volumeId = volumeId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "volumeId"
            case dryRun = "dryRun"
        }
    }

    public struct VolumeIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: false, type: .list)
        ]
        public let volumeId: [String]?

        public init(volumeId: [String]? = nil) {
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
        }
    }

    public struct AssociateSubnetCidrBlockResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?

        public init(subnetId: String? = nil, ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil) {
            self.subnetId = subnetId
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
        }
    }

    public struct EventInformation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubType", location: .body(locationName: "eventSubType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "EventDescription", location: .body(locationName: "eventDescription"), required: false, type: .string)
        ]
        /// The event. The following are the error events.    iamFleetRoleInvalid - The Spot fleet did not have the required permissions either to launch or terminate an instance.    launchSpecTemporarilyBlacklisted - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.    spotFleetRequestConfigurationInvalid - The configuration is not valid. For more information, see the description of the event.    spotInstanceCountLimitExceeded - You've reached the limit on the number of Spot instances that you can launch.   The following are the fleetRequestChange events.    active - The Spot fleet has been validated and Amazon EC2 is attempting to maintain the target number of running Spot instances.    cancelled - The Spot fleet is canceled and has no running Spot instances. The Spot fleet will be deleted two days after its instances were terminated.    cancelled_running - The Spot fleet is canceled and will not launch additional Spot instances, but its existing Spot instances continue to run until they are interrupted or terminated.    cancelled_terminating - The Spot fleet is canceled and its Spot instances are terminating.    expired - The Spot fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with TerminateInstancesWithExpiration set.    modify_in_progress - A request to modify the Spot fleet request was accepted and is in progress.    modify_successful - The Spot fleet request was modified.    price_update - The bid price for a launch configuration was adjusted because it was too high. This change is permanent.    submitted - The Spot fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot instances.   The following are the instanceChange events.    launched - A bid was fulfilled and a new instance was launched.    terminated - An instance was terminated by the user.  
        public let eventSubType: String?
        /// The ID of the instance. This information is available only for instanceChange events.
        public let instanceId: String?
        /// The description of the event.
        public let eventDescription: String?

        public init(eventSubType: String? = nil, instanceId: String? = nil, eventDescription: String? = nil) {
            self.eventSubType = eventSubType
            self.instanceId = instanceId
            self.eventDescription = eventDescription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubType = "eventSubType"
            case instanceId = "instanceId"
            case eventDescription = "eventDescription"
        }
    }

    public struct ProductCodeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ProductCode]?

        public init(item: [ProductCode]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ExecutableByStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutableBy", required: false, type: .list)
        ]
        public let executableBy: [String]?

        public init(executableBy: [String]? = nil) {
            self.executableBy = executableBy
        }

        private enum CodingKeys: String, CodingKey {
            case executableBy = "ExecutableBy"
        }
    }

    public struct DescribeSubnetsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", location: .body(locationName: "SubnetId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more subnet IDs. Default: Describes all your subnets.
        public let subnetIds: SubnetIdStringList?
        /// One or more filters.    availabilityZone - The Availability Zone for the subnet. You can also use availability-zone as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidrBlock - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidr-block as the filter names.    defaultForAz - Indicates whether this is the default subnet for the Availability Zone. You can also use default-for-az as the filter name.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    state - The state of the subnet (pending | available).    subnet-id - The ID of the subnet.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    vpc-id - The ID of the VPC for the subnet.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(subnetIds: SubnetIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.subnetIds = subnetIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeTagsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return..
        public let nextToken: String?
        /// A list of tags.
        public let tags: TagDescriptionList?

        public init(nextToken: String? = nil, tags: TagDescriptionList? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tags = "tagSet"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExchangeId", location: .body(locationName: "exchangeId"), required: false, type: .string)
        ]
        /// The ID of the successful exchange.
        public let exchangeId: String?

        public init(exchangeId: String? = nil) {
            self.exchangeId = exchangeId
        }

        private enum CodingKeys: String, CodingKey {
            case exchangeId = "exchangeId"
        }
    }

    public struct DescribeNatGatewaysRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NatGatewayIds", location: .body(locationName: "NatGatewayId"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    vpc-id - The ID of the VPC in which the NAT gateway resides.  
        public let filter: FilterList?
        /// One or more NAT gateway IDs.
        public let natGatewayIds: ValueStringList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value specified is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?

        public init(filter: FilterList? = nil, natGatewayIds: ValueStringList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filter = filter
            self.natGatewayIds = natGatewayIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case natGatewayIds = "NatGatewayId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum ExportEnvironment: String, CustomStringConvertible, Codable {
        case citrix = "citrix"
        case vmware = "vmware"
        case microsoft = "microsoft"
        public var description: String { return self.rawValue }
    }

    public enum DatafeedSubscriptionState: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public enum DomainType: String, CustomStringConvertible, Codable {
        case vpc = "vpc"
        case standard = "standard"
        public var description: String { return self.rawValue }
    }

    public enum FlowLogsResourceType: String, CustomStringConvertible, Codable {
        case vpc = "VPC"
        case subnet = "Subnet"
        case networkinterface = "NetworkInterface"
        public var description: String { return self.rawValue }
    }

    public struct NetworkInterfacePrivateIpAddress: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]
        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// The private DNS name.
        public let privateDnsName: String?
        /// Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
        public let primary: Bool?
        /// The private IPv4 address.
        public let privateIpAddress: String?

        public init(association: NetworkInterfaceAssociation? = nil, privateDnsName: String? = nil, primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.privateDnsName = privateDnsName
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case privateDnsName = "privateDnsName"
            case primary = "primary"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct DescribeNetworkAclsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAcls", location: .body(locationName: "networkAclSet"), required: false, type: .structure)
        ]
        /// Information about one or more network ACLs.
        public let networkAcls: NetworkAclList?

        public init(networkAcls: NetworkAclList? = nil) {
            self.networkAcls = networkAcls
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcls = "networkAclSet"
        }
    }

    public struct ReservedInstancesListing: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "PriceSchedules", location: .body(locationName: "priceSchedules"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UpdateDate", location: .body(locationName: "updateDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCounts", location: .body(locationName: "instanceCounts"), required: false, type: .structure)
        ]
        /// The status of the Reserved Instance listing.
        public let status: ListingStatus?
        /// The price of the Reserved Instance listing.
        public let priceSchedules: PriceScheduleList?
        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String?
        /// Any tags assigned to the resource.
        public let tags: TagList?
        /// The last modified timestamp of the listing.
        public let updateDate: TimeStamp?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The time the listing was created.
        public let createDate: TimeStamp?
        /// The reason for the current status of the Reserved Instance listing. The response can be blank.
        public let statusMessage: String?
        /// The number of instances in this state.
        public let instanceCounts: InstanceCountList?

        public init(status: ListingStatus? = nil, priceSchedules: PriceScheduleList? = nil, clientToken: String? = nil, reservedInstancesListingId: String? = nil, tags: TagList? = nil, updateDate: TimeStamp? = nil, reservedInstancesId: String? = nil, createDate: TimeStamp? = nil, statusMessage: String? = nil, instanceCounts: InstanceCountList? = nil) {
            self.status = status
            self.priceSchedules = priceSchedules
            self.clientToken = clientToken
            self.reservedInstancesListingId = reservedInstancesListingId
            self.tags = tags
            self.updateDate = updateDate
            self.reservedInstancesId = reservedInstancesId
            self.createDate = createDate
            self.statusMessage = statusMessage
            self.instanceCounts = instanceCounts
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case priceSchedules = "priceSchedules"
            case clientToken = "clientToken"
            case reservedInstancesListingId = "reservedInstancesListingId"
            case tags = "tagSet"
            case updateDate = "updateDate"
            case reservedInstancesId = "reservedInstancesId"
            case createDate = "createDate"
            case statusMessage = "statusMessage"
            case instanceCounts = "instanceCounts"
        }
    }

    public struct ReservedInstanceIdSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstanceId", required: false, type: .list)
        ]
        public let reservedInstanceId: [String]?

        public init(reservedInstanceId: [String]? = nil) {
            self.reservedInstanceId = reservedInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstanceId = "ReservedInstanceId"
        }
    }

    public struct DeleteNetworkAclRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String

        public init(dryRun: Bool? = nil, networkAclId: String) {
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkAclId = "networkAclId"
        }
    }

    public struct DescribeConversionTaskList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ConversionTask]?

        public init(item: [ConversionTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AllocateHostsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Quantity", location: .body(locationName: "quantity"), required: true, type: .integer)
        ]
        /// This is enabled by default. This property allows instances to be automatically placed onto available Dedicated Hosts, when you are launching instances without specifying a host ID. Default: Enabled
        public let autoPlacement: AutoPlacement?
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide. 
        public let clientToken: String?
        /// Specify the instance type that you want your Dedicated Hosts to be configured for. When you specify the instance type, that is the only instance type that you can launch onto that host.
        public let instanceType: String
        /// The Availability Zone for the Dedicated Hosts.
        public let availabilityZone: String
        /// The number of Dedicated Hosts you want to allocate to your account with these parameters.
        public let quantity: Int32

        public init(autoPlacement: AutoPlacement? = nil, clientToken: String? = nil, instanceType: String, availabilityZone: String, quantity: Int32) {
            self.autoPlacement = autoPlacement
            self.clientToken = clientToken
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.quantity = quantity
        }

        private enum CodingKeys: String, CodingKey {
            case autoPlacement = "autoPlacement"
            case clientToken = "clientToken"
            case instanceType = "instanceType"
            case availabilityZone = "availabilityZone"
            case quantity = "quantity"
        }
    }

    public struct DescribeVpcEndpointServicesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?

        public init(dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UnassignIpv6AddressesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: true, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]
        /// The IPv6 addresses to unassign from the network interface.
        public let ipv6Addresses: Ipv6AddressList
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6Addresses: Ipv6AddressList, networkInterfaceId: String) {
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Addresses = "ipv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct BundleInstanceResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTask", location: .body(locationName: "bundleInstanceTask"), required: false, type: .structure)
        ]
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct DeletePlacementGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the placement group.
        public let groupName: String

        public init(dryRun: Bool? = nil, groupName: String) {
            self.dryRun = dryRun
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case groupName = "groupName"
        }
    }

    public struct PrefixListId: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string)
        ]
        /// The ID of the prefix.
        public let prefixListId: String?

        public init(prefixListId: String? = nil) {
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case prefixListId = "prefixListId"
        }
    }

    public struct PeeringConnectionOptionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", required: false, type: .boolean)
        ]
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC via ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC via ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?

        public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowDnsResolutionFromRemoteVpc: Bool? = nil) {
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
        }

        private enum CodingKeys: String, CodingKey {
            case allowEgressFromLocalVpcToRemoteClassicLink = "AllowEgressFromLocalVpcToRemoteClassicLink"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "AllowEgressFromLocalClassicLinkToRemoteVpc"
            case allowDnsResolutionFromRemoteVpc = "AllowDnsResolutionFromRemoteVpc"
        }
    }

    public struct AccountAttributeValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValue", location: .body(locationName: "attributeValue"), required: false, type: .string)
        ]
        /// The value of the attribute.
        public let attributeValue: String?

        public init(attributeValue: String? = nil) {
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue = "attributeValue"
        }
    }

    public struct PurchaseScheduledInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PurchaseRequests", location: .body(locationName: "PurchaseRequest"), required: true, type: .structure), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more purchase requests.
        public let purchaseRequests: PurchaseRequestSet
        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(purchaseRequests: PurchaseRequestSet, clientToken: String? = nil, dryRun: Bool? = nil) {
            self.purchaseRequests = purchaseRequests
            self.clientToken = clientToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case purchaseRequests = "PurchaseRequest"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeHostReservationOfferingsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxDuration", required: false, type: .integer), 
            AWSShapeMember(label: "MinDuration", required: false, type: .integer), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "OfferingId", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// This is the maximum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
        public let maxDuration: Int32?
        /// This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
        public let minDuration: Int32?
        /// One or more filters.    instance-family - The instance family of the offering (e.g., m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).  
        public let filter: FilterList?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The ID of the reservation offering.
        public let offeringId: String?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500; if maxResults is given a larger value than 500, you will receive an error.
        public let maxResults: Int32?

        public init(maxDuration: Int32? = nil, minDuration: Int32? = nil, filter: FilterList? = nil, nextToken: String? = nil, offeringId: String? = nil, maxResults: Int32? = nil) {
            self.maxDuration = maxDuration
            self.minDuration = minDuration
            self.filter = filter
            self.nextToken = nextToken
            self.offeringId = offeringId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case maxDuration = "MaxDuration"
            case minDuration = "MinDuration"
            case filter = "Filter"
            case nextToken = "NextToken"
            case offeringId = "OfferingId"
            case maxResults = "MaxResults"
        }
    }

    public struct StopInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StoppingInstances", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// Information about one or more stopped instances.
        public let stoppingInstances: InstanceStateChangeList?

        public init(stoppingInstances: InstanceStateChangeList? = nil) {
            self.stoppingInstances = stoppingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case stoppingInstances = "instancesSet"
        }
    }

    public struct OccurrenceDaySet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Int32]?

        public init(item: [Int32]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FirstSlotStartTimeRange", required: true, type: .structure), 
            AWSShapeMember(label: "MinSlotDurationInHours", required: false, type: .integer), 
            AWSShapeMember(label: "MaxSlotDurationInHours", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Recurrence", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The time period for the first schedule to start.
        public let firstSlotStartTimeRange: SlotDateTimeRangeRequest
        /// The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
        public let minSlotDurationInHours: Int32?
        /// The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
        public let maxSlotDurationInHours: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
        public let filters: FilterList?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrenceRequest
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(firstSlotStartTimeRange: SlotDateTimeRangeRequest, minSlotDurationInHours: Int32? = nil, maxSlotDurationInHours: Int32? = nil, dryRun: Bool? = nil, filters: FilterList? = nil, nextToken: String? = nil, recurrence: ScheduledInstanceRecurrenceRequest, maxResults: Int32? = nil) {
            self.firstSlotStartTimeRange = firstSlotStartTimeRange
            self.minSlotDurationInHours = minSlotDurationInHours
            self.maxSlotDurationInHours = maxSlotDurationInHours
            self.dryRun = dryRun
            self.filters = filters
            self.nextToken = nextToken
            self.recurrence = recurrence
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case firstSlotStartTimeRange = "FirstSlotStartTimeRange"
            case minSlotDurationInHours = "MinSlotDurationInHours"
            case maxSlotDurationInHours = "MaxSlotDurationInHours"
            case dryRun = "DryRun"
            case filters = "Filter"
            case nextToken = "NextToken"
            case recurrence = "Recurrence"
            case maxResults = "MaxResults"
        }
    }

    public struct ReservedInstancesModificationResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "TargetConfiguration", location: .body(locationName: "targetConfiguration"), required: false, type: .structure)
        ]
        /// The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
        public let reservedInstancesId: String?
        /// The target Reserved Instances configurations supplied as part of the modification request.
        public let targetConfiguration: ReservedInstancesConfiguration?

        public init(reservedInstancesId: String? = nil, targetConfiguration: ReservedInstancesConfiguration? = nil) {
            self.reservedInstancesId = reservedInstancesId
            self.targetConfiguration = targetConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
            case targetConfiguration = "targetConfiguration"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ImportVolumeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: true, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The disk image.
        public let image: DiskImageDetail
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The volume size.
        public let volume: VolumeDetail
        /// The Availability Zone for the resulting EBS volume.
        public let availabilityZone: String
        /// A description of the volume.
        public let description: String?

        public init(image: DiskImageDetail, dryRun: Bool? = nil, volume: VolumeDetail, availabilityZone: String, description: String? = nil) {
            self.image = image
            self.dryRun = dryRun
            self.volume = volume
            self.availabilityZone = availabilityZone
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case image = "image"
            case dryRun = "dryRun"
            case volume = "volume"
            case availabilityZone = "availabilityZone"
            case description = "description"
        }
    }

    public struct ScheduledInstancesNetworkInterfaceSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterface", required: false, type: .list)
        ]
        public let networkInterface: [ScheduledInstancesNetworkInterface]?

        public init(networkInterface: [ScheduledInstancesNetworkInterface]? = nil) {
            self.networkInterface = networkInterface
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterface = "NetworkInterface"
        }
    }

    public enum VolumeAttachmentState: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case instancechange = "instanceChange"
        case fleetrequestchange = "fleetRequestChange"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAddressesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIps", location: .body(locationName: "PublicIp"), required: false, type: .structure), 
            AWSShapeMember(label: "AllocationIds", location: .body(locationName: "AllocationId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// [EC2-Classic] One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses.
        public let publicIps: PublicIpStringList?
        /// [EC2-VPC] One or more allocation IDs. Default: Describes all your Elastic IP addresses.
        public let allocationIds: AllocationIdList?
        /// One or more filters. Filter names and values are case-sensitive.    allocation-id - [EC2-VPC] The allocation ID for the address.    association-id - [EC2-VPC] The association ID for the address.    domain - Indicates whether the address is for use in EC2-Classic (standard) or in a VPC (vpc).    instance-id - The ID of the instance the address is associated with, if any.    network-interface-id - [EC2-VPC] The ID of the network interface that the address is associated with, if any.    network-interface-owner-id - The AWS account ID of the owner.    private-ip-address - [EC2-VPC] The private IP address associated with the Elastic IP address.    public-ip - The Elastic IP address.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(publicIps: PublicIpStringList? = nil, allocationIds: AllocationIdList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.publicIps = publicIps
            self.allocationIds = allocationIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case publicIps = "PublicIp"
            case allocationIds = "AllocationId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct Ipv6CidrBlock: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string)
        ]
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?

        public init(ipv6CidrBlock: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
        }
    }

    public struct VolumeStatusActionsList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusAction]?

        public init(item: [VolumeStatusAction]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SecurityGroup: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpPermissionsEgress", location: .body(locationName: "ipPermissionsEgress"), required: false, type: .structure), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "groupDescription"), required: false, type: .string)
        ]
        /// [EC2-VPC] One or more outbound rules associated with the security group.
        public let ipPermissionsEgress: IpPermissionList?
        /// The name of the security group.
        public let groupName: String?
        /// [EC2-VPC] The ID of the VPC for the security group.
        public let vpcId: String?
        /// Any tags assigned to the security group.
        public let tags: TagList?
        /// One or more inbound rules associated with the security group.
        public let ipPermissions: IpPermissionList?
        /// The AWS account ID of the owner of the security group.
        public let ownerId: String?
        /// The ID of the security group.
        public let groupId: String?
        /// A description of the security group.
        public let description: String?

        public init(ipPermissionsEgress: IpPermissionList? = nil, groupName: String? = nil, vpcId: String? = nil, tags: TagList? = nil, ipPermissions: IpPermissionList? = nil, ownerId: String? = nil, groupId: String? = nil, description: String? = nil) {
            self.ipPermissionsEgress = ipPermissionsEgress
            self.groupName = groupName
            self.vpcId = vpcId
            self.tags = tags
            self.ipPermissions = ipPermissions
            self.ownerId = ownerId
            self.groupId = groupId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case ipPermissionsEgress = "ipPermissionsEgress"
            case groupName = "groupName"
            case vpcId = "vpcId"
            case tags = "tagSet"
            case ipPermissions = "ipPermissions"
            case ownerId = "ownerId"
            case groupId = "groupId"
            case description = "groupDescription"
        }
    }

    public struct DescribeAccountAttributesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountAttributes", location: .body(locationName: "accountAttributeSet"), required: false, type: .structure)
        ]
        /// Information about one or more account attributes.
        public let accountAttributes: AccountAttributeList?

        public init(accountAttributes: AccountAttributeList? = nil) {
            self.accountAttributes = accountAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case accountAttributes = "accountAttributeSet"
        }
    }

    public struct ReplaceRouteRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string)
        ]
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The IPv6 CIDR address block used for the destination match. The value you provide must match the CIDR of an existing route in the table.
        public let destinationIpv6CidrBlock: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The ID of the route table.
        public let routeTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only Internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an Internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. The value you provide must match the CIDR of an existing route in the table.
        public let destinationCidrBlock: String?

        public init(networkInterfaceId: String? = nil, natGatewayId: String? = nil, instanceId: String? = nil, destinationIpv6CidrBlock: String? = nil, vpcPeeringConnectionId: String? = nil, routeTableId: String, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, destinationCidrBlock: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.natGatewayId = natGatewayId
            self.instanceId = instanceId
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.routeTableId = routeTableId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.destinationCidrBlock = destinationCidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case natGatewayId = "natGatewayId"
            case instanceId = "instanceId"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case routeTableId = "routeTableId"
            case dryRun = "dryRun"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
        }
    }

    public struct CreateRouteRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string)
        ]
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
        public let destinationIpv6CidrBlock: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The ID of the route table for the route.
        public let routeTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only Internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an Internet gateway or virtual private gateway attached to your VPC.
        public let gatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String?

        public init(networkInterfaceId: String? = nil, natGatewayId: String? = nil, instanceId: String? = nil, destinationIpv6CidrBlock: String? = nil, vpcPeeringConnectionId: String? = nil, routeTableId: String, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, destinationCidrBlock: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.natGatewayId = natGatewayId
            self.instanceId = instanceId
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.routeTableId = routeTableId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.destinationCidrBlock = destinationCidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case natGatewayId = "natGatewayId"
            case instanceId = "instanceId"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case routeTableId = "routeTableId"
            case dryRun = "dryRun"
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case gatewayId = "gatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
        }
    }

    public struct FpgaImageIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImageIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", required: false, type: .list)
        ]
        public let imageId: [String]?

        public init(imageId: [String]? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
        }
    }

    public struct DeleteVpnConnectionRouteRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string)
        ]
        /// The ID of the VPN connection.
        public let vpnConnectionId: String
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String

        public init(vpnConnectionId: String, destinationCidrBlock: String) {
            self.vpnConnectionId = vpnConnectionId
            self.destinationCidrBlock = destinationCidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionId = "VpnConnectionId"
            case destinationCidrBlock = "DestinationCidrBlock"
        }
    }

    public struct KeyPairInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string)
        ]
        /// If you used CreateKeyPair to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used ImportKeyPair to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.
        public let keyFingerprint: String?
        /// The name of the key pair.
        public let keyName: String?

        public init(keyFingerprint: String? = nil, keyName: String? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
        }
    }

    public struct VolumeAttachment: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Device", location: .body(locationName: "device"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The device name.
        public let device: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The ID of the volume.
        public let volumeId: String?
        /// The attachment state of the volume.
        public let state: VolumeAttachmentState?

        public init(attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, device: String? = nil, instanceId: String? = nil, volumeId: String? = nil, state: VolumeAttachmentState? = nil) {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.device = device
            self.instanceId = instanceId
            self.volumeId = volumeId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case device = "device"
            case instanceId = "instanceId"
            case volumeId = "volumeId"
            case state = "status"
        }
    }

    public struct ImportSnapshotTask: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotTaskDetail", location: .body(locationName: "snapshotTaskDetail"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Describes an import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// A description of the import snapshot task.
        public let description: String?

        public init(importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, description: String? = nil) {
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case importTaskId = "importTaskId"
            case snapshotTaskDetail = "snapshotTaskDetail"
            case description = "description"
        }
    }

    public struct CreateNatGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: true, type: .string), 
            AWSShapeMember(label: "AllocationId", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string)
        ]
        /// The subnet in which to create the NAT gateway.
        public let subnetId: String
        /// The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        public let allocationId: String
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters.
        public let clientToken: String?

        public init(subnetId: String, allocationId: String, clientToken: String? = nil) {
            self.subnetId = subnetId
            self.allocationId = allocationId
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case allocationId = "AllocationId"
            case clientToken = "ClientToken"
        }
    }

    public struct LaunchPermissionList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [LaunchPermission]?

        public init(item: [LaunchPermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AttachVpnGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcAttachment", location: .body(locationName: "attachment"), required: false, type: .structure)
        ]
        /// Information about the attachment.
        public let vpcAttachment: VpcAttachment?

        public init(vpcAttachment: VpcAttachment? = nil) {
            self.vpcAttachment = vpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case vpcAttachment = "attachment"
        }
    }

    public struct RequestSpotInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AvailabilityZoneGroup", location: .body(locationName: "availabilityZoneGroup"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "LaunchGroup", location: .body(locationName: "launchGroup"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]
        /// The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. Default: The request is effective indefinitely.
        public let validUntil: TimeStamp?
        /// The user-specified name for a logical grouping of bids. When you specify an Availability Zone group in a Spot Instance request, all Spot instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to bids for Spot Instances of the same instance type. Any additional Spot instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot instance request (all instances are terminated, the bid is expired, or the bid falls below current market), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone.
        public let availabilityZoneGroup: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
        public let clientToken: String?
        /// The launch specification.
        public let launchSpecification: RequestSpotLaunchSpecification?
        /// The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled. Default: The request is effective indefinitely.
        public let validFrom: TimeStamp?
        /// The maximum hourly price (bid) for any Spot instance launched to fulfill the request.
        public let spotPrice: String
        /// The maximum number of Spot instances to launch. Default: 1
        public let instanceCount: Int32?
        /// The instance launch group. Launch groups are Spot instances that launch together and terminate together. Default: Instances are launched and terminated individually
        public let launchGroup: String?
        /// The required duration for the Spot instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates. Note that you can't specify an Availability Zone group or a launch group if you specify a duration.
        public let blockDurationMinutes: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Spot instance request type. Default: one-time 
        public let `type`: SpotInstanceType?

        public init(validUntil: TimeStamp? = nil, availabilityZoneGroup: String? = nil, clientToken: String? = nil, launchSpecification: RequestSpotLaunchSpecification? = nil, validFrom: TimeStamp? = nil, spotPrice: String, instanceCount: Int32? = nil, launchGroup: String? = nil, blockDurationMinutes: Int32? = nil, dryRun: Bool? = nil, type: SpotInstanceType? = nil) {
            self.validUntil = validUntil
            self.availabilityZoneGroup = availabilityZoneGroup
            self.clientToken = clientToken
            self.launchSpecification = launchSpecification
            self.validFrom = validFrom
            self.spotPrice = spotPrice
            self.instanceCount = instanceCount
            self.launchGroup = launchGroup
            self.blockDurationMinutes = blockDurationMinutes
            self.dryRun = dryRun
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case validUntil = "validUntil"
            case availabilityZoneGroup = "availabilityZoneGroup"
            case clientToken = "clientToken"
            case launchSpecification = "LaunchSpecification"
            case validFrom = "validFrom"
            case spotPrice = "spotPrice"
            case instanceCount = "instanceCount"
            case launchGroup = "launchGroup"
            case blockDurationMinutes = "blockDurationMinutes"
            case dryRun = "dryRun"
            case `type` = "type"
        }
    }

    public struct DescribeImagesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ExecutableUsers", location: .body(locationName: "ExecutableBy"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageIds", location: .body(locationName: "ImageId"), required: false, type: .structure), 
            AWSShapeMember(label: "Owners", location: .body(locationName: "Owner"), required: false, type: .structure)
        ]
        /// One or more filters.    architecture - The image architecture (i386 | x86_64).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name for the EBS volume (for example, /dev/sdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the EBS volume.    block-device-mapping.volume-size - The volume size of the EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the EBS volume (gp2 | io1 | st1 | sc1 | standard).    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - String value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.    owner-id - The AWS account ID of the image owner.    platform - The platform. To only list Windows-based AMIs, use windows.    product-code - The product code.    product-code.type - The type of the product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    virtualization-type - The virtualization type (paravirtual | hvm).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Scopes the images by users with explicit launch permissions. Specify an AWS account ID, self (the sender of the request), or all (public AMIs).
        public let executableUsers: ExecutableByStringList?
        /// One or more image IDs. Default: Describes all images available to you.
        public let imageIds: ImageIdStringList?
        /// Filters the images by the owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace | microsoft). Omitting this option returns all images for which you have launch permissions, regardless of ownership.
        public let owners: OwnerStringList?

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, executableUsers: ExecutableByStringList? = nil, imageIds: ImageIdStringList? = nil, owners: OwnerStringList? = nil) {
            self.filters = filters
            self.dryRun = dryRun
            self.executableUsers = executableUsers
            self.imageIds = imageIds
            self.owners = owners
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case dryRun = "dryRun"
            case executableUsers = "ExecutableBy"
            case imageIds = "ImageId"
            case owners = "Owner"
        }
    }

    public struct HostOffering: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string)
        ]
        /// The upfront price of the offering. Does not apply to No Upfront offerings.
        public let upfrontPrice: String?
        /// The available payment option.
        public let paymentOption: PaymentOption?
        /// The ID of the offering.
        public let offeringId: String?
        /// The hourly price of the offering.
        public let hourlyPrice: String?
        /// The currency of the offering.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the offering (in seconds).
        public let duration: Int32?
        /// The instance family of the offering.
        public let instanceFamily: String?

        public init(upfrontPrice: String? = nil, paymentOption: PaymentOption? = nil, offeringId: String? = nil, hourlyPrice: String? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int32? = nil, instanceFamily: String? = nil) {
            self.upfrontPrice = upfrontPrice
            self.paymentOption = paymentOption
            self.offeringId = offeringId
            self.hourlyPrice = hourlyPrice
            self.currencyCode = currencyCode
            self.duration = duration
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case upfrontPrice = "upfrontPrice"
            case paymentOption = "paymentOption"
            case offeringId = "offeringId"
            case hourlyPrice = "hourlyPrice"
            case currencyCode = "currencyCode"
            case duration = "duration"
            case instanceFamily = "instanceFamily"
        }
    }

    public struct InstanceNetworkInterfaceSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6AddressesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "AssociatePublicIpAddress", location: .body(locationName: "associatePublicIpAddress"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure)
        ]
        /// The index of the device on the instance for the network interface attachment. If you are specifying a network interface in a RunInstances request, you must provide the device index.
        public let deviceIndex: Int32?
        /// The ID of the subnet associated with the network string. Applies only if creating a network interface when launching an instance.
        public let subnetId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The description of the network interface. Applies only if creating a network interface when launching an instance.
        public let description: String?
        /// The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let privateIpAddress: String?
        /// The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let secondaryPrivateIpAddressCount: Int32?
        /// One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let privateIpAddresses: PrivateIpAddressSpecificationList?
        /// A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public let ipv6AddressCount: Int32?
        /// One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// If set to true, the interface is deleted when the instance is terminated. You can specify true only if creating a new network interface when launching an instance.
        public let deleteOnTermination: Bool?
        /// Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
        public let groups: SecurityGroupIdStringList?

        public init(deviceIndex: Int32? = nil, subnetId: String? = nil, networkInterfaceId: String? = nil, description: String? = nil, privateIpAddress: String? = nil, secondaryPrivateIpAddressCount: Int32? = nil, privateIpAddresses: PrivateIpAddressSpecificationList? = nil, ipv6AddressCount: Int32? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, deleteOnTermination: Bool? = nil, associatePublicIpAddress: Bool? = nil, groups: SecurityGroupIdStringList? = nil) {
            self.deviceIndex = deviceIndex
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
            self.description = description
            self.privateIpAddress = privateIpAddress
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.privateIpAddresses = privateIpAddresses
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.deleteOnTermination = deleteOnTermination
            self.associatePublicIpAddress = associatePublicIpAddress
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case deviceIndex = "deviceIndex"
            case subnetId = "subnetId"
            case networkInterfaceId = "networkInterfaceId"
            case description = "description"
            case privateIpAddress = "privateIpAddress"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case privateIpAddresses = "privateIpAddressesSet"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6AddressesSet"
            case deleteOnTermination = "deleteOnTermination"
            case associatePublicIpAddress = "associatePublicIpAddress"
            case groups = "SecurityGroupId"
        }
    }

    public struct DeleteRouteTableRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the route table.
        public let routeTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(routeTableId: String, dryRun: Bool? = nil) {
            self.routeTableId = routeTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "routeTableId"
            case dryRun = "dryRun"
        }
    }

    public struct NatGatewayAddress: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIp", location: .body(locationName: "privateIp"), required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string)
        ]
        /// The ID of the network interface associated with the NAT gateway.
        public let networkInterfaceId: String?
        /// The Elastic IP address associated with the NAT gateway.
        public let publicIp: String?
        /// The private IP address associated with the Elastic IP address.
        public let privateIp: String?
        /// The allocation ID of the Elastic IP address that's associated with the NAT gateway.
        public let allocationId: String?

        public init(networkInterfaceId: String? = nil, publicIp: String? = nil, privateIp: String? = nil, allocationId: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.publicIp = publicIp
            self.privateIp = privateIp
            self.allocationId = allocationId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case publicIp = "publicIp"
            case privateIp = "privateIp"
            case allocationId = "allocationId"
        }
    }

    public struct DescribeNetworkInterfaceAttributeResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure)
        ]
        /// The description of the network interface.
        public let description: AttributeValue?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The attachment (if any) of the network interface.
        public let attachment: NetworkInterfaceAttachment?
        /// The security groups associated with the network interface.
        public let groups: GroupIdentifierList?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(description: AttributeValue? = nil, networkInterfaceId: String? = nil, attachment: NetworkInterfaceAttachment? = nil, groups: GroupIdentifierList? = nil, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.attachment = attachment
            self.groups = groups
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
            case attachment = "attachment"
            case groups = "groupSet"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct ModifyVpcEndpointResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ImportSnapshotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "ClientData", required: false, type: .structure), 
            AWSShapeMember(label: "DiskContainer", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The client-specific data.
        public let clientData: ClientData?
        /// Information about the disk container.
        public let diskContainer: SnapshotDiskContainer?
        /// The description string for the import snapshot task.
        public let description: String?

        public init(clientToken: String? = nil, roleName: String? = nil, dryRun: Bool? = nil, clientData: ClientData? = nil, diskContainer: SnapshotDiskContainer? = nil, description: String? = nil) {
            self.clientToken = clientToken
            self.roleName = roleName
            self.dryRun = dryRun
            self.clientData = clientData
            self.diskContainer = diskContainer
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case roleName = "RoleName"
            case dryRun = "DryRun"
            case clientData = "ClientData"
            case diskContainer = "DiskContainer"
            case description = "Description"
        }
    }

    public struct CreateVpcRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "AmazonProvidedIpv6CidrBlock", location: .body(locationName: "amazonProvidedIpv6CidrBlock"), required: false, type: .boolean), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "CidrBlock", required: true, type: .string)
        ]
        /// The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
        public let instanceTenancy: Tenancy?
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
        public let cidrBlock: String

        public init(instanceTenancy: Tenancy? = nil, amazonProvidedIpv6CidrBlock: Bool? = nil, dryRun: Bool? = nil, cidrBlock: String) {
            self.instanceTenancy = instanceTenancy
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.dryRun = dryRun
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTenancy = "instanceTenancy"
            case amazonProvidedIpv6CidrBlock = "amazonProvidedIpv6CidrBlock"
            case dryRun = "dryRun"
            case cidrBlock = "CidrBlock"
        }
    }

    public struct DhcpOptionsIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", required: false, type: .list)
        ]
        public let dhcpOptionsId: [String]?

        public init(dhcpOptionsId: [String]? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
        }
    }

    public struct CreateRouteTableRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeVpcsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcSet"), required: false, type: .structure)
        ]
        /// Information about one or more VPCs.
        public let vpcs: VpcList?

        public init(vpcs: VpcList? = nil) {
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcSet"
        }
    }

    public struct ImportInstanceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskImages", location: .body(locationName: "diskImage"), required: false, type: .list), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchSpecification", location: .body(locationName: "launchSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The disk image.
        public let diskImages: [DiskImage]?
        /// The instance operating system.
        public let platform: PlatformValues
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The launch specification.
        public let launchSpecification: ImportInstanceLaunchSpecification?
        /// A description for the instance being imported.
        public let description: String?

        public init(diskImages: [DiskImage]? = nil, platform: PlatformValues, dryRun: Bool? = nil, launchSpecification: ImportInstanceLaunchSpecification? = nil, description: String? = nil) {
            self.diskImages = diskImages
            self.platform = platform
            self.dryRun = dryRun
            self.launchSpecification = launchSpecification
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case diskImages = "diskImage"
            case platform = "platform"
            case dryRun = "dryRun"
            case launchSpecification = "launchSpecification"
            case description = "description"
        }
    }

    public struct CreateVpcEndpointRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceName", required: true, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "RouteTableId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "PolicyDocument", required: false, type: .string)
        ]
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The AWS service name, in the form com.amazonaws.region.service . To get a list of available services, use the DescribeVpcEndpointServices request.
        public let serviceName: String
        /// The ID of the VPC in which the endpoint will be used.
        public let vpcId: String
        /// One or more route table IDs.
        public let routeTableIds: ValueStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
        public let policyDocument: String?

        public init(clientToken: String? = nil, serviceName: String, vpcId: String, routeTableIds: ValueStringList? = nil, dryRun: Bool? = nil, policyDocument: String? = nil) {
            self.clientToken = clientToken
            self.serviceName = serviceName
            self.vpcId = vpcId
            self.routeTableIds = routeTableIds
            self.dryRun = dryRun
            self.policyDocument = policyDocument
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case serviceName = "ServiceName"
            case vpcId = "VpcId"
            case routeTableIds = "RouteTableId"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
        }
    }

    public struct MovingAddressStatus: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MoveStatus", location: .body(locationName: "moveStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]
        /// The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.
        public let moveStatus: MoveStatus?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(moveStatus: MoveStatus? = nil, publicIp: String? = nil) {
            self.moveStatus = moveStatus
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case moveStatus = "moveStatus"
            case publicIp = "publicIp"
        }
    }

    public enum SubnetState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public struct AvailabilityZoneList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AvailabilityZone]?

        public init(item: [AvailabilityZone]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateFpgaImageRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "InputStorageLocation", required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LogsStorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
        public let inputStorageLocation: StorageLocation
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A name for the AFI.
        public let name: String?
        /// The location in Amazon S3 for the output logs.
        public let logsStorageLocation: StorageLocation?
        /// A description for the AFI.
        public let description: String?

        public init(clientToken: String? = nil, inputStorageLocation: StorageLocation, dryRun: Bool? = nil, name: String? = nil, logsStorageLocation: StorageLocation? = nil, description: String? = nil) {
            self.clientToken = clientToken
            self.inputStorageLocation = inputStorageLocation
            self.dryRun = dryRun
            self.name = name
            self.logsStorageLocation = logsStorageLocation
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case inputStorageLocation = "InputStorageLocation"
            case dryRun = "DryRun"
            case name = "Name"
            case logsStorageLocation = "LogsStorageLocation"
            case description = "Description"
        }
    }

    public struct VpcIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .list)
        ]
        public let vpcId: [String]?

        public init(vpcId: [String]? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct DeregisterImageRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the AMI.
        public let imageId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(imageId: String, dryRun: Bool? = nil) {
            self.imageId = imageId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case dryRun = "dryRun"
        }
    }

    public struct SpotPriceHistoryList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotPrice]?

        public init(item: [SpotPrice]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteSnapshotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the EBS snapshot.
        public let snapshotId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(snapshotId: String, dryRun: Bool? = nil) {
            self.snapshotId = snapshotId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeReservedInstancesOfferingsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxDuration", required: false, type: .long), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "ReservedInstancesOfferingIds", location: .body(locationName: "ReservedInstancesOfferingId"), required: false, type: .list), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingClass", required: false, type: .enum), 
            AWSShapeMember(label: "IncludeMarketplace", required: false, type: .boolean), 
            AWSShapeMember(label: "MinDuration", required: false, type: .long), 
            AWSShapeMember(label: "MaxInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
        public let maxDuration: Int64?
        /// The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default 
        public let instanceTenancy: Tenancy?
        /// One or more Reserved Instances offering IDs.
        public let reservedInstancesOfferingIds: [String]?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web |  Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC))     reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance type that the reservation will cover (for example, m1.small). For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
        public let productDescription: RIProductDescription?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. The maximum is 100. Default: 100
        public let maxResults: Int32?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type. 
        public let offeringType: OfferingTypeValues?
        /// The offering class of the Reserved Instance. Can be standard or convertible.
        public let offeringClass: OfferingClassType?
        /// Include Reserved Instance Marketplace offerings in the response.
        public let includeMarketplace: Bool?
        /// The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
        public let minDuration: Int64?
        /// The maximum number of instances to filter when searching for offerings. Default: 20
        public let maxInstanceCount: Int32?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(maxDuration: Int64? = nil, instanceTenancy: Tenancy? = nil, reservedInstancesOfferingIds: [String]? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, instanceType: InstanceType? = nil, availabilityZone: String? = nil, productDescription: RIProductDescription? = nil, maxResults: Int32? = nil, offeringType: OfferingTypeValues? = nil, offeringClass: OfferingClassType? = nil, includeMarketplace: Bool? = nil, minDuration: Int64? = nil, maxInstanceCount: Int32? = nil, nextToken: String? = nil) {
            self.maxDuration = maxDuration
            self.instanceTenancy = instanceTenancy
            self.reservedInstancesOfferingIds = reservedInstancesOfferingIds
            self.filters = filters
            self.dryRun = dryRun
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.productDescription = productDescription
            self.maxResults = maxResults
            self.offeringType = offeringType
            self.offeringClass = offeringClass
            self.includeMarketplace = includeMarketplace
            self.minDuration = minDuration
            self.maxInstanceCount = maxInstanceCount
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxDuration = "MaxDuration"
            case instanceTenancy = "instanceTenancy"
            case reservedInstancesOfferingIds = "ReservedInstancesOfferingId"
            case filters = "Filter"
            case dryRun = "dryRun"
            case instanceType = "InstanceType"
            case availabilityZone = "AvailabilityZone"
            case productDescription = "ProductDescription"
            case maxResults = "maxResults"
            case offeringType = "offeringType"
            case offeringClass = "OfferingClass"
            case includeMarketplace = "IncludeMarketplace"
            case minDuration = "MinDuration"
            case maxInstanceCount = "MaxInstanceCount"
            case nextToken = "nextToken"
        }
    }

    public struct CancelledSpotInstanceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The ID of the Spot instance request.
        public let spotInstanceRequestId: String?
        /// The state of the Spot instance request.
        public let state: CancelSpotInstanceRequestState?

        public init(spotInstanceRequestId: String? = nil, state: CancelSpotInstanceRequestState? = nil) {
            self.spotInstanceRequestId = spotInstanceRequestId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequestId = "spotInstanceRequestId"
            case state = "state"
        }
    }

    public struct VpcPeeringConnectionList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcPeeringConnection]?

        public init(item: [VpcPeeringConnection]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct MovingAddressStatusSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [MovingAddressStatus]?

        public init(item: [MovingAddressStatus]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyImageAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "ProductCode"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .structure), 
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "UserGroups", location: .body(locationName: "UserGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Attribute", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "LaunchPermission", required: false, type: .structure), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum)
        ]
        /// One or more product codes. After you add a product code to an AMI, it can't be removed. This is only valid when modifying the productCodes attribute.
        public let productCodes: ProductCodeStringList?
        /// A description for the AMI.
        public let description: AttributeValue?
        /// One or more AWS account IDs. This is only valid when modifying the launchPermission attribute.
        public let userIds: UserIdStringList?
        /// The ID of the AMI.
        public let imageId: String
        /// One or more user groups. This is only valid when modifying the launchPermission attribute.
        public let userGroups: UserGroupStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the attribute to modify.
        public let attribute: String?
        /// The value of the attribute being modified. This is only valid when modifying the description attribute.
        public let value: String?
        /// A launch permission modification.
        public let launchPermission: LaunchPermissionModifications?
        /// The operation type.
        public let operationType: OperationType?

        public init(productCodes: ProductCodeStringList? = nil, description: AttributeValue? = nil, userIds: UserIdStringList? = nil, imageId: String, userGroups: UserGroupStringList? = nil, dryRun: Bool? = nil, attribute: String? = nil, value: String? = nil, launchPermission: LaunchPermissionModifications? = nil, operationType: OperationType? = nil) {
            self.productCodes = productCodes
            self.description = description
            self.userIds = userIds
            self.imageId = imageId
            self.userGroups = userGroups
            self.dryRun = dryRun
            self.attribute = attribute
            self.value = value
            self.launchPermission = launchPermission
            self.operationType = operationType
        }

        private enum CodingKeys: String, CodingKey {
            case productCodes = "ProductCode"
            case description = "Description"
            case userIds = "UserId"
            case imageId = "ImageId"
            case userGroups = "UserGroup"
            case dryRun = "dryRun"
            case attribute = "Attribute"
            case value = "Value"
            case launchPermission = "LaunchPermission"
            case operationType = "OperationType"
        }
    }

    public struct SubnetIpv6CidrBlockAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockState", location: .body(locationName: "ipv6CidrBlockState"), required: false, type: .structure), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: SubnetCidrBlockState?
        /// The association ID for the CIDR block.
        public let associationId: String?

        public init(ipv6CidrBlock: String? = nil, ipv6CidrBlockState: SubnetCidrBlockState? = nil, associationId: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
            case ipv6CidrBlockState = "ipv6CidrBlockState"
            case associationId = "associationId"
        }
    }

    public struct NetworkAclList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkAcl]?

        public init(item: [NetworkAcl]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VolumeStatusDetailsList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusDetails]?

        public init(item: [VolumeStatusDetails]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateDhcpOptionsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptions", location: .body(locationName: "dhcpOptions"), required: false, type: .structure)
        ]
        /// A set of DHCP options.
        public let dhcpOptions: DhcpOptions?

        public init(dhcpOptions: DhcpOptions? = nil) {
            self.dhcpOptions = dhcpOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptions"
        }
    }

    public struct InstanceNetworkInterfaceAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "IpOwnerId", location: .body(locationName: "ipOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string)
        ]
        /// The public IP address or Elastic IP address bound to the network interface.
        public let publicIp: String?
        /// The ID of the owner of the Elastic IP address.
        public let ipOwnerId: String?
        /// The public DNS name.
        public let publicDnsName: String?

        public init(publicIp: String? = nil, ipOwnerId: String? = nil, publicDnsName: String? = nil) {
            self.publicIp = publicIp
            self.ipOwnerId = ipOwnerId
            self.publicDnsName = publicDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "publicIp"
            case ipOwnerId = "ipOwnerId"
            case publicDnsName = "publicDnsName"
        }
    }

    public struct AddressList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Address]?

        public init(item: [Address]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EbsInstanceBlockDevice: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]
        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, status: AttachmentStatus? = nil, volumeId: String? = nil) {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.status = status
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case status = "status"
            case volumeId = "volumeId"
        }
    }

    public struct CancelImportTaskRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "CancelReason", required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The reason for canceling the task.
        public let cancelReason: String?
        /// The ID of the import image or import snapshot task to be canceled.
        public let importTaskId: String?

        public init(dryRun: Bool? = nil, cancelReason: String? = nil, importTaskId: String? = nil) {
            self.dryRun = dryRun
            self.cancelReason = cancelReason
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case cancelReason = "CancelReason"
            case importTaskId = "ImportTaskId"
        }
    }

    public struct ReservedInstanceReservationValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstanceId", location: .body(locationName: "reservedInstanceId"), required: false, type: .string), 
            AWSShapeMember(label: "ReservationValue", location: .body(locationName: "reservationValue"), required: false, type: .structure)
        ]
        /// The ID of the Convertible Reserved Instance that you are exchanging.
        public let reservedInstanceId: String?
        /// The total value of the Convertible Reserved Instance that you are exchanging.
        public let reservationValue: ReservationValue?

        public init(reservedInstanceId: String? = nil, reservationValue: ReservationValue? = nil) {
            self.reservedInstanceId = reservedInstanceId
            self.reservationValue = reservationValue
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstanceId = "reservedInstanceId"
            case reservationValue = "reservationValue"
        }
    }

    public struct CreateFlowLogsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "flowLogIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// The IDs of the flow logs.
        public let flowLogIds: ValueStringList?
        /// Information about the flow logs that could not be created successfully.
        public let unsuccessful: UnsuccessfulItemSet?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
        public let clientToken: String?

        public init(flowLogIds: ValueStringList? = nil, unsuccessful: UnsuccessfulItemSet? = nil, clientToken: String? = nil) {
            self.flowLogIds = flowLogIds
            self.unsuccessful = unsuccessful
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogIds = "flowLogIdSet"
            case unsuccessful = "unsuccessful"
            case clientToken = "clientToken"
        }
    }

    public struct StopInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "Force", location: .body(locationName: "force"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false 
        public let force: Bool?

        public init(dryRun: Bool? = nil, instanceIds: InstanceIdStringList, force: Bool? = nil) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
            case force = "force"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZoneName", location: .body(locationName: "zoneName"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "zoneState"), required: false, type: .enum), 
            AWSShapeMember(label: "Messages", location: .body(locationName: "messageSet"), required: false, type: .structure), 
            AWSShapeMember(label: "RegionName", location: .body(locationName: "regionName"), required: false, type: .string)
        ]
        /// The name of the Availability Zone.
        public let zoneName: String?
        /// The state of the Availability Zone.
        public let state: AvailabilityZoneState?
        /// Any messages about the Availability Zone.
        public let messages: AvailabilityZoneMessageList?
        /// The name of the region.
        public let regionName: String?

        public init(zoneName: String? = nil, state: AvailabilityZoneState? = nil, messages: AvailabilityZoneMessageList? = nil, regionName: String? = nil) {
            self.zoneName = zoneName
            self.state = state
            self.messages = messages
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case zoneName = "zoneName"
            case state = "zoneState"
            case messages = "messageSet"
            case regionName = "regionName"
        }
    }

    public struct VolumeStatusDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string)
        ]
        /// The name of the volume status.
        public let name: VolumeStatusName?
        /// The intended status of the volume status.
        public let status: String?

        public init(name: VolumeStatusName? = nil, status: String? = nil) {
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case status = "status"
        }
    }

    public struct DisassociateIamInstanceProfileResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public enum AvailabilityZoneState: String, CustomStringConvertible, Codable {
        case available = "available"
        case information = "information"
        case impaired = "impaired"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedInstancesModificationsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstancesModificationIds", location: .body(locationName: "ReservedInstancesModificationId"), required: false, type: .structure)
        ]
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    modification-result.target-configuration.platform - The network platform of the new Reserved Instances (EC2-Classic | EC2-VPC).    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.  
        public let filters: FilterList?
        /// IDs for the submitted modification request.
        public let reservedInstancesModificationIds: ReservedInstancesModificationIdStringList?

        public init(nextToken: String? = nil, filters: FilterList? = nil, reservedInstancesModificationIds: ReservedInstancesModificationIdStringList? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.reservedInstancesModificationIds = reservedInstancesModificationIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case filters = "Filter"
            case reservedInstancesModificationIds = "ReservedInstancesModificationId"
        }
    }

    public struct SpotInstanceStateFault: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The reason code for the Spot instance state change.
        public let code: String?
        /// The message for the Spot instance state change.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DescribeImagesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Images", location: .body(locationName: "imagesSet"), required: false, type: .structure)
        ]
        /// Information about one or more images.
        public let images: ImageList?

        public init(images: ImageList? = nil) {
            self.images = images
        }

        private enum CodingKeys: String, CodingKey {
            case images = "imagesSet"
        }
    }

    public struct TagSpecificationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TagSpecification]?

        public init(item: [TagSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SecurityGroupIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .list)
        ]
        public let securityGroupId: [String]?

        public init(securityGroupId: [String]? = nil) {
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
        }
    }

    public struct ScheduledInstancesPlacement: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string)
        ]
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?

        public init(availabilityZone: String? = nil, groupName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case groupName = "GroupName"
        }
    }

    public struct CancelSpotFleetRequestsSuccessItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentSpotFleetRequestState", location: .body(locationName: "currentSpotFleetRequestState"), required: true, type: .enum), 
            AWSShapeMember(label: "PreviousSpotFleetRequestState", location: .body(locationName: "previousSpotFleetRequestState"), required: true, type: .enum), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The current state of the Spot fleet request.
        public let currentSpotFleetRequestState: BatchState
        /// The previous state of the Spot fleet request.
        public let previousSpotFleetRequestState: BatchState
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String

        public init(currentSpotFleetRequestState: BatchState, previousSpotFleetRequestState: BatchState, spotFleetRequestId: String) {
            self.currentSpotFleetRequestState = currentSpotFleetRequestState
            self.previousSpotFleetRequestState = previousSpotFleetRequestState
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case currentSpotFleetRequestState = "currentSpotFleetRequestState"
            case previousSpotFleetRequestState = "previousSpotFleetRequestState"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct AuthorizeSecurityGroupIngressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", required: false, type: .integer), 
            AWSShapeMember(label: "ToPort", required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        /// [EC2-Classic] The AWS account number for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// [EC2-Classic, default VPC] The name of the security group.
        public let groupName: String?
        /// A set of IP permissions. Can be used to specify multiple rules in a single command.
        public let ipPermissions: IpPermissionList?
        /// The CIDR IPv4 address range. You can't specify this parameter when specifying a source security group.
        public let cidrIp: String?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.
        public let sourceSecurityGroupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. For the ICMP/ICMPv6 type number, use -1 to specify all types.
        public let fromPort: Int32?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code number. For the ICMP/ICMPv6 code number, use -1 to specify all codes.
        public let toPort: Int32?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). (VPC only) Use -1 to specify all protocols. If you specify -1, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6), traffic on all ports is allowed, regardless of any ports you specify. For tcp, udp, and icmp, you must specify a port range. For protocol 58 (ICMPv6), you can optionally specify a port range; if you don't, traffic for all types and codes is allowed.
        public let ipProtocol: String?
        /// The ID of the security group. Required for a nondefault VPC.
        public let groupId: String?

        public init(sourceSecurityGroupOwnerId: String? = nil, groupName: String? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil, dryRun: Bool? = nil, fromPort: Int32? = nil, toPort: Int32? = nil, ipProtocol: String? = nil, groupId: String? = nil) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.toPort = toPort
            self.ipProtocol = ipProtocol
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case cidrIp = "CidrIp"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case dryRun = "dryRun"
            case fromPort = "FromPort"
            case toPort = "ToPort"
            case ipProtocol = "IpProtocol"
            case groupId = "GroupId"
        }
    }

    public struct KeyNameStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyName", required: false, type: .list)
        ]
        public let keyName: [String]?

        public init(keyName: [String]? = nil) {
            self.keyName = keyName
        }

        private enum CodingKeys: String, CodingKey {
            case keyName = "KeyName"
        }
    }

    public struct PortRange: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "From", location: .body(locationName: "from"), required: false, type: .integer), 
            AWSShapeMember(label: "To", location: .body(locationName: "to"), required: false, type: .integer)
        ]
        /// The first port in the range.
        public let from: Int32?
        /// The last port in the range.
        public let to: Int32?

        public init(from: Int32? = nil, to: Int32? = nil) {
            self.from = from
            self.to = to
        }

        private enum CodingKeys: String, CodingKey {
            case from = "from"
            case to = "to"
        }
    }

    public struct InstanceState: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .integer)
        ]
        /// The current state of the instance.
        public let name: InstanceStateName?
        /// The low byte represents the state. The high byte is an opaque internal value and should be ignored.    0 : pending     16 : running     32 : shutting-down     48 : terminated     64 : stopping     80 : stopped   
        public let code: Int32?

        public init(name: InstanceStateName? = nil, code: Int32? = nil) {
            self.name = name
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case code = "code"
        }
    }

    public enum Tenancy: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public struct VgwTelemetryList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VgwTelemetry]?

        public init(item: [VgwTelemetry]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstancePrivateIpAddress: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Association", location: .body(locationName: "association"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]
        /// The association information for an Elastic IP address for the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// The private IPv4 DNS name.
        public let privateDnsName: String?
        /// Indicates whether this IPv4 address is the primary private IP address of the network interface.
        public let primary: Bool?
        /// The private IPv4 address of the network interface.
        public let privateIpAddress: String?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, privateDnsName: String? = nil, primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.privateDnsName = privateDnsName
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association = "association"
            case privateDnsName = "privateDnsName"
            case primary = "primary"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct HostProperties: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Sockets", location: .body(locationName: "sockets"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "TotalVCpus", location: .body(locationName: "totalVCpus"), required: false, type: .integer), 
            AWSShapeMember(label: "Cores", location: .body(locationName: "cores"), required: false, type: .integer)
        ]
        /// The number of sockets on the Dedicated Host.
        public let sockets: Int32?
        /// The instance type size that the Dedicated Host supports (for example, m3.medium).
        public let instanceType: String?
        /// The number of vCPUs on the Dedicated Host.
        public let totalVCpus: Int32?
        /// The number of cores on the Dedicated Host.
        public let cores: Int32?

        public init(sockets: Int32? = nil, instanceType: String? = nil, totalVCpus: Int32? = nil, cores: Int32? = nil) {
            self.sockets = sockets
            self.instanceType = instanceType
            self.totalVCpus = totalVCpus
            self.cores = cores
        }

        private enum CodingKeys: String, CodingKey {
            case sockets = "sockets"
            case instanceType = "instanceType"
            case totalVCpus = "totalVCpus"
            case cores = "cores"
        }
    }

    public struct UnassignPrivateIpAddressesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddress"), required: true, type: .structure)
        ]
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
        public let privateIpAddresses: PrivateIpAddressStringList

        public init(networkInterfaceId: String, privateIpAddresses: PrivateIpAddressStringList) {
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case privateIpAddresses = "privateIpAddress"
        }
    }

    public struct SecurityGroupReference: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReferencingVpcId", location: .body(locationName: "referencingVpcId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]
        /// The ID of the VPC with the referencing security group.
        public let referencingVpcId: String
        /// The ID of your security group.
        public let groupId: String
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(referencingVpcId: String, groupId: String, vpcPeeringConnectionId: String? = nil) {
            self.referencingVpcId = referencingVpcId
            self.groupId = groupId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case referencingVpcId = "referencingVpcId"
            case groupId = "groupId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct RegionList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Region]?

        public init(item: [Region]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PriceSchedule: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Term", location: .body(locationName: "term"), required: false, type: .long), 
            AWSShapeMember(label: "Active", location: .body(locationName: "active"), required: false, type: .boolean)
        ]
        /// The fixed price for the term.
        public let price: Double?
        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?
        /// The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
        public let active: Bool?

        public init(price: Double? = nil, currencyCode: CurrencyCodeValues? = nil, term: Int64? = nil, active: Bool? = nil) {
            self.price = price
            self.currencyCode = currencyCode
            self.term = term
            self.active = active
        }

        private enum CodingKeys: String, CodingKey {
            case price = "price"
            case currencyCode = "currencyCode"
            case term = "term"
            case active = "active"
        }
    }

    public struct DescribePrefixListsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "PrefixListId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more prefix list IDs.
        public let prefixListIds: ValueStringList?
        /// One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value specified is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?

        public init(prefixListIds: ValueStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.prefixListIds = prefixListIds
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case prefixListIds = "PrefixListId"
            case filters = "Filter"
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DiskImage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Image", required: false, type: .structure), 
            AWSShapeMember(label: "Volume", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Information about the disk image.
        public let image: DiskImageDetail?
        /// Information about the volume.
        public let volume: VolumeDetail?
        /// A description of the disk image.
        public let description: String?

        public init(image: DiskImageDetail? = nil, volume: VolumeDetail? = nil, description: String? = nil) {
            self.image = image
            self.volume = volume
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case image = "Image"
            case volume = "Volume"
            case description = "Description"
        }
    }

    public struct DescribeRouteTablesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "RouteTableId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more route table IDs. Default: Describes all your route tables.
        public let routeTableIds: ValueStringList?
        /// One or more filters.    association.route-table-association-id - The ID of an association ID for the route table.    association.route-table-id - The ID of the route table involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    association.main - Indicates whether the route table is the main route table for the VPC (true | false). Route tables that do not have an association ID are not returned in the response.    route-table-id - The ID of the route table.    route.destination-cidr-block - The IPv4 CIDR range specified in a route in the table.    route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in a route in the route table.    route.destination-prefix-list-id - The ID (prefix) of the AWS service specified in a route in the table.    route.egress-only-internet-gateway-id - The ID of an egress-only Internet gateway specified in a route in the route table.    route.gateway-id - The ID of a gateway specified in a route in the table.    route.instance-id - The ID of an instance specified in a route in the table.    route.nat-gateway-id - The ID of a NAT gateway.    route.origin - Describes how the route was created. CreateRouteTable indicates that the route was automatically created when the route table was created; CreateRoute indicates that the route was manually added to the route table; EnableVgwRoutePropagation indicates that the route was propagated by route propagation.    route.state - The state of a route in the route table (active | blackhole). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).    route.vpc-peering-connection-id - The ID of a VPC peering connection specified in a route in the table.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    vpc-id - The ID of the VPC for the route table.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(routeTableIds: ValueStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.routeTableIds = routeTableIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableIds = "RouteTableId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeInternetGatewaysResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGateways", location: .body(locationName: "internetGatewaySet"), required: false, type: .structure)
        ]
        /// Information about one or more Internet gateways.
        public let internetGateways: InternetGatewayList?

        public init(internetGateways: InternetGatewayList? = nil) {
            self.internetGateways = internetGateways
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateways = "internetGatewaySet"
        }
    }

    public struct InstanceNetworkInterfaceAttachment: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The time stamp when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The index of the device on the instance for the network interface attachment.
        public let deviceIndex: Int32?
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The attachment state.
        public let status: AttachmentStatus?

        public init(attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int32? = nil, attachmentId: String? = nil, status: AttachmentStatus? = nil) {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.attachmentId = attachmentId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case deviceIndex = "deviceIndex"
            case attachmentId = "attachmentId"
            case status = "status"
        }
    }

    public struct NetworkInterfaceIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DisassociateVpcCidrBlockRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct DescribeVpcPeeringConnectionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionIds", location: .body(locationName: "VpcPeeringConnectionId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more VPC peering connection IDs. Default: Describes all your VPC peering connections.
        public let vpcPeeringConnectionIds: ValueStringList?
        /// One or more filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the peer VPC.    accepter-vpc-info.owner-id - The AWS account ID of the owner of the peer VPC.    accepter-vpc-info.vpc-id - The ID of the peer VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The AWS account ID of the owner of the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    vpc-peering-connection-id - The ID of the VPC peering connection.  
        public let filters: FilterList?

        public init(dryRun: Bool? = nil, vpcPeeringConnectionIds: ValueStringList? = nil, filters: FilterList? = nil) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionIds = vpcPeeringConnectionIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionIds = "VpcPeeringConnectionId"
            case filters = "Filter"
        }
    }

    public struct DetachClassicLinkVpcRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC to which the instance is linked.
        public let vpcId: String
        /// The ID of the instance to unlink from the VPC.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, instanceId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case instanceId = "instanceId"
            case dryRun = "dryRun"
        }
    }

    public struct ReservationValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "RemainingTotalValue", location: .body(locationName: "remainingTotalValue"), required: false, type: .string), 
            AWSShapeMember(label: "RemainingUpfrontValue", location: .body(locationName: "remainingUpfrontValue"), required: false, type: .string)
        ]
        /// The hourly rate of the reservation.
        public let hourlyPrice: String?
        /// The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
        public let remainingTotalValue: String?
        /// The remaining upfront cost of the reservation.
        public let remainingUpfrontValue: String?

        public init(hourlyPrice: String? = nil, remainingTotalValue: String? = nil, remainingUpfrontValue: String? = nil) {
            self.hourlyPrice = hourlyPrice
            self.remainingTotalValue = remainingTotalValue
            self.remainingUpfrontValue = remainingUpfrontValue
        }

        private enum CodingKeys: String, CodingKey {
            case hourlyPrice = "hourlyPrice"
            case remainingTotalValue = "remainingTotalValue"
            case remainingUpfrontValue = "remainingUpfrontValue"
        }
    }

    public struct DetachClassicLinkVpcResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct UnsuccessfulItemList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UnsuccessfulItem]?

        public init(item: [UnsuccessfulItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PrivateIpAddressSpecificationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PrivateIpAddressSpecification]?

        public init(item: [PrivateIpAddressSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct S3Storage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: false, type: .string), 
            AWSShapeMember(label: "AWSAccessKeyId", required: false, type: .string), 
            AWSShapeMember(label: "UploadPolicySignature", location: .body(locationName: "uploadPolicySignature"), required: false, type: .string), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string), 
            AWSShapeMember(label: "UploadPolicy", location: .body(locationName: "uploadPolicy"), required: false, type: .blob)
        ]
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let bucket: String?
        /// The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in Best Practices for Managing AWS Access Keys.
        public let aWSAccessKeyId: String?
        /// The signature of the JSON document.
        public let uploadPolicySignature: String?
        /// The beginning of the file name of the AMI.
        public let prefix: String?
        /// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.
        public let uploadPolicy: Data?

        public init(bucket: String? = nil, aWSAccessKeyId: String? = nil, uploadPolicySignature: String? = nil, prefix: String? = nil, uploadPolicy: Data? = nil) {
            self.bucket = bucket
            self.aWSAccessKeyId = aWSAccessKeyId
            self.uploadPolicySignature = uploadPolicySignature
            self.prefix = prefix
            self.uploadPolicy = uploadPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case aWSAccessKeyId = "AWSAccessKeyId"
            case uploadPolicySignature = "uploadPolicySignature"
            case prefix = "prefix"
            case uploadPolicy = "uploadPolicy"
        }
    }

    public struct VolumeAttachmentList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeAttachment]?

        public init(item: [VolumeAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Reservations", location: .body(locationName: "reservationSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Zero or more reservations.
        public let reservations: ReservationList?

        public init(nextToken: String? = nil, reservations: ReservationList? = nil) {
            self.nextToken = nextToken
            self.reservations = reservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservations = "reservationSet"
        }
    }

    public struct DescribeReservedInstancesListingsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: false, type: .string)
        ]
        /// One or more Reserved Instance IDs.
        public let reservedInstancesId: String?
        /// One or more filters.    reserved-instances-id - The ID of the Reserved Instances.    reserved-instances-listing-id - The ID of the Reserved Instances listing.    status - The status of the Reserved Instance listing (pending | active | cancelled | closed).    status-message - The reason for the status.  
        public let filters: FilterList?
        /// One or more Reserved Instance listing IDs.
        public let reservedInstancesListingId: String?

        public init(reservedInstancesId: String? = nil, filters: FilterList? = nil, reservedInstancesListingId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
            self.filters = filters
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
            case filters = "Filter"
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct ScheduledInstancesSecurityGroupIdSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .list)
        ]
        public let securityGroupId: [String]?

        public init(securityGroupId: [String]? = nil) {
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
        }
    }

    public enum MonitoringState: String, CustomStringConvertible, Codable {
        case disabled = "disabled"
        case disabling = "disabling"
        case enabled = "enabled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public struct AccountAttributeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AccountAttribute]?

        public init(item: [AccountAttribute]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelBundleTaskRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the bundle task.
        public let bundleId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bundleId: String, dryRun: Bool? = nil) {
            self.bundleId = bundleId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "BundleId"
            case dryRun = "dryRun"
        }
    }

    public struct ImageDiskContainerList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImageDiskContainer]?

        public init(item: [ImageDiskContainer]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteCustomerGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the customer gateway.
        public let customerGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(customerGatewayId: String, dryRun: Bool? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeHostsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Hosts", location: .body(locationName: "hostSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the Dedicated Hosts.
        public let hosts: HostList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hosts: HostList? = nil, nextToken: String? = nil) {
            self.hosts = hosts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hosts = "hostSet"
            case nextToken = "nextToken"
        }
    }

    public enum SnapshotAttributeName: String, CustomStringConvertible, Codable {
        case productcodes = "productCodes"
        case createvolumepermission = "createVolumePermission"
        public var description: String { return self.rawValue }
    }

    public struct NatGatewayAddressList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NatGatewayAddress]?

        public init(item: [NatGatewayAddress]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PurchaseHostReservationResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Purchase", location: .body(locationName: "purchase"), required: false, type: .list), 
            AWSShapeMember(label: "TotalUpfrontPrice", location: .body(locationName: "totalUpfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "TotalHourlyPrice", location: .body(locationName: "totalHourlyPrice"), required: false, type: .string)
        ]
        /// Describes the details of the purchase.
        public let purchase: [Purchase]?
        /// The total amount that will be charged to your account when you purchase the reservation.
        public let totalUpfrontPrice: String?
        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide 
        public let clientToken: String?
        /// The total hourly price of the reservation calculated per hour.
        public let totalHourlyPrice: String?

        public init(purchase: [Purchase]? = nil, totalUpfrontPrice: String? = nil, currencyCode: CurrencyCodeValues? = nil, clientToken: String? = nil, totalHourlyPrice: String? = nil) {
            self.purchase = purchase
            self.totalUpfrontPrice = totalUpfrontPrice
            self.currencyCode = currencyCode
            self.clientToken = clientToken
            self.totalHourlyPrice = totalHourlyPrice
        }

        private enum CodingKeys: String, CodingKey {
            case purchase = "purchase"
            case totalUpfrontPrice = "totalUpfrontPrice"
            case currencyCode = "currencyCode"
            case clientToken = "clientToken"
            case totalHourlyPrice = "totalHourlyPrice"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReturnCode", location: .body(locationName: "returnCode"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnCode: Bool?

        public init(returnCode: Bool? = nil) {
            self.returnCode = returnCode
        }

        private enum CodingKeys: String, CodingKey {
            case returnCode = "returnCode"
        }
    }

    public struct DeleteVolumeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the volume.
        public let volumeId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(volumeId: String, dryRun: Bool? = nil) {
            self.volumeId = volumeId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
            case dryRun = "dryRun"
        }
    }

    public struct EgressOnlyInternetGatewayIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RequestHostIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TargetConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer)
        ]
        /// The ID of the Convertible Reserved Instance offering.
        public let offeringId: String?
        /// The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int32?

        public init(offeringId: String? = nil, instanceCount: Int32? = nil) {
            self.offeringId = offeringId
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case offeringId = "offeringId"
            case instanceCount = "instanceCount"
        }
    }

    public struct FilterList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .list)
        ]
        public let filter: [Filter]?

        public init(filter: [Filter]? = nil) {
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
        }
    }

    public struct CreateCustomerGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGateway", location: .body(locationName: "customerGateway"), required: false, type: .structure)
        ]
        /// Information about the customer gateway.
        public let customerGateway: CustomerGateway?

        public init(customerGateway: CustomerGateway? = nil) {
            self.customerGateway = customerGateway
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateway = "customerGateway"
        }
    }

    public struct DescribeBundleTasksResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTasks", location: .body(locationName: "bundleInstanceTasksSet"), required: false, type: .structure)
        ]
        /// Information about one or more bundle tasks.
        public let bundleTasks: BundleTaskList?

        public init(bundleTasks: BundleTaskList? = nil) {
            self.bundleTasks = bundleTasks
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTasks = "bundleInstanceTasksSet"
        }
    }

    public struct GetReservedInstancesExchangeQuoteResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputReservedInstancesWillExpireAt", location: .body(locationName: "outputReservedInstancesWillExpireAt"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TargetConfigurationValueRollup", location: .body(locationName: "targetConfigurationValueRollup"), required: false, type: .structure), 
            AWSShapeMember(label: "IsValidExchange", location: .body(locationName: "isValidExchange"), required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedInstanceValueRollup", location: .body(locationName: "reservedInstanceValueRollup"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservedInstanceValueSet", location: .body(locationName: "reservedInstanceValueSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PaymentDue", location: .body(locationName: "paymentDue"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .string), 
            AWSShapeMember(label: "TargetConfigurationValueSet", location: .body(locationName: "targetConfigurationValueSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ValidationFailureReason", location: .body(locationName: "validationFailureReason"), required: false, type: .string)
        ]
        /// The new end date of the reservation term.
        public let outputReservedInstancesWillExpireAt: TimeStamp?
        /// The cost associated with the Reserved Instance.
        public let targetConfigurationValueRollup: ReservationValue?
        /// If true, the exchange is valid. If false, the exchange cannot be completed.
        public let isValidExchange: Bool?
        /// The cost associated with the Reserved Instance.
        public let reservedInstanceValueRollup: ReservationValue?
        /// The configuration of your Convertible Reserved Instances.
        public let reservedInstanceValueSet: ReservedInstanceReservationValueSet?
        /// The total true upfront charge for the exchange.
        public let paymentDue: String?
        /// The currency of the transaction.
        public let currencyCode: String?
        /// The values of the target Convertible Reserved Instances.
        public let targetConfigurationValueSet: TargetReservationValueSet?
        /// Describes the reason why the exchange cannot be completed.
        public let validationFailureReason: String?

        public init(outputReservedInstancesWillExpireAt: TimeStamp? = nil, targetConfigurationValueRollup: ReservationValue? = nil, isValidExchange: Bool? = nil, reservedInstanceValueRollup: ReservationValue? = nil, reservedInstanceValueSet: ReservedInstanceReservationValueSet? = nil, paymentDue: String? = nil, currencyCode: String? = nil, targetConfigurationValueSet: TargetReservationValueSet? = nil, validationFailureReason: String? = nil) {
            self.outputReservedInstancesWillExpireAt = outputReservedInstancesWillExpireAt
            self.targetConfigurationValueRollup = targetConfigurationValueRollup
            self.isValidExchange = isValidExchange
            self.reservedInstanceValueRollup = reservedInstanceValueRollup
            self.reservedInstanceValueSet = reservedInstanceValueSet
            self.paymentDue = paymentDue
            self.currencyCode = currencyCode
            self.targetConfigurationValueSet = targetConfigurationValueSet
            self.validationFailureReason = validationFailureReason
        }

        private enum CodingKeys: String, CodingKey {
            case outputReservedInstancesWillExpireAt = "outputReservedInstancesWillExpireAt"
            case targetConfigurationValueRollup = "targetConfigurationValueRollup"
            case isValidExchange = "isValidExchange"
            case reservedInstanceValueRollup = "reservedInstanceValueRollup"
            case reservedInstanceValueSet = "reservedInstanceValueSet"
            case paymentDue = "paymentDue"
            case currencyCode = "currencyCode"
            case targetConfigurationValueSet = "targetConfigurationValueSet"
            case validationFailureReason = "validationFailureReason"
        }
    }

    public struct InstanceExportDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "TargetEnvironment", location: .body(locationName: "targetEnvironment"), required: false, type: .enum)
        ]
        /// The ID of the resource being exported.
        public let instanceId: String?
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?

        public init(instanceId: String? = nil, targetEnvironment: ExportEnvironment? = nil) {
            self.instanceId = instanceId
            self.targetEnvironment = targetEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case targetEnvironment = "targetEnvironment"
        }
    }

    public struct NetworkAcl: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsDefault", location: .body(locationName: "default"), required: false, type: .boolean), 
            AWSShapeMember(label: "Entries", location: .body(locationName: "entrySet"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Associations", location: .body(locationName: "associationSet"), required: false, type: .structure)
        ]
        /// Indicates whether this is the default network ACL for the VPC.
        public let isDefault: Bool?
        /// One or more entries (rules) in the network ACL.
        public let entries: NetworkAclEntryList?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the VPC for the network ACL.
        public let vpcId: String?
        /// Any tags assigned to the network ACL.
        public let tags: TagList?
        /// Any associations between the network ACL and one or more subnets
        public let associations: NetworkAclAssociationList?

        public init(isDefault: Bool? = nil, entries: NetworkAclEntryList? = nil, networkAclId: String? = nil, vpcId: String? = nil, tags: TagList? = nil, associations: NetworkAclAssociationList? = nil) {
            self.isDefault = isDefault
            self.entries = entries
            self.networkAclId = networkAclId
            self.vpcId = vpcId
            self.tags = tags
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case isDefault = "default"
            case entries = "entrySet"
            case networkAclId = "networkAclId"
            case vpcId = "vpcId"
            case tags = "tagSet"
            case associations = "associationSet"
        }
    }

    public enum InstanceHealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        public var description: String { return self.rawValue }
    }

    public struct RevokeSecurityGroupIngressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", required: false, type: .integer), 
            AWSShapeMember(label: "ToPort", required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        /// [EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// [EC2-Classic, default VPC] The name of the security group.
        public let groupName: String?
        /// A set of IP permissions. You can't specify a source security group and a CIDR IP address range.
        public let ipPermissions: IpPermissionList?
        /// The CIDR IP address range. You can't specify this parameter when specifying a source security group.
        public let cidrIp: String?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all ICMP types.
        public let fromPort: Int32?
        /// The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type.
        public let toPort: Int32?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). Use -1 to specify all.
        public let ipProtocol: String?
        /// The ID of the security group. Required for a security group in a nondefault VPC.
        public let groupId: String?

        public init(sourceSecurityGroupOwnerId: String? = nil, groupName: String? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil, dryRun: Bool? = nil, fromPort: Int32? = nil, toPort: Int32? = nil, ipProtocol: String? = nil, groupId: String? = nil) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.toPort = toPort
            self.ipProtocol = ipProtocol
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case cidrIp = "CidrIp"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case dryRun = "dryRun"
            case fromPort = "FromPort"
            case toPort = "ToPort"
            case ipProtocol = "IpProtocol"
            case groupId = "GroupId"
        }
    }

    public struct DescribeKeyPairsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPairs", location: .body(locationName: "keySet"), required: false, type: .structure)
        ]
        /// Information about one or more key pairs.
        public let keyPairs: KeyPairList?

        public init(keyPairs: KeyPairList? = nil) {
            self.keyPairs = keyPairs
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairs = "keySet"
        }
    }

    public struct ScheduledInstancesPrivateIpAddressConfig: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Primary", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string)
        ]
        /// Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
        public let primary: Bool?
        /// The IPv4 address.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "Primary"
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct PciId: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VendorId", required: false, type: .string), 
            AWSShapeMember(label: "DeviceId", required: false, type: .string), 
            AWSShapeMember(label: "SubsystemVendorId", required: false, type: .string), 
            AWSShapeMember(label: "SubsystemId", required: false, type: .string)
        ]
        /// The ID of the vendor.
        public let vendorId: String?
        /// The ID of the device.
        public let deviceId: String?
        /// The ID of the vendor for the subsystem.
        public let subsystemVendorId: String?
        /// The ID of the subsystem.
        public let subsystemId: String?

        public init(vendorId: String? = nil, deviceId: String? = nil, subsystemVendorId: String? = nil, subsystemId: String? = nil) {
            self.vendorId = vendorId
            self.deviceId = deviceId
            self.subsystemVendorId = subsystemVendorId
            self.subsystemId = subsystemId
        }

        private enum CodingKeys: String, CodingKey {
            case vendorId = "VendorId"
            case deviceId = "DeviceId"
            case subsystemVendorId = "SubsystemVendorId"
            case subsystemId = "SubsystemId"
        }
    }

    public struct CancelReservedInstancesListingResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .structure)
        ]
        /// The Reserved Instance listing.
        public let reservedInstancesListings: ReservedInstancesListingList?

        public init(reservedInstancesListings: ReservedInstancesListingList? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct ReservationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Reservation]?

        public init(item: [Reservation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstanceIds", location: .body(locationName: "ReservedInstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "TargetConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The IDs of the Convertible Reserved Instances to exchange for other Convertible Reserved Instances of the same or higher value.
        public let reservedInstanceIds: ReservedInstanceIdSet
        /// The configurations of the Convertible Reserved Instance offerings that you are purchasing in this exchange.
        public let targetConfigurations: TargetConfigurationRequestSet?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(reservedInstanceIds: ReservedInstanceIdSet, targetConfigurations: TargetConfigurationRequestSet? = nil, dryRun: Bool? = nil) {
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
            case dryRun = "DryRun"
        }
    }

    public enum State: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case available = "Available"
        case deleting = "Deleting"
        case deleted = "Deleted"
        public var description: String { return self.rawValue }
    }

    public struct BundleInstanceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "Storage", required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the instance to bundle. Type: String Default: None Required: Yes
        public let instanceId: String
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let storage: Storage
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, storage: Storage, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.storage = storage
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case storage = "Storage"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeVolumesModificationsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VolumesModifications", location: .body(locationName: "volumeModificationSet"), required: false, type: .structure)
        ]
        /// Token for pagination, null if there are no more results 
        public let nextToken: String?
        /// A list of returned VolumeModification objects.
        public let volumesModifications: VolumeModificationList?

        public init(nextToken: String? = nil, volumesModifications: VolumeModificationList? = nil) {
            self.nextToken = nextToken
            self.volumesModifications = volumesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumesModifications = "volumeModificationSet"
        }
    }

    public struct DescribeVpcClassicLinkRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcIds", location: .body(locationName: "VpcId"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    is-classic-link-enabled - Whether the VPC is enabled for ClassicLink (true | false).    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.  
        public let filters: FilterList?
        /// One or more VPCs for which you want to describe the ClassicLink status.
        public let vpcIds: VpcClassicLinkIdList?

        public init(dryRun: Bool? = nil, filters: FilterList? = nil, vpcIds: VpcClassicLinkIdList? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpcIds = vpcIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case vpcIds = "VpcId"
        }
    }

    public struct DhcpOptionsList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [DhcpOptions]?

        public init(item: [DhcpOptions]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VpcClassicLinkList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcClassicLink]?

        public init(item: [VpcClassicLink]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SpotInstanceRequestList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotInstanceRequest]?

        public init(item: [SpotInstanceRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVolumeAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String
        /// The attribute of the volume. This parameter is required.
        public let attribute: VolumeAttributeName?

        public init(dryRun: Bool? = nil, volumeId: String, attribute: VolumeAttributeName? = nil) {
            self.dryRun = dryRun
            self.volumeId = volumeId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
            case attribute = "Attribute"
        }
    }

    public struct GetPasswordDataRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the Windows instance.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public enum RIProductDescription: String, CustomStringConvertible, Codable {
        case linuxUnix = "Linux/UNIX"
        case linuxUnixAmazonVpc = "Linux/UNIX (Amazon VPC)"
        case windows = "Windows"
        case windowsAmazonVpc = "Windows (Amazon VPC)"
        public var description: String { return self.rawValue }
    }

    public struct ReportInstanceStatusRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .enum), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "ReasonCodes", location: .body(locationName: "reasonCode"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The time at which the reported instance health state began.
        public let startTime: TimeStamp?
        /// The status of all instances listed.
        public let status: ReportStatusType
        /// The time at which the reported instance health state ended.
        public let endTime: TimeStamp?
        /// One or more instances.
        public let instances: InstanceIdStringList
        /// One or more reason codes that describes the health state of your instance.    instance-stuck-in-state: My instance is stuck in a state.    unresponsive: My instance is unresponsive.    not-accepting-credentials: My instance is not accepting my credentials.    password-not-available: A password is not available for my instance.    performance-network: My instance is experiencing performance problems which I believe are network related.    performance-instance-store: My instance is experiencing performance problems which I believe are related to the instance stores.    performance-ebs-volume: My instance is experiencing performance problems which I believe are related to an EBS volume.    performance-other: My instance is experiencing performance problems.    other: [explain using the description parameter]  
        public let reasonCodes: ReasonCodesList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Descriptive text about the health state of your instance.
        public let description: String?

        public init(startTime: TimeStamp? = nil, status: ReportStatusType, endTime: TimeStamp? = nil, instances: InstanceIdStringList, reasonCodes: ReasonCodesList, dryRun: Bool? = nil, description: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.endTime = endTime
            self.instances = instances
            self.reasonCodes = reasonCodes
            self.dryRun = dryRun
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "startTime"
            case status = "status"
            case endTime = "endTime"
            case instances = "instanceId"
            case reasonCodes = "reasonCode"
            case dryRun = "dryRun"
            case description = "description"
        }
    }

    public struct AllocateHostsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostIdSet"), required: false, type: .structure)
        ]
        /// The ID of the allocated Dedicated Host. This is used when you want to launch an instance onto a specific host.
        public let hostIds: ResponseHostIdList?

        public init(hostIds: ResponseHostIdList? = nil) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostIdSet"
        }
    }

    public struct InternetGatewayAttachmentList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InternetGatewayAttachment]?

        public init(item: [InternetGatewayAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct Tag: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string), 
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string)
        ]
        /// The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
        public let value: String?
        /// The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws: 
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
            case key = "key"
        }
    }

    public struct DescribeRegionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegionNames", location: .body(locationName: "RegionName"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The names of one or more regions.
        public let regionNames: RegionNameStringList?
        /// One or more filters.    endpoint - The endpoint of the region (for example, ec2.us-east-1.amazonaws.com).    region-name - The name of the region (for example, us-east-1).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(regionNames: RegionNameStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.regionNames = regionNames
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case regionNames = "RegionName"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct TagDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum)
        ]
        /// The tag key.
        public let key: String?
        /// The ID of the resource. For example, ami-1a2b3c4d.
        public let resourceId: String?
        /// The tag value.
        public let value: String?
        /// The resource type.
        public let resourceType: ResourceType?

        public init(key: String? = nil, resourceId: String? = nil, value: String? = nil, resourceType: ResourceType? = nil) {
            self.key = key
            self.resourceId = resourceId
            self.value = value
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case resourceId = "resourceId"
            case value = "value"
            case resourceType = "resourceType"
        }
    }

    public struct RegionNameStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegionName", required: false, type: .list)
        ]
        public let regionName: [String]?

        public init(regionName: [String]? = nil) {
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
        }
    }

    public struct ProvisionedBandwidth: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Provisioned", location: .body(locationName: "provisioned"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "RequestTime", location: .body(locationName: "requestTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ProvisionTime", location: .body(locationName: "provisionTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Requested", location: .body(locationName: "requested"), required: false, type: .string)
        ]
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisioned: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let status: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requestTime: TimeStamp?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionTime: TimeStamp?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requested: String?

        public init(provisioned: String? = nil, status: String? = nil, requestTime: TimeStamp? = nil, provisionTime: TimeStamp? = nil, requested: String? = nil) {
            self.provisioned = provisioned
            self.status = status
            self.requestTime = requestTime
            self.provisionTime = provisionTime
            self.requested = requested
        }

        private enum CodingKeys: String, CodingKey {
            case provisioned = "provisioned"
            case status = "status"
            case requestTime = "requestTime"
            case provisionTime = "provisionTime"
            case requested = "requested"
        }
    }

    public struct DescribeSnapshotAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// The ID of the EBS snapshot.
        public let snapshotId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The snapshot attribute you would like to view.
        public let attribute: SnapshotAttributeName

        public init(snapshotId: String, dryRun: Bool? = nil, attribute: SnapshotAttributeName) {
            self.snapshotId = snapshotId
            self.dryRun = dryRun
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case dryRun = "dryRun"
            case attribute = "Attribute"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct DescribeSnapshotAttributeResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "CreateVolumePermissions", location: .body(locationName: "createVolumePermission"), required: false, type: .structure)
        ]
        /// A list of product codes.
        public let productCodes: ProductCodeList?
        /// The ID of the EBS snapshot.
        public let snapshotId: String?
        /// A list of permissions for creating volumes from the snapshot.
        public let createVolumePermissions: CreateVolumePermissionList?

        public init(productCodes: ProductCodeList? = nil, snapshotId: String? = nil, createVolumePermissions: CreateVolumePermissionList? = nil) {
            self.productCodes = productCodes
            self.snapshotId = snapshotId
            self.createVolumePermissions = createVolumePermissions
        }

        private enum CodingKeys: String, CodingKey {
            case productCodes = "productCodes"
            case snapshotId = "snapshotId"
            case createVolumePermissions = "createVolumePermission"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", location: .body(locationName: "frequency"), required: false, type: .enum), 
            AWSShapeMember(label: "Amount", location: .body(locationName: "amount"), required: false, type: .double)
        ]
        /// The frequency of the recurring charge.
        public let frequency: RecurringChargeFrequency?
        /// The amount of the recurring charge.
        public let amount: Double?

        public init(frequency: RecurringChargeFrequency? = nil, amount: Double? = nil) {
            self.frequency = frequency
            self.amount = amount
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "frequency"
            case amount = "amount"
        }
    }

    public struct DeleteVpcPeeringConnectionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct DescribeAvailabilityZonesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ZoneNames", location: .body(locationName: "ZoneName"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The names of one or more Availability Zones.
        public let zoneNames: ZoneNameStringList?
        /// One or more filters.    message - Information about the Availability Zone.    region-name - The name of the region for the Availability Zone (for example, us-east-1).    state - The state of the Availability Zone (available | information | impaired | unavailable).    zone-name - The name of the Availability Zone (for example, us-east-1a).  
        public let filters: FilterList?

        public init(dryRun: Bool? = nil, zoneNames: ZoneNameStringList? = nil, filters: FilterList? = nil) {
            self.dryRun = dryRun
            self.zoneNames = zoneNames
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case zoneNames = "ZoneName"
            case filters = "Filter"
        }
    }

    public struct AssociateRouteTableResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// The route table association ID (needed to disassociate the route table).
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct Ipv6AddressList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct IcmpTypeCode: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .integer), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .integer)
        ]
        /// The ICMP type. A value of -1 means all types.
        public let `type`: Int32?
        /// The ICMP code. A value of -1 means all codes for the specified ICMP type.
        public let code: Int32?

        public init(type: Int32? = nil, code: Int32? = nil) {
            self.`type` = `type`
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case code = "code"
        }
    }

    public struct DeleteFlowLogsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "FlowLogId"), required: true, type: .structure)
        ]
        /// One or more flow log IDs.
        public let flowLogIds: ValueStringList

        public init(flowLogIds: ValueStringList) {
            self.flowLogIds = flowLogIds
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogIds = "FlowLogId"
        }
    }

    public struct DescribeVpnConnectionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnectionIds", location: .body(locationName: "VpnConnectionId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more VPN connection IDs. Default: Describes your VPN connections.
        public let vpnConnectionIds: VpnConnectionIdStringList?
        /// One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpnConnectionIds: VpnConnectionIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.vpnConnectionIds = vpnConnectionIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionIds = "VpnConnectionId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct ReservedInstanceLimitPrice: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Amount", location: .body(locationName: "amount"), required: false, type: .double)
        ]
        /// The currency in which the limitPrice amount is specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
        public let amount: Double?

        public init(currencyCode: CurrencyCodeValues? = nil, amount: Double? = nil) {
            self.currencyCode = currencyCode
            self.amount = amount
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "currencyCode"
            case amount = "amount"
        }
    }

    public struct NewDhcpConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "Value"), required: false, type: .structure)
        ]
        public let key: String?
        public let values: ValueStringList?

        public init(key: String? = nil, values: ValueStringList? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "Value"
        }
    }

    public struct KeyPairList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [KeyPairInfo]?

        public init(item: [KeyPairInfo]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NetworkAclEntry: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "icmpTypeCode"), required: false, type: .structure), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .string), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: false, type: .enum), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure)
        ]
        /// The IPv4 network range to allow or deny, in CIDR notation.
        public let cidrBlock: String?
        /// ICMP protocol: The ICMP type and code.
        public let icmpTypeCode: IcmpTypeCode?
        /// The rule number for the entry. ACL entries are processed in ascending order by rule number.
        public let ruleNumber: Int32?
        /// The protocol. A value of -1 means all protocols.
        public let `protocol`: String?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction?
        /// Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
        public let egress: Bool?
        /// The IPv6 network range to allow or deny, in CIDR notation.
        public let ipv6CidrBlock: String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        public let portRange: PortRange?

        public init(cidrBlock: String? = nil, icmpTypeCode: IcmpTypeCode? = nil, ruleNumber: Int32? = nil, protocol: String? = nil, ruleAction: RuleAction? = nil, egress: Bool? = nil, ipv6CidrBlock: String? = nil, portRange: PortRange? = nil) {
            self.cidrBlock = cidrBlock
            self.icmpTypeCode = icmpTypeCode
            self.ruleNumber = ruleNumber
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.egress = egress
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case icmpTypeCode = "icmpTypeCode"
            case ruleNumber = "ruleNumber"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case egress = "egress"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case portRange = "portRange"
        }
    }

    public struct Vpc: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsDefault", location: .body(locationName: "isDefault"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "DhcpOptionsId", location: .body(locationName: "dhcpOptionsId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociationSet", location: .body(locationName: "ipv6CidrBlockAssociationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string)
        ]
        /// Indicates whether the VPC is the default VPC.
        public let isDefault: Bool?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The current state of the VPC.
        public let state: VpcState?
        /// Any tags assigned to the VPC.
        public let tags: TagList?
        /// The ID of the set of DHCP options you've associated with the VPC (or default if the default options are associated with the VPC).
        public let dhcpOptionsId: String?
        /// Information about the IPv6 CIDR blocks associated with the VPC.
        public let ipv6CidrBlockAssociationSet: VpcIpv6CidrBlockAssociationSet?
        /// The allowed tenancy of instances launched into the VPC.
        public let instanceTenancy: Tenancy?
        /// The IPv4 CIDR block for the VPC.
        public let cidrBlock: String?

        public init(isDefault: Bool? = nil, vpcId: String? = nil, state: VpcState? = nil, tags: TagList? = nil, dhcpOptionsId: String? = nil, ipv6CidrBlockAssociationSet: VpcIpv6CidrBlockAssociationSet? = nil, instanceTenancy: Tenancy? = nil, cidrBlock: String? = nil) {
            self.isDefault = isDefault
            self.vpcId = vpcId
            self.state = state
            self.tags = tags
            self.dhcpOptionsId = dhcpOptionsId
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.instanceTenancy = instanceTenancy
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case isDefault = "isDefault"
            case vpcId = "vpcId"
            case state = "state"
            case tags = "tagSet"
            case dhcpOptionsId = "dhcpOptionsId"
            case ipv6CidrBlockAssociationSet = "ipv6CidrBlockAssociationSet"
            case instanceTenancy = "instanceTenancy"
            case cidrBlock = "cidrBlock"
        }
    }

    public struct AvailabilityZoneMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The message about the Availability Zone.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
        }
    }

    public struct DescribeStaleSecurityGroupsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(dryRun: Bool? = nil, vpcId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpcId = "VpcId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct RestoreAddressToClassicRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String

        public init(dryRun: Bool? = nil, publicIp: String) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case publicIp = "publicIp"
        }
    }

    public struct RouteTable: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Routes", location: .body(locationName: "routeSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PropagatingVgws", location: .body(locationName: "propagatingVgwSet"), required: false, type: .structure), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Associations", location: .body(locationName: "associationSet"), required: false, type: .structure)
        ]
        /// The routes in the route table.
        public let routes: RouteList?
        /// Any virtual private gateway (VGW) propagating routes.
        public let propagatingVgws: PropagatingVgwList?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// Any tags assigned to the route table.
        public let tags: TagList?
        /// The associations between the route table and one or more subnets.
        public let associations: RouteTableAssociationList?

        public init(routes: RouteList? = nil, propagatingVgws: PropagatingVgwList? = nil, routeTableId: String? = nil, vpcId: String? = nil, tags: TagList? = nil, associations: RouteTableAssociationList? = nil) {
            self.routes = routes
            self.propagatingVgws = propagatingVgws
            self.routeTableId = routeTableId
            self.vpcId = vpcId
            self.tags = tags
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case routes = "routeSet"
            case propagatingVgws = "propagatingVgwSet"
            case routeTableId = "routeTableId"
            case vpcId = "vpcId"
            case tags = "tagSet"
            case associations = "associationSet"
        }
    }

    public enum RuleAction: String, CustomStringConvertible, Codable {
        case allow = "allow"
        case deny = "deny"
        public var description: String { return self.rawValue }
    }

    public struct VolumeStatusEvent: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotBefore", location: .body(locationName: "notBefore"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NotAfter", location: .body(locationName: "notAfter"), required: false, type: .timestamp), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .string), 
            AWSShapeMember(label: "EventId", location: .body(locationName: "eventId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The earliest start time of the event.
        public let notBefore: TimeStamp?
        /// The latest end time of the event.
        public let notAfter: TimeStamp?
        /// The type of this event.
        public let eventType: String?
        /// The ID of this event.
        public let eventId: String?
        /// A description of the event.
        public let description: String?

        public init(notBefore: TimeStamp? = nil, notAfter: TimeStamp? = nil, eventType: String? = nil, eventId: String? = nil, description: String? = nil) {
            self.notBefore = notBefore
            self.notAfter = notAfter
            self.eventType = eventType
            self.eventId = eventId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case notBefore = "notBefore"
            case notAfter = "notAfter"
            case eventType = "eventType"
            case eventId = "eventId"
            case description = "description"
        }
    }

    public struct ModifyVpcEndpointRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddRouteTableIds", location: .body(locationName: "AddRouteTableId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcEndpointId", required: true, type: .string), 
            AWSShapeMember(label: "PolicyDocument", required: false, type: .string), 
            AWSShapeMember(label: "ResetPolicy", required: false, type: .boolean), 
            AWSShapeMember(label: "RemoveRouteTableIds", location: .body(locationName: "RemoveRouteTableId"), required: false, type: .structure)
        ]
        /// One or more route tables IDs to associate with the endpoint.
        public let addRouteTableIds: ValueStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the endpoint.
        public let vpcEndpointId: String
        /// A policy document to attach to the endpoint. The policy must be in valid JSON format.
        public let policyDocument: String?
        /// Specify true to reset the policy document to the default policy. The default policy allows access to the service.
        public let resetPolicy: Bool?
        /// One or more route table IDs to disassociate from the endpoint.
        public let removeRouteTableIds: ValueStringList?

        public init(addRouteTableIds: ValueStringList? = nil, dryRun: Bool? = nil, vpcEndpointId: String, policyDocument: String? = nil, resetPolicy: Bool? = nil, removeRouteTableIds: ValueStringList? = nil) {
            self.addRouteTableIds = addRouteTableIds
            self.dryRun = dryRun
            self.vpcEndpointId = vpcEndpointId
            self.policyDocument = policyDocument
            self.resetPolicy = resetPolicy
            self.removeRouteTableIds = removeRouteTableIds
        }

        private enum CodingKeys: String, CodingKey {
            case addRouteTableIds = "AddRouteTableId"
            case dryRun = "DryRun"
            case vpcEndpointId = "VpcEndpointId"
            case policyDocument = "PolicyDocument"
            case resetPolicy = "ResetPolicy"
            case removeRouteTableIds = "RemoveRouteTableId"
        }
    }

    public struct VpcClassicLink: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ClassicLinkEnabled", location: .body(locationName: "classicLinkEnabled"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Any tags assigned to the VPC.
        public let tags: TagList?
        /// Indicates whether the VPC is enabled for ClassicLink.
        public let classicLinkEnabled: Bool?

        public init(vpcId: String? = nil, tags: TagList? = nil, classicLinkEnabled: Bool? = nil) {
            self.vpcId = vpcId
            self.tags = tags
            self.classicLinkEnabled = classicLinkEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case tags = "tagSet"
            case classicLinkEnabled = "classicLinkEnabled"
        }
    }

    public enum InstanceType: String, CustomStringConvertible, Codable {
        case t1Micro = "t1.micro"
        case t2Nano = "t2.nano"
        case t2Micro = "t2.micro"
        case t2Small = "t2.small"
        case t2Medium = "t2.medium"
        case t2Large = "t2.large"
        case t2Xlarge = "t2.xlarge"
        case t22Xlarge = "t2.2xlarge"
        case m1Small = "m1.small"
        case m1Medium = "m1.medium"
        case m1Large = "m1.large"
        case m1Xlarge = "m1.xlarge"
        case m3Medium = "m3.medium"
        case m3Large = "m3.large"
        case m3Xlarge = "m3.xlarge"
        case m32Xlarge = "m3.2xlarge"
        case m4Large = "m4.large"
        case m4Xlarge = "m4.xlarge"
        case m42Xlarge = "m4.2xlarge"
        case m44Xlarge = "m4.4xlarge"
        case m410Xlarge = "m4.10xlarge"
        case m416Xlarge = "m4.16xlarge"
        case m2Xlarge = "m2.xlarge"
        case m22Xlarge = "m2.2xlarge"
        case m24Xlarge = "m2.4xlarge"
        case cr18Xlarge = "cr1.8xlarge"
        case r3Large = "r3.large"
        case r3Xlarge = "r3.xlarge"
        case r32Xlarge = "r3.2xlarge"
        case r34Xlarge = "r3.4xlarge"
        case r38Xlarge = "r3.8xlarge"
        case r4Large = "r4.large"
        case r4Xlarge = "r4.xlarge"
        case r42Xlarge = "r4.2xlarge"
        case r44Xlarge = "r4.4xlarge"
        case r48Xlarge = "r4.8xlarge"
        case r416Xlarge = "r4.16xlarge"
        case x116Xlarge = "x1.16xlarge"
        case x132Xlarge = "x1.32xlarge"
        case i2Xlarge = "i2.xlarge"
        case i22Xlarge = "i2.2xlarge"
        case i24Xlarge = "i2.4xlarge"
        case i28Xlarge = "i2.8xlarge"
        case i3Large = "i3.large"
        case i3Xlarge = "i3.xlarge"
        case i32Xlarge = "i3.2xlarge"
        case i34Xlarge = "i3.4xlarge"
        case i38Xlarge = "i3.8xlarge"
        case i316Xlarge = "i3.16xlarge"
        case hi14Xlarge = "hi1.4xlarge"
        case hs18Xlarge = "hs1.8xlarge"
        case c1Medium = "c1.medium"
        case c1Xlarge = "c1.xlarge"
        case c3Large = "c3.large"
        case c3Xlarge = "c3.xlarge"
        case c32Xlarge = "c3.2xlarge"
        case c34Xlarge = "c3.4xlarge"
        case c38Xlarge = "c3.8xlarge"
        case c4Large = "c4.large"
        case c4Xlarge = "c4.xlarge"
        case c42Xlarge = "c4.2xlarge"
        case c44Xlarge = "c4.4xlarge"
        case c48Xlarge = "c4.8xlarge"
        case cc14Xlarge = "cc1.4xlarge"
        case cc28Xlarge = "cc2.8xlarge"
        case g22Xlarge = "g2.2xlarge"
        case g28Xlarge = "g2.8xlarge"
        case cg14Xlarge = "cg1.4xlarge"
        case p2Xlarge = "p2.xlarge"
        case p28Xlarge = "p2.8xlarge"
        case p216Xlarge = "p2.16xlarge"
        case d2Xlarge = "d2.xlarge"
        case d22Xlarge = "d2.2xlarge"
        case d24Xlarge = "d2.4xlarge"
        case d28Xlarge = "d2.8xlarge"
        case f12Xlarge = "f1.2xlarge"
        case f116Xlarge = "f1.16xlarge"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateIamInstanceProfileRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: true, type: .string)
        ]
        /// The ID of the IAM instance profile association.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
        }
    }

    public struct DescribeHostReservationOfferingsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingSet", location: .body(locationName: "offeringSet"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the offerings.
        public let offeringSet: [HostOffering]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(offeringSet: [HostOffering]? = nil, nextToken: String? = nil) {
            self.offeringSet = offeringSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case offeringSet = "offeringSet"
            case nextToken = "nextToken"
        }
    }

    public struct NatGatewayList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NatGateway]?

        public init(item: [NatGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VpcCidrBlockState: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// The state of the CIDR block.
        public let state: VpcCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: VpcCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct NetworkAclAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkAclAssociationId", location: .body(locationName: "networkAclAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: false, type: .string)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the association between a network ACL and a subnet.
        public let networkAclAssociationId: String?
        /// The ID of the network ACL.
        public let networkAclId: String?

        public init(subnetId: String? = nil, networkAclAssociationId: String? = nil, networkAclId: String? = nil) {
            self.subnetId = subnetId
            self.networkAclAssociationId = networkAclAssociationId
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case networkAclAssociationId = "networkAclAssociationId"
            case networkAclId = "networkAclId"
        }
    }

    public enum OfferingClassType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case convertible = "convertible"
        public var description: String { return self.rawValue }
    }

    public struct DeleteNatGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGatewayId", required: true, type: .string)
        ]
        /// The ID of the NAT gateway.
        public let natGatewayId: String

        public init(natGatewayId: String) {
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayId = "NatGatewayId"
        }
    }

    public struct PurchaseScheduledInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceSet", location: .body(locationName: "scheduledInstanceSet"), required: false, type: .structure)
        ]
        /// Information about the Scheduled Instances.
        public let scheduledInstanceSet: PurchasedScheduledInstanceSet?

        public init(scheduledInstanceSet: PurchasedScheduledInstanceSet? = nil) {
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceSet = "scheduledInstanceSet"
        }
    }

    public struct DescribeVolumeStatusResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeStatuses", location: .body(locationName: "volumeStatusSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of volumes.
        public let volumeStatuses: VolumeStatusList?

        public init(nextToken: String? = nil, volumeStatuses: VolumeStatusList? = nil) {
            self.nextToken = nextToken
            self.volumeStatuses = volumeStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case volumeStatuses = "volumeStatusSet"
        }
    }

    public struct AvailableCapacity: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailableInstanceCapacity", location: .body(locationName: "availableInstanceCapacity"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailableVCpus", location: .body(locationName: "availableVCpus"), required: false, type: .integer)
        ]
        /// The total number of instances that the Dedicated Host supports.
        public let availableInstanceCapacity: AvailableInstanceCapacityList?
        /// The number of vCPUs available on the Dedicated Host.
        public let availableVCpus: Int32?

        public init(availableInstanceCapacity: AvailableInstanceCapacityList? = nil, availableVCpus: Int32? = nil) {
            self.availableInstanceCapacity = availableInstanceCapacity
            self.availableVCpus = availableVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCapacity = "availableInstanceCapacity"
            case availableVCpus = "availableVCpus"
        }
    }

    public struct SpotPrice: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum)
        ]
        /// The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp?
        /// The instance type. Note that T2 and HS1 instance types are not supported.
        public let instanceType: InstanceType?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The maximum price (bid) that you are willing to pay for a Spot instance.
        public let spotPrice: String?
        /// A general description of the AMI.
        public let productDescription: RIProductDescription?

        public init(timestamp: TimeStamp? = nil, instanceType: InstanceType? = nil, availabilityZone: String? = nil, spotPrice: String? = nil, productDescription: RIProductDescription? = nil) {
            self.timestamp = timestamp
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.spotPrice = spotPrice
            self.productDescription = productDescription
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "timestamp"
            case instanceType = "instanceType"
            case availabilityZone = "availabilityZone"
            case spotPrice = "spotPrice"
            case productDescription = "productDescription"
        }
    }

    public struct SnapshotList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Snapshot]?

        public init(item: [Snapshot]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReservedInstancesConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum)
        ]
        /// The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.
        public let platform: String?
        /// The number of modified Reserved Instances.
        public let instanceCount: Int32?
        /// The instance type for the modified Reserved Instances.
        public let instanceType: InstanceType?
        /// The Availability Zone for the modified Reserved Instances.
        public let availabilityZone: String?
        /// Whether the Reserved Instance is applied to instances in a region or instances in a specific Availability Zone.
        public let scope: Scope?

        public init(platform: String? = nil, instanceCount: Int32? = nil, instanceType: InstanceType? = nil, availabilityZone: String? = nil, scope: Scope? = nil) {
            self.platform = platform
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case instanceCount = "instanceCount"
            case instanceType = "instanceType"
            case availabilityZone = "availabilityZone"
            case scope = "scope"
        }
    }

    public struct CreatePlacementGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Strategy", location: .body(locationName: "strategy"), required: true, type: .enum), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The placement strategy.
        public let strategy: PlacementStrategy
        /// A name for the placement group. Constraints: Up to 255 ASCII characters
        public let groupName: String

        public init(dryRun: Bool? = nil, strategy: PlacementStrategy, groupName: String) {
            self.dryRun = dryRun
            self.strategy = strategy
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case strategy = "strategy"
            case groupName = "groupName"
        }
    }

    public struct DescribeSecurityGroupReferencesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more security group IDs in your account.
        public let groupId: GroupIds
        /// Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(groupId: GroupIds, dryRun: Bool? = nil) {
            self.groupId = groupId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case dryRun = "DryRun"
        }
    }

    public struct AvailableInstanceCapacityList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceCapacity]?

        public init(item: [InstanceCapacity]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PurchasedScheduledInstanceSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ScheduledInstance]?

        public init(item: [ScheduledInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum CancelBatchErrorCode: String, CustomStringConvertible, Codable {
        case fleetrequestiddoesnotexist = "fleetRequestIdDoesNotExist"
        case fleetrequestidmalformed = "fleetRequestIdMalformed"
        case fleetrequestnotincancellablestate = "fleetRequestNotInCancellableState"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public struct DescribeVolumesModificationsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more volume IDs for which in-progress modifications will be described.
        public let volumeIds: VolumeIdStringList?
        /// One or more filters. Supported filters: volume-id, modification-state, target-size, target-iops, target-volume-type, original-size, original-iops, original-volume-type, start-time. 
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The nextToken value returned by a previous paginated request.
        public let nextToken: String?
        /// The maximum number of results (up to a limit of 500) to be returned in a paginated request.
        public let maxResults: Int32?

        public init(volumeIds: VolumeIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.volumeIds = volumeIds
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case volumeIds = "VolumeId"
            case filters = "Filter"
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ImageAttribute: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchPermissions", location: .body(locationName: "launchPermission"), required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure)
        ]
        /// One or more block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// One or more product codes.
        public let productCodes: ProductCodeList?
        /// One or more launch permissions.
        public let launchPermissions: LaunchPermissionList?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// The ID of the AMI.
        public let imageId: String?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// A description for the AMI.
        public let description: AttributeValue?

        public init(blockDeviceMappings: BlockDeviceMappingList? = nil, productCodes: ProductCodeList? = nil, launchPermissions: LaunchPermissionList? = nil, sriovNetSupport: AttributeValue? = nil, kernelId: AttributeValue? = nil, imageId: String? = nil, ramdiskId: AttributeValue? = nil, description: AttributeValue? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.productCodes = productCodes
            self.launchPermissions = launchPermissions
            self.sriovNetSupport = sriovNetSupport
            self.kernelId = kernelId
            self.imageId = imageId
            self.ramdiskId = ramdiskId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case productCodes = "productCodes"
            case launchPermissions = "launchPermission"
            case sriovNetSupport = "sriovNetSupport"
            case kernelId = "kernel"
            case imageId = "imageId"
            case ramdiskId = "ramdisk"
            case description = "description"
        }
    }

    public struct CreateInstanceExportTaskRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetEnvironment", location: .body(locationName: "targetEnvironment"), required: false, type: .enum), 
            AWSShapeMember(label: "ExportToS3Task", location: .body(locationName: "exportToS3"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?
        /// The format and location for an instance export task.
        public let exportToS3Task: ExportToS3TaskSpecification?
        /// The ID of the instance.
        public let instanceId: String
        /// A description for the conversion task or the resource being exported. The maximum length is 255 bytes.
        public let description: String?

        public init(targetEnvironment: ExportEnvironment? = nil, exportToS3Task: ExportToS3TaskSpecification? = nil, instanceId: String, description: String? = nil) {
            self.targetEnvironment = targetEnvironment
            self.exportToS3Task = exportToS3Task
            self.instanceId = instanceId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case targetEnvironment = "targetEnvironment"
            case exportToS3Task = "exportToS3"
            case instanceId = "instanceId"
            case description = "description"
        }
    }

    public struct CreateFlowLogsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrafficType", required: true, type: .enum), 
            AWSShapeMember(label: "ResourceIds", location: .body(locationName: "ResourceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DeliverLogsPermissionArn", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceType", required: true, type: .enum), 
            AWSShapeMember(label: "LogGroupName", required: true, type: .string)
        ]
        /// The type of traffic to log.
        public let trafficType: TrafficType
        /// One or more subnet, network interface, or VPC IDs. Constraints: Maximum of 1000 resources
        public let resourceIds: ValueStringList
        /// The ARN for the IAM role that's used to post flow logs to a CloudWatch Logs log group.
        public let deliverLogsPermissionArn: String
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The type of resource on which to create the flow log.
        public let resourceType: FlowLogsResourceType
        /// The name of the CloudWatch log group.
        public let logGroupName: String

        public init(trafficType: TrafficType, resourceIds: ValueStringList, deliverLogsPermissionArn: String, clientToken: String? = nil, resourceType: FlowLogsResourceType, logGroupName: String) {
            self.trafficType = trafficType
            self.resourceIds = resourceIds
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.clientToken = clientToken
            self.resourceType = resourceType
            self.logGroupName = logGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case trafficType = "TrafficType"
            case resourceIds = "ResourceId"
            case deliverLogsPermissionArn = "DeliverLogsPermissionArn"
            case clientToken = "ClientToken"
            case resourceType = "ResourceType"
            case logGroupName = "LogGroupName"
        }
    }

    public struct ScheduledInstancesIpv6AddressList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .list)
        ]
        public let ipv6Address: [ScheduledInstancesIpv6Address]?

        public init(ipv6Address: [ScheduledInstancesIpv6Address]? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct AccountAttributeValueList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AccountAttributeValue]?

        public init(item: [AccountAttributeValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TargetConfigurationRequestSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetConfigurationRequest", required: false, type: .list)
        ]
        public let targetConfigurationRequest: [TargetConfigurationRequest]?

        public init(targetConfigurationRequest: [TargetConfigurationRequest]? = nil) {
            self.targetConfigurationRequest = targetConfigurationRequest
        }

        private enum CodingKeys: String, CodingKey {
            case targetConfigurationRequest = "TargetConfigurationRequest"
        }
    }

    public struct ImportImageTask: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseType", location: .body(locationName: "licenseType"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .string), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDetails", location: .body(locationName: "snapshotDetailSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The description string for the import image task.
        public let platform: String?
        /// A brief status for the import image task.
        public let status: String?
        /// The percentage of progress of the import image task.
        public let progress: String?
        /// The target hypervisor for the import task. Valid values: xen 
        public let hypervisor: String?
        /// The architecture of the virtual machine. Valid values: i386 | x86_64 
        public let architecture: String?
        /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
        public let imageId: String?
        /// The ID of the import image task.
        public let importTaskId: String?
        /// A descriptive status message for the import image task.
        public let statusMessage: String?
        /// Information about the snapshots.
        public let snapshotDetails: SnapshotDetailList?
        /// A description of the import task.
        public let description: String?

        public init(licenseType: String? = nil, platform: String? = nil, status: String? = nil, progress: String? = nil, hypervisor: String? = nil, architecture: String? = nil, imageId: String? = nil, importTaskId: String? = nil, statusMessage: String? = nil, snapshotDetails: SnapshotDetailList? = nil, description: String? = nil) {
            self.licenseType = licenseType
            self.platform = platform
            self.status = status
            self.progress = progress
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.statusMessage = statusMessage
            self.snapshotDetails = snapshotDetails
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case licenseType = "licenseType"
            case platform = "platform"
            case status = "status"
            case progress = "progress"
            case hypervisor = "hypervisor"
            case architecture = "architecture"
            case imageId = "imageId"
            case importTaskId = "importTaskId"
            case statusMessage = "statusMessage"
            case snapshotDetails = "snapshotDetailSet"
            case description = "description"
        }
    }

    public struct DescribeVolumesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Volumes", location: .body(locationName: "volumeSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the volumes.
        public let volumes: VolumeList?
        /// The NextToken value to include in a future DescribeVolumes request. When the results of a DescribeVolumes request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(volumes: VolumeList? = nil, nextToken: String? = nil) {
            self.volumes = volumes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case volumes = "volumeSet"
            case nextToken = "nextToken"
        }
    }

    public struct ResponseHostIdSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyInstancePlacementRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .enum), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum)
        ]
        /// The new affinity setting for the instance.
        public let affinity: Affinity?
        /// The ID of the Dedicated Host that the instance will have affinity with.
        public let hostId: String?
        /// The ID of the instance that you are modifying.
        public let instanceId: String
        /// The tenancy of the instance that you are modifying.
        public let tenancy: HostTenancy?

        public init(affinity: Affinity? = nil, hostId: String? = nil, instanceId: String, tenancy: HostTenancy? = nil) {
            self.affinity = affinity
            self.hostId = hostId
            self.instanceId = instanceId
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case hostId = "hostId"
            case instanceId = "instanceId"
            case tenancy = "tenancy"
        }
    }

    public struct ScheduledInstancesLaunchSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "UserData", required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "NetworkInterface"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string)
        ]
        /// One or more block device mapping entries.
        public let blockDeviceMappings: ScheduledInstancesBlockDeviceMappingSet?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The base64-encoded MIME user data.
        public let userData: String?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The IDs of one or more security groups.
        public let securityGroupIds: ScheduledInstancesSecurityGroupIdSet?
        /// Enable or disable monitoring for the instances.
        public let monitoring: ScheduledInstancesMonitoring?
        /// The instance type.
        public let instanceType: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: ScheduledInstancesIamInstanceProfile?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String
        /// One or more network interfaces.
        public let networkInterfaces: ScheduledInstancesNetworkInterfaceSet?
        /// The placement information.
        public let placement: ScheduledInstancesPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?

        public init(blockDeviceMappings: ScheduledInstancesBlockDeviceMappingSet? = nil, subnetId: String? = nil, userData: String? = nil, ebsOptimized: Bool? = nil, kernelId: String? = nil, securityGroupIds: ScheduledInstancesSecurityGroupIdSet? = nil, monitoring: ScheduledInstancesMonitoring? = nil, instanceType: String? = nil, keyName: String? = nil, iamInstanceProfile: ScheduledInstancesIamInstanceProfile? = nil, imageId: String, networkInterfaces: ScheduledInstancesNetworkInterfaceSet? = nil, placement: ScheduledInstancesPlacement? = nil, ramdiskId: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.subnetId = subnetId
            self.userData = userData
            self.ebsOptimized = ebsOptimized
            self.kernelId = kernelId
            self.securityGroupIds = securityGroupIds
            self.monitoring = monitoring
            self.instanceType = instanceType
            self.keyName = keyName
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMapping"
            case subnetId = "SubnetId"
            case userData = "UserData"
            case ebsOptimized = "EbsOptimized"
            case kernelId = "KernelId"
            case securityGroupIds = "SecurityGroupId"
            case monitoring = "Monitoring"
            case instanceType = "InstanceType"
            case keyName = "KeyName"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case networkInterfaces = "NetworkInterface"
            case placement = "Placement"
            case ramdiskId = "RamdiskId"
        }
    }

    public struct DisableVpcClassicLinkRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public struct MoveAddressToVpcResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string)
        ]
        /// The status of the move of the IP address.
        public let status: Status?
        /// The allocation ID for the Elastic IP address.
        public let allocationId: String?

        public init(status: Status? = nil, allocationId: String? = nil) {
            self.status = status
            self.allocationId = allocationId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case allocationId = "allocationId"
        }
    }

    public struct DeleteVpnConnectionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPN connection.
        public let vpnConnectionId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpnConnectionId: String, dryRun: Bool? = nil) {
            self.vpnConnectionId = vpnConnectionId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionId = "VpnConnectionId"
            case dryRun = "dryRun"
        }
    }

    public struct CreateVolumePermission: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum)
        ]
        /// The specific AWS account ID that is to be added or removed from a volume's list of create volume permissions.
        public let userId: String?
        /// The specific group that is to be added or removed from a volume's list of create volume permissions.
        public let group: PermissionGroup?

        public init(userId: String? = nil, group: PermissionGroup? = nil) {
            self.userId = userId
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "userId"
            case group = "group"
        }
    }

    public struct ReservedInstancesModificationIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesModificationId", required: false, type: .list)
        ]
        public let reservedInstancesModificationId: [String]?

        public init(reservedInstancesModificationId: [String]? = nil) {
            self.reservedInstancesModificationId = reservedInstancesModificationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationId = "ReservedInstancesModificationId"
        }
    }

    public struct BlockDeviceMappingList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [BlockDeviceMapping]?

        public init(item: [BlockDeviceMapping]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CustomerGateway: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", location: .body(locationName: "customerGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "BgpAsn", location: .body(locationName: "bgpAsn"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", location: .body(locationName: "ipAddress"), required: false, type: .string)
        ]
        /// The ID of the customer gateway.
        public let customerGatewayId: String?
        /// The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
        public let bgpAsn: String?
        /// The type of VPN connection the customer gateway supports (ipsec.1).
        public let `type`: String?
        /// Any tags assigned to the customer gateway.
        public let tags: TagList?
        /// The current state of the customer gateway (pending | available | deleting | deleted).
        public let state: String?
        /// The Internet-routable IP address of the customer gateway's outside interface.
        public let ipAddress: String?

        public init(customerGatewayId: String? = nil, bgpAsn: String? = nil, type: String? = nil, tags: TagList? = nil, state: String? = nil, ipAddress: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.bgpAsn = bgpAsn
            self.`type` = `type`
            self.tags = tags
            self.state = state
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "customerGatewayId"
            case bgpAsn = "bgpAsn"
            case `type` = "type"
            case tags = "tagSet"
            case state = "state"
            case ipAddress = "ipAddress"
        }
    }

    public struct DescribeAccountAttributesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNames", location: .body(locationName: "attributeName"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more account attribute names.
        public let attributeNames: AccountAttributeNameStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(attributeNames: AccountAttributeNameStringList? = nil, dryRun: Bool? = nil) {
            self.attributeNames = attributeNames
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "attributeName"
            case dryRun = "dryRun"
        }
    }

    public struct HistoryRecords: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [HistoryRecord]?

        public init(item: [HistoryRecord]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReservedInstancesModificationResultList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesModificationResult]?

        public init(item: [ReservedInstancesModificationResult]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VpnGatewayIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGatewayId", required: false, type: .list)
        ]
        public let vpnGatewayId: [String]?

        public init(vpnGatewayId: [String]? = nil) {
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct CreateVpnGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The type of VPN connection this virtual private gateway supports.
        public let `type`: GatewayType
        /// The Availability Zone for the virtual private gateway.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(type: GatewayType, availabilityZone: String? = nil, dryRun: Bool? = nil) {
            self.`type` = `type`
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case availabilityZone = "AvailabilityZone"
            case dryRun = "dryRun"
        }
    }

    public struct DeleteSpotDatafeedSubscriptionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct Route: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Origin", location: .body(locationName: "origin"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationPrefixListId", location: .body(locationName: "destinationPrefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceOwnerId", location: .body(locationName: "instanceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string)
        ]
        /// The ID of the egress-only Internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of a NAT gateway.
        public let natGatewayId: String?
        /// Describes how the route was created.    CreateRouteTable - The route was automatically created when the route table was created.    CreateRoute - The route was manually added to the route table.    EnableVgwRoutePropagation - The route was propagated by route propagation.  
        public let origin: RouteOrigin?
        /// The state of the route. The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
        public let state: RouteState?
        /// The IPv6 CIDR block used for the destination match.
        public let destinationIpv6CidrBlock: String?
        /// The prefix of the AWS service.
        public let destinationPrefixListId: String?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The AWS account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// The ID of a gateway attached to your VPC.
        public let gatewayId: String?
        /// The IPv4 CIDR block used for the destination match.
        public let destinationCidrBlock: String?

        public init(egressOnlyInternetGatewayId: String? = nil, networkInterfaceId: String? = nil, natGatewayId: String? = nil, origin: RouteOrigin? = nil, state: RouteState? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, vpcPeeringConnectionId: String? = nil, instanceId: String? = nil, instanceOwnerId: String? = nil, gatewayId: String? = nil, destinationCidrBlock: String? = nil) {
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.natGatewayId = natGatewayId
            self.origin = origin
            self.state = state
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.gatewayId = gatewayId
            self.destinationCidrBlock = destinationCidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case networkInterfaceId = "networkInterfaceId"
            case natGatewayId = "natGatewayId"
            case origin = "origin"
            case state = "state"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
            case destinationPrefixListId = "destinationPrefixListId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
            case instanceId = "instanceId"
            case instanceOwnerId = "instanceOwnerId"
            case gatewayId = "gatewayId"
            case destinationCidrBlock = "destinationCidrBlock"
        }
    }

    public struct CancelSpotFleetRequestsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulFleetRequests", location: .body(locationName: "successfulFleetRequestSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UnsuccessfulFleetRequests", location: .body(locationName: "unsuccessfulFleetRequestSet"), required: false, type: .structure)
        ]
        /// Information about the Spot fleet requests that are successfully canceled.
        public let successfulFleetRequests: CancelSpotFleetRequestsSuccessSet?
        /// Information about the Spot fleet requests that are not successfully canceled.
        public let unsuccessfulFleetRequests: CancelSpotFleetRequestsErrorSet?

        public init(successfulFleetRequests: CancelSpotFleetRequestsSuccessSet? = nil, unsuccessfulFleetRequests: CancelSpotFleetRequestsErrorSet? = nil) {
            self.successfulFleetRequests = successfulFleetRequests
            self.unsuccessfulFleetRequests = unsuccessfulFleetRequests
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetRequests = "successfulFleetRequestSet"
            case unsuccessfulFleetRequests = "unsuccessfulFleetRequestSet"
        }
    }

    public struct VpnGatewayList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpnGateway]?

        public init(item: [VpnGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteSecurityGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// [EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.
        public let groupName: String?
        /// The ID of the security group. Required for a nondefault VPC.
        public let groupId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(groupName: String? = nil, groupId: String? = nil, dryRun: Bool? = nil) {
            self.groupName = groupName
            self.groupId = groupId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case groupId = "GroupId"
            case dryRun = "dryRun"
        }
    }

    public struct CreateVpcResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpc", location: .body(locationName: "vpc"), required: false, type: .structure)
        ]
        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc = "vpc"
        }
    }

    public struct DescribeInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// One or more filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2010-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name for the EBS volume (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    client-token - The idempotency token you provided when you launched the instance.    dns-name - The public DNS name of the instance.    group-id - The ID of the security group for the instance. EC2-Classic only.    group-name - The name of the security group for the instance. EC2-Classic only.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen).    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance or a Scheduled Instance (spot | scheduled).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is an opaque internal value and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched.    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by AWS.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means checking is enabled, and false means checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    owner-id - The AWS account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    platform - The platform. Use windows if you have Windows instances; otherwise, leave blank.    private-dns-name - The private IPv4 DNS name of the instance.    private-ip-address - The private IPv4 address of the instance.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you'll get one reservation ID. If you launch ten instances using the same launch request, you'll also get one reservation ID.    root-device-name - The name of the root device for the instance (for example, /dev/sda1 or /dev/xvda).    root-device-type - The type of root device that the instance uses (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    tenancy - The tenancy of an instance (dedicated | default | host).    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// One or more instance IDs. Default: Describes all your instances.
        public let instanceIds: InstanceIdStringList?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter or tag filters in the same call.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, instanceIds: InstanceIdStringList? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case dryRun = "dryRun"
            case nextToken = "nextToken"
            case instanceIds = "InstanceId"
            case maxResults = "maxResults"
        }
    }

    public struct UserGroupStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserGroup", required: false, type: .list)
        ]
        public let userGroup: [String]?

        public init(userGroup: [String]? = nil) {
            self.userGroup = userGroup
        }

        private enum CodingKeys: String, CodingKey {
            case userGroup = "UserGroup"
        }
    }

    public struct DescribeScheduledInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ScheduledInstanceSet", location: .body(locationName: "scheduledInstanceSet"), required: false, type: .structure)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Scheduled Instances.
        public let scheduledInstanceSet: ScheduledInstanceSet?

        public init(nextToken: String? = nil, scheduledInstanceSet: ScheduledInstanceSet? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduledInstanceSet = "scheduledInstanceSet"
        }
    }

    public enum FpgaImageStateCode: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case failed = "failed"
        case available = "available"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public struct DeleteNetworkAclEntryRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the network ACL.
        public let networkAclId: String
        /// The rule number of the entry to delete.
        public let ruleNumber: Int32
        /// Indicates whether the rule is an egress rule.
        public let egress: Bool
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(networkAclId: String, ruleNumber: Int32, egress: Bool, dryRun: Bool? = nil) {
            self.networkAclId = networkAclId
            self.ruleNumber = ruleNumber
            self.egress = egress
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case networkAclId = "networkAclId"
            case ruleNumber = "ruleNumber"
            case egress = "egress"
            case dryRun = "dryRun"
        }
    }

    public struct NewDhcpConfigurationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NewDhcpConfiguration]?

        public init(item: [NewDhcpConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ResetSnapshotAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// The ID of the snapshot.
        public let snapshotId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.
        public let attribute: SnapshotAttributeName

        public init(snapshotId: String, dryRun: Bool? = nil, attribute: SnapshotAttributeName) {
            self.snapshotId = snapshotId
            self.dryRun = dryRun
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case dryRun = "dryRun"
            case attribute = "Attribute"
        }
    }

    public struct VpnGateway: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcAttachments", location: .body(locationName: "attachments"), required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "VpnGatewayId", location: .body(locationName: "vpnGatewayId"), required: false, type: .string)
        ]
        /// Any VPCs attached to the virtual private gateway.
        public let vpcAttachments: VpcAttachmentList?
        /// The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
        public let availabilityZone: String?
        /// The type of VPN connection the virtual private gateway supports.
        public let `type`: GatewayType?
        /// Any tags assigned to the virtual private gateway.
        public let tags: TagList?
        /// The current state of the virtual private gateway.
        public let state: VpnState?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?

        public init(vpcAttachments: VpcAttachmentList? = nil, availabilityZone: String? = nil, type: GatewayType? = nil, tags: TagList? = nil, state: VpnState? = nil, vpnGatewayId: String? = nil) {
            self.vpcAttachments = vpcAttachments
            self.availabilityZone = availabilityZone
            self.`type` = `type`
            self.tags = tags
            self.state = state
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcAttachments = "attachments"
            case availabilityZone = "availabilityZone"
            case `type` = "type"
            case tags = "tagSet"
            case state = "state"
            case vpnGatewayId = "vpnGatewayId"
        }
    }

    public struct CancelSpotFleetRequestsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "TerminateInstances", location: .body(locationName: "terminateInstances"), required: true, type: .boolean), 
            AWSShapeMember(label: "SpotFleetRequestIds", location: .body(locationName: "spotFleetRequestId"), required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to terminate instances for a Spot fleet request if it is canceled successfully.
        public let terminateInstances: Bool
        /// The IDs of the Spot fleet requests.
        public let spotFleetRequestIds: ValueStringList

        public init(dryRun: Bool? = nil, terminateInstances: Bool, spotFleetRequestIds: ValueStringList) {
            self.dryRun = dryRun
            self.terminateInstances = terminateInstances
            self.spotFleetRequestIds = spotFleetRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case terminateInstances = "terminateInstances"
            case spotFleetRequestIds = "spotFleetRequestId"
        }
    }

    public struct InstanceIpv6AddressList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceIpv6Address]?

        public init(item: [InstanceIpv6Address]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ScheduledInstanceSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ScheduledInstance]?

        public init(item: [ScheduledInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVolumeStatusRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more volume IDs. Default: Describes all your volumes.
        public let volumeIds: VolumeIdStringList?
        /// One or more filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The NextToken value to include in a future DescribeVolumeStatus request. When the results of the request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The maximum number of volume results returned by DescribeVolumeStatus in paginated output. When this parameter is used, the request only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeVolumeStatus returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int32?

        public init(volumeIds: VolumeIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.volumeIds = volumeIds
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case volumeIds = "VolumeId"
            case filters = "Filter"
            case dryRun = "dryRun"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct InstanceStatusList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStatus]?

        public init(item: [InstanceStatus]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSecurityGroupsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupIds", location: .body(locationName: "GroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "GroupName"), required: false, type: .structure)
        ]
        /// One or more security group IDs. Required for security groups in a nondefault VPC. Default: Describes all your security groups.
        public let groupIds: GroupIdStringList?
        /// One or more filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.prefix-list-id - The ID (prefix) of the AWS service to which the security group allows access.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR range that has been granted permission in a security group rule.    ip-permission.from-port - The start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been granted permission.    ip-permission.group-name - The name of a security group that has been granted permission.    ip-permission.ipv6-cidr - An IPv6 CIDR range that has been granted permission in a security group rule.    ip-permission.protocol - The IP protocol for the permission (tcp | udp | icmp or a protocol number).    ip-permission.to-port - The end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an AWS account that has been granted permission.    owner-id - The AWS account ID of the owner of the security group.    tag-key - The key of a tag assigned to the security group.    tag-value - The value of a tag assigned to the security group.    vpc-id - The ID of the VPC specified when the security group was created.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-Classic and default VPC only] One or more security group names. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the group-name filter to describe security groups by name. Default: Describes all your security groups.
        public let groupNames: GroupNameStringList?

        public init(groupIds: GroupIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, groupNames: GroupNameStringList? = nil) {
            self.groupIds = groupIds
            self.filters = filters
            self.dryRun = dryRun
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case groupIds = "GroupId"
            case filters = "Filter"
            case dryRun = "dryRun"
            case groupNames = "GroupName"
        }
    }

    public struct Snapshot: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StateMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DataEncryptionKeyId", location: .body(locationName: "dataEncryptionKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string)
        ]
        /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by the DescribeSnapshots API operation.
        public let stateMessage: String?
        /// The snapshot state.
        public let state: SnapshotState?
        /// The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.
        public let volumeId: String?
        /// Any tags assigned to the snapshot.
        public let tags: TagList?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The AWS account ID of the EBS snapshot owner.
        public let ownerId: String?
        /// The description for the snapshot.
        public let description: String?
        /// The time stamp when the snapshot was initiated.
        public let startTime: TimeStamp?
        /// The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by the DescribeSnapshots API operation.
        public let dataEncryptionKeyId: String?
        /// The progress of the snapshot, as a percentage.
        public let progress: String?
        /// The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
        public let snapshotId: String?
        /// The size of the volume, in GiB.
        public let volumeSize: Int32?
        ///  Value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console. 
        public let ownerAlias: String?
        /// The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.
        public let kmsKeyId: String?

        public init(stateMessage: String? = nil, state: SnapshotState? = nil, volumeId: String? = nil, tags: TagList? = nil, encrypted: Bool? = nil, ownerId: String? = nil, description: String? = nil, startTime: TimeStamp? = nil, dataEncryptionKeyId: String? = nil, progress: String? = nil, snapshotId: String? = nil, volumeSize: Int32? = nil, ownerAlias: String? = nil, kmsKeyId: String? = nil) {
            self.stateMessage = stateMessage
            self.state = state
            self.volumeId = volumeId
            self.tags = tags
            self.encrypted = encrypted
            self.ownerId = ownerId
            self.description = description
            self.startTime = startTime
            self.dataEncryptionKeyId = dataEncryptionKeyId
            self.progress = progress
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.ownerAlias = ownerAlias
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case stateMessage = "statusMessage"
            case state = "status"
            case volumeId = "volumeId"
            case tags = "tagSet"
            case encrypted = "encrypted"
            case ownerId = "ownerId"
            case description = "description"
            case startTime = "startTime"
            case dataEncryptionKeyId = "dataEncryptionKeyId"
            case progress = "progress"
            case snapshotId = "snapshotId"
            case volumeSize = "volumeSize"
            case ownerAlias = "ownerAlias"
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct DescribeVpcsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcIds", location: .body(locationName: "VpcId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more VPC IDs. Default: Describes all your VPCs.
        public let vpcIds: VpcIdStringList?
        /// One or more filters.    cidr - The IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    isDefault - Indicates whether the VPC is the default VPC.    state - The state of the VPC (pending | available).    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    vpc-id - The ID of the VPC.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcIds: VpcIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.vpcIds = vpcIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcIds = "VpcId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct PurchaseRequestSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PurchaseRequest", required: false, type: .list)
        ]
        public let purchaseRequest: [PurchaseRequest]?

        public init(purchaseRequest: [PurchaseRequest]? = nil) {
            self.purchaseRequest = purchaseRequest
        }

        private enum CodingKeys: String, CodingKey {
            case purchaseRequest = "PurchaseRequest"
        }
    }

    public struct DescribeIdFormatResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .structure)
        ]
        /// Information about the ID format for the resource.
        public let statuses: IdFormatList?

        public init(statuses: IdFormatList? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct RegisterImageRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BillingProducts", location: .body(locationName: "BillingProduct"), required: false, type: .structure), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "ImageLocation", required: false, type: .string), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .string), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string)
        ]
        /// The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.
        public let billingProducts: BillingProductList?
        /// One or more block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingRequestList?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let sriovNetSupport: String?
        /// The name of the root device (for example, /dev/sda1, or /dev/xvda).
        public let rootDeviceName: String?
        /// The full path to your AMI manifest in Amazon S3 storage.
        public let imageLocation: String?
        /// The ID of the kernel.
        public let kernelId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A description for your AMI.
        public let description: String?
        /// A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String
        /// Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let enaSupport: Bool?
        /// The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
        public let architecture: ArchitectureValues?
        /// The type of virtualization. Default: paravirtual 
        public let virtualizationType: String?
        /// The ID of the RAM disk.
        public let ramdiskId: String?

        public init(billingProducts: BillingProductList? = nil, blockDeviceMappings: BlockDeviceMappingRequestList? = nil, sriovNetSupport: String? = nil, rootDeviceName: String? = nil, imageLocation: String? = nil, kernelId: String? = nil, dryRun: Bool? = nil, description: String? = nil, name: String, enaSupport: Bool? = nil, architecture: ArchitectureValues? = nil, virtualizationType: String? = nil, ramdiskId: String? = nil) {
            self.billingProducts = billingProducts
            self.blockDeviceMappings = blockDeviceMappings
            self.sriovNetSupport = sriovNetSupport
            self.rootDeviceName = rootDeviceName
            self.imageLocation = imageLocation
            self.kernelId = kernelId
            self.dryRun = dryRun
            self.description = description
            self.name = name
            self.enaSupport = enaSupport
            self.architecture = architecture
            self.virtualizationType = virtualizationType
            self.ramdiskId = ramdiskId
        }

        private enum CodingKeys: String, CodingKey {
            case billingProducts = "BillingProduct"
            case blockDeviceMappings = "BlockDeviceMapping"
            case sriovNetSupport = "sriovNetSupport"
            case rootDeviceName = "rootDeviceName"
            case imageLocation = "ImageLocation"
            case kernelId = "kernelId"
            case dryRun = "dryRun"
            case description = "description"
            case name = "name"
            case enaSupport = "enaSupport"
            case architecture = "architecture"
            case virtualizationType = "virtualizationType"
            case ramdiskId = "ramdiskId"
        }
    }

    public struct DescribeMovingAddressesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIps", location: .body(locationName: "publicIp"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// One or more Elastic IP addresses.
        public let publicIps: ValueStringList?
        /// One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
        public let maxResults: Int32?

        public init(publicIps: ValueStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.publicIps = publicIps
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case publicIps = "publicIp"
            case filters = "filter"
            case dryRun = "dryRun"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct BillingProductList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct MonitorInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceMonitorings", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// The monitoring information.
        public let instanceMonitorings: InstanceMonitoringList?

        public init(instanceMonitorings: InstanceMonitoringList? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct AssignIpv6AddressesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssignedIpv6Addresses", location: .body(locationName: "assignedIpv6Addresses"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]
        /// The IPv6 addresses assigned to the network interface.
        public let assignedIpv6Addresses: Ipv6AddressList?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(assignedIpv6Addresses: Ipv6AddressList? = nil, networkInterfaceId: String? = nil) {
            self.assignedIpv6Addresses = assignedIpv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case assignedIpv6Addresses = "assignedIpv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct AssignPrivateIpAddressesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowReassignment", location: .body(locationName: "allowReassignment"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddress"), required: false, type: .structure)
        ]
        /// Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
        public let allowReassignment: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
        public let secondaryPrivateIpAddressCount: Int32?
        /// One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.
        public let privateIpAddresses: PrivateIpAddressStringList?

        public init(allowReassignment: Bool? = nil, networkInterfaceId: String, secondaryPrivateIpAddressCount: Int32? = nil, privateIpAddresses: PrivateIpAddressStringList? = nil) {
            self.allowReassignment = allowReassignment
            self.networkInterfaceId = networkInterfaceId
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case allowReassignment = "allowReassignment"
            case networkInterfaceId = "networkInterfaceId"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case privateIpAddresses = "privateIpAddress"
        }
    }

    public enum ImageTypeValues: String, CustomStringConvertible, Codable {
        case machine = "machine"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        public var description: String { return self.rawValue }
    }

    public struct RunInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "KernelId", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "Ipv6Address"), required: false, type: .structure), 
            AWSShapeMember(label: "MinCount", required: true, type: .integer), 
            AWSShapeMember(label: "RamdiskId", required: false, type: .string), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "BlockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "UserData", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "SecurityGroup"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxCount", required: true, type: .integer), 
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "Placement", required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterface"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", required: true, type: .string)
        ]
        /// The tags to apply to the resources during launch. You can tag instances and volumes. The specified tags are applied to all instances or volumes that are created during launch.
        public let tagSpecifications: TagSpecificationList?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute to false after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false 
        public let disableApiTermination: Bool?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
        public let kernelId: String?
        /// [EC2-VPC] A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public let ipv6AddressCount: Int32?
        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide. Default: m1.small 
        public let instanceType: InstanceType?
        /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.
        public let privateIpAddress: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in. 
        public let keyName: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop 
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// [EC2-VPC] Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 General FAQ.
        public let minCount: Int32
        /// The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon Elastic Compute Cloud User Guide. 
        public let ramdiskId: String?
        /// The block device mapping.  Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action. 
        public let blockDeviceMappings: BlockDeviceMappingRequestList?
        /// [EC2-VPC] The ID of the subnet to launch the instance into.
        public let subnetId: String?
        /// The user data to make available to the instance. For more information, see Running Commands on Your Linux Instance at Launch (Linux) and Adding User Data (Windows). If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let userData: String?
        /// One or more security group IDs. You can create a security group using CreateSecurityGroup. Default: Amazon EC2 uses the default security group.
        public let securityGroupIds: SecurityGroupIdStringList?
        /// The monitoring for the instance.
        public let monitoring: RunInstancesMonitoringEnabled?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. Default: Amazon EC2 uses the default security group.
        public let securityGroups: SecurityGroupStringList?
        /// The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 FAQ.
        public let maxCount: Int32
        /// Reserved.
        public let additionalInfo: String?
        /// The placement for the instance.
        public let placement: Placement?
        /// One or more network interfaces.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// The ID of the AMI, which you can get by calling DescribeImages.
        public let imageId: String

        public init(tagSpecifications: TagSpecificationList? = nil, disableApiTermination: Bool? = nil, clientToken: String? = nil, ebsOptimized: Bool? = nil, kernelId: String? = nil, ipv6AddressCount: Int32? = nil, instanceType: InstanceType? = nil, privateIpAddress: String? = nil, keyName: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, minCount: Int32, ramdiskId: String? = nil, blockDeviceMappings: BlockDeviceMappingRequestList? = nil, subnetId: String? = nil, userData: String? = nil, securityGroupIds: SecurityGroupIdStringList? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, dryRun: Bool? = nil, securityGroups: SecurityGroupStringList? = nil, maxCount: Int32, additionalInfo: String? = nil, placement: Placement? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, imageId: String) {
            self.tagSpecifications = tagSpecifications
            self.disableApiTermination = disableApiTermination
            self.clientToken = clientToken
            self.ebsOptimized = ebsOptimized
            self.kernelId = kernelId
            self.ipv6AddressCount = ipv6AddressCount
            self.instanceType = instanceType
            self.privateIpAddress = privateIpAddress
            self.keyName = keyName
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.ipv6Addresses = ipv6Addresses
            self.minCount = minCount
            self.ramdiskId = ramdiskId
            self.blockDeviceMappings = blockDeviceMappings
            self.subnetId = subnetId
            self.userData = userData
            self.securityGroupIds = securityGroupIds
            self.monitoring = monitoring
            self.dryRun = dryRun
            self.securityGroups = securityGroups
            self.maxCount = maxCount
            self.additionalInfo = additionalInfo
            self.placement = placement
            self.networkInterfaces = networkInterfaces
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case tagSpecifications = "TagSpecification"
            case disableApiTermination = "disableApiTermination"
            case clientToken = "clientToken"
            case ebsOptimized = "ebsOptimized"
            case kernelId = "KernelId"
            case ipv6AddressCount = "Ipv6AddressCount"
            case instanceType = "InstanceType"
            case privateIpAddress = "privateIpAddress"
            case keyName = "KeyName"
            case iamInstanceProfile = "iamInstanceProfile"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case ipv6Addresses = "Ipv6Address"
            case minCount = "MinCount"
            case ramdiskId = "RamdiskId"
            case blockDeviceMappings = "BlockDeviceMapping"
            case subnetId = "SubnetId"
            case userData = "UserData"
            case securityGroupIds = "SecurityGroupId"
            case monitoring = "Monitoring"
            case dryRun = "dryRun"
            case securityGroups = "SecurityGroup"
            case maxCount = "MaxCount"
            case additionalInfo = "additionalInfo"
            case placement = "Placement"
            case networkInterfaces = "networkInterface"
            case imageId = "ImageId"
        }
    }

    public struct SpotInstanceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchedAvailabilityZone", location: .body(locationName: "launchedAvailabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Fault", location: .body(locationName: "fault"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "AvailabilityZoneGroup", location: .body(locationName: "availabilityZoneGroup"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "ActualBlockHourlyPrice", location: .body(locationName: "actualBlockHourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "BlockDurationMinutes", location: .body(locationName: "blockDurationMinutes"), required: false, type: .integer), 
            AWSShapeMember(label: "LaunchSpecification", location: .body(locationName: "launchSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "LaunchGroup", location: .body(locationName: "launchGroup"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]
        /// The Availability Zone in which the bid is launched.
        public let launchedAvailabilityZone: String?
        /// The ID of the Spot instance request.
        public let spotInstanceRequestId: String?
        /// The state of the Spot instance request. Spot bid status information can help you track your Spot instance requests. For more information, see Spot Bid Status in the Amazon Elastic Compute Cloud User Guide.
        public let state: SpotInstanceState?
        /// The maximum hourly price (bid) for the Spot instance launched to fulfill the request.
        public let spotPrice: String?
        /// Any tags assigned to the resource.
        public let tags: TagList?
        /// The end date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). If this is a one-time request, it remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached.
        public let validUntil: TimeStamp?
        /// The fault codes for the Spot instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The product description associated with the Spot instance.
        public let productDescription: RIProductDescription?
        /// The Availability Zone group. If you specify the same Availability Zone group for all Spot instance requests, all Spot instances are launched in the same Availability Zone.
        public let availabilityZoneGroup: String?
        /// The status code and status message describing the Spot instance request.
        public let status: SpotInstanceStatus?
        /// The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The request becomes active at this date and time.
        public let validFrom: TimeStamp?
        /// The instance ID, if an instance has been launched to fulfill the Spot instance request.
        public let instanceId: String?
        /// If you specified a duration and your Spot instance request was fulfilled, this is the fixed hourly price in effect for the Spot instance while it runs.
        public let actualBlockHourlyPrice: String?
        /// The duration for the Spot instance, in minutes.
        public let blockDurationMinutes: Int32?
        /// Additional information for launching instances.
        public let launchSpecification: LaunchSpecification?
        /// The date and time when the Spot instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let createTime: TimeStamp?
        /// The instance launch group. Launch groups are Spot instances that launch together and terminate together.
        public let launchGroup: String?
        /// The Spot instance request type.
        public let `type`: SpotInstanceType?

        public init(launchedAvailabilityZone: String? = nil, spotInstanceRequestId: String? = nil, state: SpotInstanceState? = nil, spotPrice: String? = nil, tags: TagList? = nil, validUntil: TimeStamp? = nil, fault: SpotInstanceStateFault? = nil, productDescription: RIProductDescription? = nil, availabilityZoneGroup: String? = nil, status: SpotInstanceStatus? = nil, validFrom: TimeStamp? = nil, instanceId: String? = nil, actualBlockHourlyPrice: String? = nil, blockDurationMinutes: Int32? = nil, launchSpecification: LaunchSpecification? = nil, createTime: TimeStamp? = nil, launchGroup: String? = nil, type: SpotInstanceType? = nil) {
            self.launchedAvailabilityZone = launchedAvailabilityZone
            self.spotInstanceRequestId = spotInstanceRequestId
            self.state = state
            self.spotPrice = spotPrice
            self.tags = tags
            self.validUntil = validUntil
            self.fault = fault
            self.productDescription = productDescription
            self.availabilityZoneGroup = availabilityZoneGroup
            self.status = status
            self.validFrom = validFrom
            self.instanceId = instanceId
            self.actualBlockHourlyPrice = actualBlockHourlyPrice
            self.blockDurationMinutes = blockDurationMinutes
            self.launchSpecification = launchSpecification
            self.createTime = createTime
            self.launchGroup = launchGroup
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case launchedAvailabilityZone = "launchedAvailabilityZone"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case state = "state"
            case spotPrice = "spotPrice"
            case tags = "tagSet"
            case validUntil = "validUntil"
            case fault = "fault"
            case productDescription = "productDescription"
            case availabilityZoneGroup = "availabilityZoneGroup"
            case status = "status"
            case validFrom = "validFrom"
            case instanceId = "instanceId"
            case actualBlockHourlyPrice = "actualBlockHourlyPrice"
            case blockDurationMinutes = "blockDurationMinutes"
            case launchSpecification = "launchSpecification"
            case createTime = "createTime"
            case launchGroup = "launchGroup"
            case `type` = "type"
        }
    }

    public struct RebootInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct VpcPeeringConnectionStateReason: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The status of the VPC peering connection.
        public let code: VpcPeeringConnectionStateReasonCode?
        /// A message that provides more information about the status, if applicable.
        public let message: String?

        public init(code: VpcPeeringConnectionStateReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public enum ExportTaskState: String, CustomStringConvertible, Codable {
        case active = "active"
        case cancelling = "cancelling"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public enum IamInstanceProfileAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public struct ScheduledInstance: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "PreviousSlotEndTime", location: .body(locationName: "previousSlotEndTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TotalScheduledInstanceHours", location: .body(locationName: "totalScheduledInstanceHours"), required: false, type: .integer), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "SlotDurationInHours", location: .body(locationName: "slotDurationInHours"), required: false, type: .integer), 
            AWSShapeMember(label: "ScheduledInstanceId", location: .body(locationName: "scheduledInstanceId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "TermStartDate", location: .body(locationName: "termStartDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TermEndDate", location: .body(locationName: "termEndDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NextSlotStartTime", location: .body(locationName: "nextSlotStartTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "NetworkPlatform", location: .body(locationName: "networkPlatform"), required: false, type: .string), 
            AWSShapeMember(label: "Recurrence", location: .body(locationName: "recurrence"), required: false, type: .structure)
        ]
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The time that the previous schedule ended or will end.
        public let previousSlotEndTime: TimeStamp?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int32?
        /// The date when the Scheduled Instance was purchased.
        public let createDate: TimeStamp?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The instance type.
        public let instanceType: String?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int32?
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The start date for the Scheduled Instance.
        public let termStartDate: TimeStamp?
        /// The end date for the Scheduled Instance.
        public let termEndDate: TimeStamp?
        /// The time for the next schedule to start.
        public let nextSlotStartTime: TimeStamp?
        /// The number of instances.
        public let instanceCount: Int32?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?

        public init(platform: String? = nil, previousSlotEndTime: TimeStamp? = nil, totalScheduledInstanceHours: Int32? = nil, createDate: TimeStamp? = nil, hourlyPrice: String? = nil, instanceType: String? = nil, slotDurationInHours: Int32? = nil, scheduledInstanceId: String? = nil, availabilityZone: String? = nil, termStartDate: TimeStamp? = nil, termEndDate: TimeStamp? = nil, nextSlotStartTime: TimeStamp? = nil, instanceCount: Int32? = nil, networkPlatform: String? = nil, recurrence: ScheduledInstanceRecurrence? = nil) {
            self.platform = platform
            self.previousSlotEndTime = previousSlotEndTime
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
            self.createDate = createDate
            self.hourlyPrice = hourlyPrice
            self.instanceType = instanceType
            self.slotDurationInHours = slotDurationInHours
            self.scheduledInstanceId = scheduledInstanceId
            self.availabilityZone = availabilityZone
            self.termStartDate = termStartDate
            self.termEndDate = termEndDate
            self.nextSlotStartTime = nextSlotStartTime
            self.instanceCount = instanceCount
            self.networkPlatform = networkPlatform
            self.recurrence = recurrence
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case previousSlotEndTime = "previousSlotEndTime"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
            case createDate = "createDate"
            case hourlyPrice = "hourlyPrice"
            case instanceType = "instanceType"
            case slotDurationInHours = "slotDurationInHours"
            case scheduledInstanceId = "scheduledInstanceId"
            case availabilityZone = "availabilityZone"
            case termStartDate = "termStartDate"
            case termEndDate = "termEndDate"
            case nextSlotStartTime = "nextSlotStartTime"
            case instanceCount = "instanceCount"
            case networkPlatform = "networkPlatform"
            case recurrence = "recurrence"
        }
    }

    public struct DescribeSpotFleetInstancesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "ActiveInstances", location: .body(locationName: "activeInstanceSet"), required: true, type: .structure)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String
        /// The running instances. Note that this list is refreshed periodically and might be out of date.
        public let activeInstances: ActiveInstanceSet

        public init(nextToken: String? = nil, spotFleetRequestId: String, activeInstances: ActiveInstanceSet) {
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.activeInstances = activeInstances
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case activeInstances = "activeInstanceSet"
        }
    }

    public struct ProductCode: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodeType", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductCodeId", location: .body(locationName: "productCode"), required: false, type: .string)
        ]
        /// The type of product code.
        public let productCodeType: ProductCodeValues?
        /// The product code.
        public let productCodeId: String?

        public init(productCodeType: ProductCodeValues? = nil, productCodeId: String? = nil) {
            self.productCodeType = productCodeType
            self.productCodeId = productCodeId
        }

        private enum CodingKeys: String, CodingKey {
            case productCodeType = "type"
            case productCodeId = "productCode"
        }
    }

    public struct InstanceStatusEvent: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "NotBefore", location: .body(locationName: "notBefore"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NotAfter", location: .body(locationName: "notAfter"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The event code.
        public let code: EventCode?
        /// The earliest scheduled start time for the event.
        public let notBefore: TimeStamp?
        /// The latest scheduled end time for the event.
        public let notAfter: TimeStamp?
        /// A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
        public let description: String?

        public init(code: EventCode? = nil, notBefore: TimeStamp? = nil, notAfter: TimeStamp? = nil, description: String? = nil) {
            self.code = code
            self.notBefore = notBefore
            self.notAfter = notAfter
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case notBefore = "notBefore"
            case notAfter = "notAfter"
            case description = "description"
        }
    }

    public struct DescribeVolumeAttributeResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "AutoEnableIO", location: .body(locationName: "autoEnableIO"), required: false, type: .structure), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]
        /// A list of product codes.
        public let productCodes: ProductCodeList?
        /// The state of autoEnableIO attribute.
        public let autoEnableIO: AttributeBooleanValue?
        /// The ID of the volume.
        public let volumeId: String?

        public init(productCodes: ProductCodeList? = nil, autoEnableIO: AttributeBooleanValue? = nil, volumeId: String? = nil) {
            self.productCodes = productCodes
            self.autoEnableIO = autoEnableIO
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case productCodes = "productCodes"
            case autoEnableIO = "autoEnableIO"
            case volumeId = "volumeId"
        }
    }

    public struct DeleteNetworkInterfaceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(networkInterfaceId: String, dryRun: Bool? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case dryRun = "dryRun"
        }
    }

    public struct SpotDatafeedSubscription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Fault", location: .body(locationName: "fault"), required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string)
        ]
        /// The Amazon S3 bucket where the Spot instance data feed is located.
        public let bucket: String?
        /// The AWS account ID of the account.
        public let ownerId: String?
        /// The state of the Spot instance data feed subscription.
        public let state: DatafeedSubscriptionState?
        /// The fault codes for the Spot instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The prefix that is prepended to data feed files.
        public let prefix: String?

        public init(bucket: String? = nil, ownerId: String? = nil, state: DatafeedSubscriptionState? = nil, fault: SpotInstanceStateFault? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.ownerId = ownerId
            self.state = state
            self.fault = fault
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case ownerId = "ownerId"
            case state = "state"
            case fault = "fault"
            case prefix = "prefix"
        }
    }

    public struct ImportImageRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseType", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DiskContainers", location: .body(locationName: "DiskContainer"), required: false, type: .structure), 
            AWSShapeMember(label: "Hypervisor", required: false, type: .string), 
            AWSShapeMember(label: "Architecture", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "ClientData", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The license type to be used for the Amazon Machine Image (AMI) after importing.  Note: You may only use BYOL if you have existing licenses with rights to use these licenses in a third party cloud like AWS. For more information, see Prerequisites in the VM Import/Export User Guide. Valid values: AWS | BYOL 
        public let licenseType: String?
        /// The operating system of the virtual machine. Valid values: Windows | Linux 
        public let platform: String?
        /// The token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// Information about the disk containers.
        public let diskContainers: ImageDiskContainerList?
        /// The target hypervisor platform. Valid values: xen 
        public let hypervisor: String?
        /// The architecture of the virtual machine. Valid values: i386 | x86_64 
        public let architecture: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The client-specific data.
        public let clientData: ClientData?
        /// A description string for the import image task.
        public let description: String?

        public init(licenseType: String? = nil, platform: String? = nil, clientToken: String? = nil, diskContainers: ImageDiskContainerList? = nil, hypervisor: String? = nil, architecture: String? = nil, dryRun: Bool? = nil, roleName: String? = nil, clientData: ClientData? = nil, description: String? = nil) {
            self.licenseType = licenseType
            self.platform = platform
            self.clientToken = clientToken
            self.diskContainers = diskContainers
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.dryRun = dryRun
            self.roleName = roleName
            self.clientData = clientData
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case licenseType = "LicenseType"
            case platform = "Platform"
            case clientToken = "ClientToken"
            case diskContainers = "DiskContainer"
            case hypervisor = "Hypervisor"
            case architecture = "Architecture"
            case dryRun = "DryRun"
            case roleName = "RoleName"
            case clientData = "ClientData"
            case description = "Description"
        }
    }

    public struct OwnerStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .list)
        ]
        public let owner: [String]?

        public init(owner: [String]? = nil) {
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
        }
    }

    public struct ImportInstanceVolumeDetailItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .string), 
            AWSShapeMember(label: "BytesConverted", location: .body(locationName: "bytesConverted"), required: true, type: .long), 
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: true, type: .structure), 
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: true, type: .structure), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The status of the import of this particular disk image.
        public let status: String
        /// The number of bytes converted so far.
        public let bytesConverted: Int64
        /// The volume.
        public let volume: DiskImageVolumeDescription
        /// The image.
        public let image: DiskImageDescription
        /// The status information or errors related to the disk image.
        public let statusMessage: String?
        /// The Availability Zone where the resulting instance will reside.
        public let availabilityZone: String
        /// A description of the task.
        public let description: String?

        public init(status: String, bytesConverted: Int64, volume: DiskImageVolumeDescription, image: DiskImageDescription, statusMessage: String? = nil, availabilityZone: String, description: String? = nil) {
            self.status = status
            self.bytesConverted = bytesConverted
            self.volume = volume
            self.image = image
            self.statusMessage = statusMessage
            self.availabilityZone = availabilityZone
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case bytesConverted = "bytesConverted"
            case volume = "volume"
            case image = "image"
            case statusMessage = "statusMessage"
            case availabilityZone = "availabilityZone"
            case description = "description"
        }
    }

    public struct RecurringChargesList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [RecurringCharge]?

        public init(item: [RecurringCharge]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UnsuccessfulItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: true, type: .structure)
        ]
        /// The ID of the resource.
        public let resourceId: String?
        /// Information about the error.
        public let error: UnsuccessfulItemError

        public init(resourceId: String? = nil, error: UnsuccessfulItemError) {
            self.resourceId = resourceId
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "resourceId"
            case error = "error"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfileAssociations", location: .body(locationName: "iamInstanceProfileAssociationSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more IAM instance profile associations.
        public let iamInstanceProfileAssociations: IamInstanceProfileAssociationSet?

        public init(nextToken: String? = nil, iamInstanceProfileAssociations: IamInstanceProfileAssociationSet? = nil) {
            self.nextToken = nextToken
            self.iamInstanceProfileAssociations = iamInstanceProfileAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case iamInstanceProfileAssociations = "iamInstanceProfileAssociationSet"
        }
    }

    public struct ModifySpotFleetRequestResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct OccurrenceDayRequestSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OccurenceDay", required: false, type: .list)
        ]
        public let occurenceDay: [Int32]?

        public init(occurenceDay: [Int32]? = nil) {
            self.occurenceDay = occurenceDay
        }

        private enum CodingKeys: String, CodingKey {
            case occurenceDay = "OccurenceDay"
        }
    }

    public enum VolumeType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case io1 = "io1"
        case gp2 = "gp2"
        case sc1 = "sc1"
        case st1 = "st1"
        public var description: String { return self.rawValue }
    }

    public struct FpgaImageList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FpgaImage]?

        public init(item: [FpgaImage]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct Volume: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "State", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .integer), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .structure), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string)
        ]
        /// The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.
        public let volumeType: VolumeType?
        /// The volume state.
        public let state: VolumeState?
        /// Indicates whether the volume will be encrypted.
        public let encrypted: Bool?
        /// Any tags assigned to the volume.
        public let tags: TagList?
        /// The snapshot from which the volume was created, if applicable.
        public let snapshotId: String?
        /// The size of the volume, in GiBs.
        public let size: Int32?
        /// The ID of the volume.
        public let volumeId: String?
        /// The time stamp when volume creation was initiated.
        public let createTime: TimeStamp?
        /// The number of I/O operations per second (IOPS) that the volume supports. For Provisioned IOPS SSD volumes, this represents the number of IOPS that are provisioned for the volume. For General Purpose SSD volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information on General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for gp2 volumes. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int32?
        /// The Availability Zone for the volume.
        public let availabilityZone: String?
        /// Information about the volume attachments.
        public let attachments: VolumeAttachmentList?
        /// The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.
        public let kmsKeyId: String?

        public init(volumeType: VolumeType? = nil, state: VolumeState? = nil, encrypted: Bool? = nil, tags: TagList? = nil, snapshotId: String? = nil, size: Int32? = nil, volumeId: String? = nil, createTime: TimeStamp? = nil, iops: Int32? = nil, availabilityZone: String? = nil, attachments: VolumeAttachmentList? = nil, kmsKeyId: String? = nil) {
            self.volumeType = volumeType
            self.state = state
            self.encrypted = encrypted
            self.tags = tags
            self.snapshotId = snapshotId
            self.size = size
            self.volumeId = volumeId
            self.createTime = createTime
            self.iops = iops
            self.availabilityZone = availabilityZone
            self.attachments = attachments
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case volumeType = "volumeType"
            case state = "status"
            case encrypted = "encrypted"
            case tags = "tagSet"
            case snapshotId = "snapshotId"
            case size = "size"
            case volumeId = "volumeId"
            case createTime = "createTime"
            case iops = "iops"
            case availabilityZone = "availabilityZone"
            case attachments = "attachmentSet"
            case kmsKeyId = "kmsKeyId"
        }
    }

    public struct PurchaseHostReservationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "HostIdSet", required: true, type: .structure), 
            AWSShapeMember(label: "OfferingId", required: true, type: .string), 
            AWSShapeMember(label: "LimitPrice", required: false, type: .string)
        ]
        /// The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
        public let clientToken: String?
        /// The ID/s of the Dedicated Host/s that the reservation will be associated with.
        public let hostIdSet: RequestHostIdSet
        /// The ID of the offering.
        public let offeringId: String
        /// The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request will fail. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00.
        public let limitPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, clientToken: String? = nil, hostIdSet: RequestHostIdSet, offeringId: String, limitPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.clientToken = clientToken
            self.hostIdSet = hostIdSet
            self.offeringId = offeringId
            self.limitPrice = limitPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "CurrencyCode"
            case clientToken = "ClientToken"
            case hostIdSet = "HostIdSet"
            case offeringId = "OfferingId"
            case limitPrice = "LimitPrice"
        }
    }

    public struct SubnetCidrBlockState: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// The state of a CIDR block.
        public let state: SubnetCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: SubnetCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case statusMessage = "statusMessage"
        }
    }

    public struct InstanceAttribute: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .structure), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .structure), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure)
        ]
        /// The block device mapping of the instance.
        public let blockDeviceMappings: InstanceBlockDeviceMappingList?
        /// The user data.
        public let userData: AttributeValue?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?
        /// The name of the root device (for example, /dev/sda1 or /dev/xvda).
        public let rootDeviceName: AttributeValue?
        /// If the value is true, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.
        public let disableApiTermination: AttributeBooleanValue?
        /// Indicates whether the instance is optimized for EBS I/O.
        public let ebsOptimized: AttributeBooleanValue?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// Indicates whether source/destination checking is enabled. A value of true means checking is enabled, and false means checking is disabled. This value must be false for a NAT instance to perform NAT.
        public let sourceDestCheck: AttributeBooleanValue?
        /// The instance type.
        public let instanceType: AttributeValue?
        /// A list of product codes.
        public let productCodes: ProductCodeList?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether enhanced networking with ENA is enabled.
        public let enaSupport: AttributeBooleanValue?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// The security groups associated with the instance.
        public let groups: GroupIdentifierList?

        public init(blockDeviceMappings: InstanceBlockDeviceMappingList? = nil, userData: AttributeValue? = nil, sriovNetSupport: AttributeValue? = nil, rootDeviceName: AttributeValue? = nil, disableApiTermination: AttributeBooleanValue? = nil, ebsOptimized: AttributeBooleanValue? = nil, kernelId: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, instanceType: AttributeValue? = nil, productCodes: ProductCodeList? = nil, instanceId: String? = nil, enaSupport: AttributeBooleanValue? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, ramdiskId: AttributeValue? = nil, groups: GroupIdentifierList? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.userData = userData
            self.sriovNetSupport = sriovNetSupport
            self.rootDeviceName = rootDeviceName
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.kernelId = kernelId
            self.sourceDestCheck = sourceDestCheck
            self.instanceType = instanceType
            self.productCodes = productCodes
            self.instanceId = instanceId
            self.enaSupport = enaSupport
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.ramdiskId = ramdiskId
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case userData = "userData"
            case sriovNetSupport = "sriovNetSupport"
            case rootDeviceName = "rootDeviceName"
            case disableApiTermination = "disableApiTermination"
            case ebsOptimized = "ebsOptimized"
            case kernelId = "kernel"
            case sourceDestCheck = "sourceDestCheck"
            case instanceType = "instanceType"
            case productCodes = "productCodes"
            case instanceId = "instanceId"
            case enaSupport = "enaSupport"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case ramdiskId = "ramdisk"
            case groups = "groupSet"
        }
    }

    public struct DescribeConversionTasksResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTasks", location: .body(locationName: "conversionTasks"), required: false, type: .structure)
        ]
        /// Information about the conversion tasks.
        public let conversionTasks: DescribeConversionTaskList?

        public init(conversionTasks: DescribeConversionTaskList? = nil) {
            self.conversionTasks = conversionTasks
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTasks = "conversionTasks"
        }
    }

    public struct ModifySnapshotAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserIds", location: .body(locationName: "UserId"), required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotId", required: true, type: .string), 
            AWSShapeMember(label: "CreateVolumePermission", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum), 
            AWSShapeMember(label: "OperationType", required: false, type: .enum), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "UserGroup"), required: false, type: .structure)
        ]
        /// The account ID to modify for the snapshot.
        public let userIds: UserIdStringList?
        /// The ID of the snapshot.
        public let snapshotId: String
        /// A JSON representation of the snapshot attribute modification.
        public let createVolumePermission: CreateVolumePermissionModifications?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The snapshot attribute to modify.  Only volume creation permissions may be modified at the customer level. 
        public let attribute: SnapshotAttributeName?
        /// The type of operation to perform to the attribute.
        public let operationType: OperationType?
        /// The group to modify for the snapshot.
        public let groupNames: GroupNameStringList?

        public init(userIds: UserIdStringList? = nil, snapshotId: String, createVolumePermission: CreateVolumePermissionModifications? = nil, dryRun: Bool? = nil, attribute: SnapshotAttributeName? = nil, operationType: OperationType? = nil, groupNames: GroupNameStringList? = nil) {
            self.userIds = userIds
            self.snapshotId = snapshotId
            self.createVolumePermission = createVolumePermission
            self.dryRun = dryRun
            self.attribute = attribute
            self.operationType = operationType
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case userIds = "UserId"
            case snapshotId = "SnapshotId"
            case createVolumePermission = "CreateVolumePermission"
            case dryRun = "dryRun"
            case attribute = "Attribute"
            case operationType = "OperationType"
            case groupNames = "UserGroup"
        }
    }

    public struct CancelledSpotInstanceRequestList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CancelledSpotInstanceRequest]?

        public init(item: [CancelledSpotInstanceRequest]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AttachClassicLinkVpcResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct ModifySpotFleetRequestRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetCapacity", location: .body(locationName: "targetCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum)
        ]
        /// The size of the fleet.
        public let targetCapacity: Int32?
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String
        /// Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?

        public init(targetCapacity: Int32? = nil, spotFleetRequestId: String, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil) {
            self.targetCapacity = targetCapacity
            self.spotFleetRequestId = spotFleetRequestId
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case targetCapacity = "targetCapacity"
            case spotFleetRequestId = "spotFleetRequestId"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
        }
    }

    public struct BundleTaskList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [BundleTask]?

        public init(item: [BundleTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct HostReservation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingId", location: .body(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string), 
            AWSShapeMember(label: "Start", location: .body(locationName: "start"), required: false, type: .timestamp), 
            AWSShapeMember(label: "End", location: .body(locationName: "end"), required: false, type: .timestamp), 
            AWSShapeMember(label: "HostIdSet", location: .body(locationName: "hostIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer)
        ]
        /// The upfront price of the reservation.
        public let upfrontPrice: String?
        /// The state of the reservation.
        public let state: ReservationState?
        /// The payment option selected for this reservation.
        public let paymentOption: PaymentOption?
        /// The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
        public let offeringId: String?
        /// The number of Dedicated Hosts the reservation is associated with.
        public let count: Int32?
        /// The ID of the reservation that specifies the associated Dedicated Hosts.
        public let hostReservationId: String?
        /// The hourly price of the reservation.
        public let hourlyPrice: String?
        /// The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
        public let instanceFamily: String?
        /// The date and time that the reservation started.
        public let start: TimeStamp?
        /// The date and time that the reservation ends.
        public let end: TimeStamp?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        public let hostIdSet: ResponseHostIdSet?
        /// The currency in which the upfrontPrice and hourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The length of the reservation's term, specified in seconds. Can be 31536000 (1 year) | 94608000 (3 years).
        public let duration: Int32?

        public init(upfrontPrice: String? = nil, state: ReservationState? = nil, paymentOption: PaymentOption? = nil, offeringId: String? = nil, count: Int32? = nil, hostReservationId: String? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, start: TimeStamp? = nil, end: TimeStamp? = nil, hostIdSet: ResponseHostIdSet? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int32? = nil) {
            self.upfrontPrice = upfrontPrice
            self.state = state
            self.paymentOption = paymentOption
            self.offeringId = offeringId
            self.count = count
            self.hostReservationId = hostReservationId
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.start = start
            self.end = end
            self.hostIdSet = hostIdSet
            self.currencyCode = currencyCode
            self.duration = duration
        }

        private enum CodingKeys: String, CodingKey {
            case upfrontPrice = "upfrontPrice"
            case state = "state"
            case paymentOption = "paymentOption"
            case offeringId = "offeringId"
            case count = "count"
            case hostReservationId = "hostReservationId"
            case hourlyPrice = "hourlyPrice"
            case instanceFamily = "instanceFamily"
            case start = "start"
            case end = "end"
            case hostIdSet = "hostIdSet"
            case currencyCode = "currencyCode"
            case duration = "duration"
        }
    }

    public struct CreateReservedInstancesListingResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .structure)
        ]
        /// Information about the Standard Reserved Instance listing.
        public let reservedInstancesListings: ReservedInstancesListingList?

        public init(reservedInstancesListings: ReservedInstancesListingList? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct DescribeHostsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", location: .body(locationName: "filter"), required: false, type: .structure), 
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// One or more filters.    instance-type - The instance type size that the Dedicated Host is configured to support.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    host-reservation-id - The ID of the reservation assigned to this host.    client-token - The idempotency token you provided when you launched the instance    state- The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    availability-zone - The Availability Zone of the host.  
        public let filter: FilterList?
        /// The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
        public let hostIds: RequestHostIdList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500; if maxResults is given a larger value than 500, you will receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
        public let maxResults: Int32?

        public init(filter: FilterList? = nil, hostIds: RequestHostIdList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filter = filter
            self.hostIds = hostIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case hostIds = "hostId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct AllocateAddressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Set to vpc to allocate the address for use with instances in a VPC. Default: The address is for use with instances in EC2-Classic.
        public let domain: DomainType?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(domain: DomainType? = nil, dryRun: Bool? = nil) {
            self.domain = domain
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeBundleTasksRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "BundleIds", location: .body(locationName: "BundleId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.  
        public let filters: FilterList?
        /// One or more bundle task IDs. Default: Describes all your bundle tasks.
        public let bundleIds: BundleIdStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(filters: FilterList? = nil, bundleIds: BundleIdStringList? = nil, dryRun: Bool? = nil) {
            self.filters = filters
            self.bundleIds = bundleIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case bundleIds = "BundleId"
            case dryRun = "dryRun"
        }
    }

    public struct CustomerGatewayList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CustomerGateway]?

        public init(item: [CustomerGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RunScheduledInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIdSet", location: .body(locationName: "instanceIdSet"), required: false, type: .structure)
        ]
        /// The IDs of the newly launched instances.
        public let instanceIdSet: InstanceIdSet?

        public init(instanceIdSet: InstanceIdSet? = nil) {
            self.instanceIdSet = instanceIdSet
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIdSet = "instanceIdSet"
        }
    }

    public struct DescribeVpcEndpointServicesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceNames", location: .body(locationName: "serviceNameSet"), required: false, type: .structure)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// A list of supported AWS services.
        public let serviceNames: ValueStringList?

        public init(nextToken: String? = nil, serviceNames: ValueStringList? = nil) {
            self.nextToken = nextToken
            self.serviceNames = serviceNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceNames = "serviceNameSet"
        }
    }

    public struct AssociateVpcCidrBlockResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?

        public init(vpcId: String? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil) {
            self.vpcId = vpcId
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
        }
    }

    public struct ExportTaskList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ExportTask]?

        public init(item: [ExportTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ActivityStatus: String, CustomStringConvertible, Codable {
        case error = "error"
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        case fulfilled = "fulfilled"
        public var description: String { return self.rawValue }
    }

    public struct UserData: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Data", location: .body(locationName: "data"), required: false, type: .string)
        ]
        /// The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let data: String?

        public init(data: String? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "data"
        }
    }

    public struct AssociateAddressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string), 
            AWSShapeMember(label: "AllowReassociation", location: .body(locationName: "allowReassociation"), required: false, type: .boolean)
        ]
        /// [EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
        public let privateIpAddress: String?
        /// [EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.
        public let networkInterfaceId: String?
        /// The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// [EC2-VPC] The allocation ID. This is required for EC2-VPC.
        public let allocationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address. This is required for EC2-Classic.
        public let publicIp: String?
        /// [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
        public let allowReassociation: Bool?

        public init(privateIpAddress: String? = nil, networkInterfaceId: String? = nil, instanceId: String? = nil, allocationId: String? = nil, dryRun: Bool? = nil, publicIp: String? = nil, allowReassociation: Bool? = nil) {
            self.privateIpAddress = privateIpAddress
            self.networkInterfaceId = networkInterfaceId
            self.instanceId = instanceId
            self.allocationId = allocationId
            self.dryRun = dryRun
            self.publicIp = publicIp
            self.allowReassociation = allowReassociation
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
            case networkInterfaceId = "networkInterfaceId"
            case instanceId = "InstanceId"
            case allocationId = "AllocationId"
            case dryRun = "dryRun"
            case publicIp = "PublicIp"
            case allowReassociation = "allowReassociation"
        }
    }

    public enum HypervisorType: String, CustomStringConvertible, Codable {
        case ovm = "ovm"
        case xen = "xen"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateSubnetCidrBlockRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The ID of the egress-only Internet gateway.
        public let egressOnlyInternetGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(egressOnlyInternetGatewayId: String, dryRun: Bool? = nil) {
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGatewayId = "EgressOnlyInternetGatewayId"
            case dryRun = "DryRun"
        }
    }

    public enum Affinity: String, CustomStringConvertible, Codable {
        case `default` = "default"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public struct AuthorizeSecurityGroupEgressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", location: .body(locationName: "sourceSecurityGroupOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", location: .body(locationName: "sourceSecurityGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string)
        ]
        /// The AWS account number for a destination security group. To authorize outbound access to a destination security group, we recommend that you use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// A set of IP permissions. You can't specify a destination security group and a CIDR IP address range.
        public let ipPermissions: IpPermissionList?
        /// The CIDR IPv4 address range. We recommend that you specify the CIDR range in a set of IP permissions instead.
        public let cidrIp: String?
        /// The name of a destination security group. To authorize outbound access to a destination security group, we recommend that you use a set of IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.
        public let fromPort: Int32?
        /// The end of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.
        public let toPort: Int32?
        /// The IP protocol name or number. We recommend that you specify the protocol in a set of IP permissions instead.
        public let ipProtocol: String?
        /// The ID of the security group.
        public let groupId: String

        public init(sourceSecurityGroupOwnerId: String? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil, dryRun: Bool? = nil, fromPort: Int32? = nil, toPort: Int32? = nil, ipProtocol: String? = nil, groupId: String) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.toPort = toPort
            self.ipProtocol = ipProtocol
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case ipPermissions = "ipPermissions"
            case cidrIp = "cidrIp"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
            case dryRun = "dryRun"
            case fromPort = "fromPort"
            case toPort = "toPort"
            case ipProtocol = "ipProtocol"
            case groupId = "groupId"
        }
    }

    public struct VpcList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Vpc]?

        public init(item: [Vpc]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct FlowLog: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliverLogsErrorMessage", location: .body(locationName: "deliverLogsErrorMessage"), required: false, type: .string), 
            AWSShapeMember(label: "FlowLogStatus", location: .body(locationName: "flowLogStatus"), required: false, type: .string), 
            AWSShapeMember(label: "FlowLogId", location: .body(locationName: "flowLogId"), required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", location: .body(locationName: "creationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TrafficType", location: .body(locationName: "trafficType"), required: false, type: .enum), 
            AWSShapeMember(label: "DeliverLogsPermissionArn", location: .body(locationName: "deliverLogsPermissionArn"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", location: .body(locationName: "resourceId"), required: false, type: .string), 
            AWSShapeMember(label: "LogGroupName", location: .body(locationName: "logGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "DeliverLogsStatus", location: .body(locationName: "deliverLogsStatus"), required: false, type: .string)
        ]
        /// Information about the error that occurred. Rate limited indicates that CloudWatch logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of CloudWatch Logs log groups that you can create. Access error indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. Unknown error indicates an internal error.
        public let deliverLogsErrorMessage: String?
        /// The status of the flow log (ACTIVE).
        public let flowLogStatus: String?
        /// The flow log ID.
        public let flowLogId: String?
        /// The date and time the flow log was created.
        public let creationTime: TimeStamp?
        /// The type of traffic captured for the flow log.
        public let trafficType: TrafficType?
        /// The ARN of the IAM role that posts logs to CloudWatch Logs.
        public let deliverLogsPermissionArn: String?
        /// The ID of the resource on which the flow log was created.
        public let resourceId: String?
        /// The name of the flow log group.
        public let logGroupName: String?
        /// The status of the logs delivery (SUCCESS | FAILED).
        public let deliverLogsStatus: String?

        public init(deliverLogsErrorMessage: String? = nil, flowLogStatus: String? = nil, flowLogId: String? = nil, creationTime: TimeStamp? = nil, trafficType: TrafficType? = nil, deliverLogsPermissionArn: String? = nil, resourceId: String? = nil, logGroupName: String? = nil, deliverLogsStatus: String? = nil) {
            self.deliverLogsErrorMessage = deliverLogsErrorMessage
            self.flowLogStatus = flowLogStatus
            self.flowLogId = flowLogId
            self.creationTime = creationTime
            self.trafficType = trafficType
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.resourceId = resourceId
            self.logGroupName = logGroupName
            self.deliverLogsStatus = deliverLogsStatus
        }

        private enum CodingKeys: String, CodingKey {
            case deliverLogsErrorMessage = "deliverLogsErrorMessage"
            case flowLogStatus = "flowLogStatus"
            case flowLogId = "flowLogId"
            case creationTime = "creationTime"
            case trafficType = "trafficType"
            case deliverLogsPermissionArn = "deliverLogsPermissionArn"
            case resourceId = "resourceId"
            case logGroupName = "logGroupName"
            case deliverLogsStatus = "deliverLogsStatus"
        }
    }

    public struct CreateVpcEndpointResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpoint", location: .body(locationName: "vpcEndpoint"), required: false, type: .structure)
        ]
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the endpoint.
        public let vpcEndpoint: VpcEndpoint?

        public init(clientToken: String? = nil, vpcEndpoint: VpcEndpoint? = nil) {
            self.clientToken = clientToken
            self.vpcEndpoint = vpcEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case vpcEndpoint = "vpcEndpoint"
        }
    }

    public struct AttachNetworkInterfaceResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string)
        ]
        /// The ID of the network interface attachment.
        public let attachmentId: String?

        public init(attachmentId: String? = nil) {
            self.attachmentId = attachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
        }
    }

    public struct DescribeVpcEndpointsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpoints", location: .body(locationName: "vpcEndpointSet"), required: false, type: .structure)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the endpoints.
        public let vpcEndpoints: VpcEndpointSet?

        public init(nextToken: String? = nil, vpcEndpoints: VpcEndpointSet? = nil) {
            self.nextToken = nextToken
            self.vpcEndpoints = vpcEndpoints
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case vpcEndpoints = "vpcEndpointSet"
        }
    }

    public struct CreateKeyPairRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyName", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// A unique name for the key pair. Constraints: Up to 255 ASCII characters
        public let keyName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(keyName: String, dryRun: Bool? = nil) {
            self.keyName = keyName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case keyName = "KeyName"
            case dryRun = "dryRun"
        }
    }

    public struct StaleSecurityGroup: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaleIpPermissions", location: .body(locationName: "staleIpPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "StaleIpPermissionsEgress", location: .body(locationName: "staleIpPermissionsEgress"), required: false, type: .structure), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// Information about the stale inbound rules in the security group.
        public let staleIpPermissions: StaleIpPermissionSet?
        /// Information about the stale outbound rules in the security group.
        public let staleIpPermissionsEgress: StaleIpPermissionSet?
        /// The name of the security group.
        public let groupName: String?
        /// The ID of the VPC for the security group.
        public let vpcId: String?
        /// The ID of the security group.
        public let groupId: String
        /// The description of the security group.
        public let description: String?

        public init(staleIpPermissions: StaleIpPermissionSet? = nil, staleIpPermissionsEgress: StaleIpPermissionSet? = nil, groupName: String? = nil, vpcId: String? = nil, groupId: String, description: String? = nil) {
            self.staleIpPermissions = staleIpPermissions
            self.staleIpPermissionsEgress = staleIpPermissionsEgress
            self.groupName = groupName
            self.vpcId = vpcId
            self.groupId = groupId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case staleIpPermissions = "staleIpPermissions"
            case staleIpPermissionsEgress = "staleIpPermissionsEgress"
            case groupName = "groupName"
            case vpcId = "vpcId"
            case groupId = "groupId"
            case description = "description"
        }
    }

    public struct ConfirmProductInstanceResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// The AWS account ID of the instance owner. This is only present if the product code is attached to the instance.
        public let ownerId: String?
        /// The return value of the request. Returns true if the specified product code is owned by the requester and associated with the specified instance.
        public let `return`: Bool?

        public init(ownerId: String? = nil, return: Bool? = nil) {
            self.ownerId = ownerId
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId = "ownerId"
            case `return` = "return"
        }
    }

    public enum SnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case completed = "completed"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public struct UserIdGroupPairList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UserIdGroupPair]?

        public init(item: [UserIdGroupPair]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImportKeyPairRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicKeyMaterial", location: .body(locationName: "publicKeyMaterial"), required: true, type: .blob)
        ]
        /// A unique name for the key pair.
        public let keyName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
        public let publicKeyMaterial: Data

        public init(keyName: String, dryRun: Bool? = nil, publicKeyMaterial: Data) {
            self.keyName = keyName
            self.dryRun = dryRun
            self.publicKeyMaterial = publicKeyMaterial
        }

        private enum CodingKeys: String, CodingKey {
            case keyName = "keyName"
            case dryRun = "dryRun"
            case publicKeyMaterial = "publicKeyMaterial"
        }
    }

    public struct InstanceIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: false, type: .list)
        ]
        public let instanceId: [String]?

        public init(instanceId: [String]? = nil) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
        }
    }

    public struct VpcClassicLinkIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .list)
        ]
        public let vpcId: [String]?

        public init(vpcId: [String]? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct RunInstancesMonitoringEnabled: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: true, type: .boolean)
        ]
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool

        public init(enabled: Bool) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct GetPasswordDataResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PasswordData", location: .body(locationName: "passwordData"), required: false, type: .string), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The password of the instance.
        public let passwordData: String?
        /// The time the data was last updated.
        public let timestamp: TimeStamp?
        /// The ID of the Windows instance.
        public let instanceId: String?

        public init(passwordData: String? = nil, timestamp: TimeStamp? = nil, instanceId: String? = nil) {
            self.passwordData = passwordData
            self.timestamp = timestamp
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case passwordData = "passwordData"
            case timestamp = "timestamp"
            case instanceId = "instanceId"
        }
    }

    public struct AvailabilityZoneMessageList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AvailabilityZoneMessage]?

        public init(item: [AvailabilityZoneMessage]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum PlatformValues: String, CustomStringConvertible, Codable {
        case windows = "Windows"
        public var description: String { return self.rawValue }
    }

    public struct IdFormat: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Deadline", location: .body(locationName: "deadline"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: false, type: .string), 
            AWSShapeMember(label: "UseLongIds", location: .body(locationName: "useLongIds"), required: false, type: .boolean)
        ]
        /// The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
        public let deadline: TimeStamp?
        /// The type of resource.
        public let resource: String?
        /// Indicates whether longer IDs (17-character IDs) are enabled for the resource.
        public let useLongIds: Bool?

        public init(deadline: TimeStamp? = nil, resource: String? = nil, useLongIds: Bool? = nil) {
            self.deadline = deadline
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case deadline = "deadline"
            case resource = "resource"
            case useLongIds = "useLongIds"
        }
    }

    public struct FpgaImage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .structure), 
            AWSShapeMember(label: "ShellVersion", location: .body(locationName: "shellVersion"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageGlobalId", location: .body(locationName: "fpgaImageGlobalId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .structure), 
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "PciId", location: .body(locationName: "pciId"), required: false, type: .structure), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OwnerAlias", location: .body(locationName: "ownerAlias"), required: false, type: .string)
        ]
        /// Any tags assigned to the AFI.
        public let tags: TagList?
        /// The version of the AWS Shell that was used to create the bitstream.
        public let shellVersion: String?
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// Information about the state of the AFI.
        public let state: FpgaImageState?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?
        /// The time of the most recent update to the AFI.
        public let updateTime: TimeStamp?
        /// The AWS account ID of the AFI owner.
        public let ownerId: String?
        /// The description of the AFI.
        public let description: String?
        /// The product codes for the AFI.
        public let productCodes: ProductCodeList?
        /// The name of the AFI.
        public let name: String?
        /// Information about the PCI bus.
        public let pciId: PciId?
        /// The date and time the AFI was created.
        public let createTime: TimeStamp?
        /// The alias of the AFI owner. Possible values include self, amazon, and aws-marketplace.
        public let ownerAlias: String?

        public init(tags: TagList? = nil, shellVersion: String? = nil, fpgaImageGlobalId: String? = nil, state: FpgaImageState? = nil, fpgaImageId: String? = nil, updateTime: TimeStamp? = nil, ownerId: String? = nil, description: String? = nil, productCodes: ProductCodeList? = nil, name: String? = nil, pciId: PciId? = nil, createTime: TimeStamp? = nil, ownerAlias: String? = nil) {
            self.tags = tags
            self.shellVersion = shellVersion
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.state = state
            self.fpgaImageId = fpgaImageId
            self.updateTime = updateTime
            self.ownerId = ownerId
            self.description = description
            self.productCodes = productCodes
            self.name = name
            self.pciId = pciId
            self.createTime = createTime
            self.ownerAlias = ownerAlias
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case shellVersion = "shellVersion"
            case fpgaImageGlobalId = "fpgaImageGlobalId"
            case state = "state"
            case fpgaImageId = "fpgaImageId"
            case updateTime = "updateTime"
            case ownerId = "ownerId"
            case description = "description"
            case productCodes = "productCodes"
            case name = "name"
            case pciId = "pciId"
            case createTime = "createTime"
            case ownerAlias = "ownerAlias"
        }
    }

    public struct RunScheduledInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "LaunchSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "ScheduledInstanceId", required: true, type: .string)
        ]
        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.
        public let launchSpecification: ScheduledInstancesLaunchSpecification
        /// The number of instances. Default: 1
        public let instanceCount: Int32?
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String

        public init(clientToken: String? = nil, dryRun: Bool? = nil, launchSpecification: ScheduledInstancesLaunchSpecification, instanceCount: Int32? = nil, scheduledInstanceId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.launchSpecification = launchSpecification
            self.instanceCount = instanceCount
            self.scheduledInstanceId = scheduledInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case launchSpecification = "LaunchSpecification"
            case instanceCount = "InstanceCount"
            case scheduledInstanceId = "ScheduledInstanceId"
        }
    }

    public struct BlockDeviceMapping: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure)
        ]
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1.The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?
        /// The device name exposed to the instance (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsBlockDevice?

        public init(noDevice: String? = nil, virtualName: String? = nil, deviceName: String? = nil, ebs: EbsBlockDevice? = nil) {
            self.noDevice = noDevice
            self.virtualName = virtualName
            self.deviceName = deviceName
            self.ebs = ebs
        }

        private enum CodingKeys: String, CodingKey {
            case noDevice = "noDevice"
            case virtualName = "virtualName"
            case deviceName = "deviceName"
            case ebs = "ebs"
        }
    }

    public enum InstanceStateName: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case running = "running"
        case shuttingDown = "shutting-down"
        case terminated = "terminated"
        case stopping = "stopping"
        case stopped = "stopped"
        public var description: String { return self.rawValue }
    }

    public struct ReplaceIamInstanceProfileAssociationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfile", required: true, type: .structure), 
            AWSShapeMember(label: "AssociationId", required: true, type: .string)
        ]
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification
        /// The ID of the existing IAM instance profile association.
        public let associationId: String

        public init(iamInstanceProfile: IamInstanceProfileSpecification, associationId: String) {
            self.iamInstanceProfile = iamInstanceProfile
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfile = "IamInstanceProfile"
            case associationId = "AssociationId"
        }
    }

    public struct DescribeClassicLinkInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// One or more filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag:key=value - The key/value combination of a tag assigned to the resource.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    vpc-id - The ID of the VPC that the instance is linked to.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
        public let instanceIds: InstanceIdStringList?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the instance IDs parameter in the same request. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, instanceIds: InstanceIdStringList? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.instanceIds = instanceIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case dryRun = "dryRun"
            case nextToken = "nextToken"
            case instanceIds = "InstanceId"
            case maxResults = "maxResults"
        }
    }

    public struct AllocationIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", required: false, type: .list)
        ]
        public let allocationId: [String]?

        public init(allocationId: [String]? = nil) {
            self.allocationId = allocationId
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
        }
    }

    public struct ScheduledInstancesIpv6Address: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string)
        ]
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public enum ProductCodeValues: String, CustomStringConvertible, Codable {
        case devpay = "devpay"
        case marketplace = "marketplace"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceType: String, CustomStringConvertible, Codable {
        case oneTime = "one-time"
        case persistent = "persistent"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSpotFleetRequestHistoryRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: EventType?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(startTime: TimeStamp, dryRun: Bool? = nil, eventType: EventType? = nil, nextToken: String? = nil, spotFleetRequestId: String, maxResults: Int32? = nil) {
            self.startTime = startTime
            self.dryRun = dryRun
            self.eventType = eventType
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "startTime"
            case dryRun = "dryRun"
            case eventType = "eventType"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case maxResults = "maxResults"
        }
    }

    public struct ScheduledInstanceAvailability: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "TotalScheduledInstanceHours", location: .body(locationName: "totalScheduledInstanceHours"), required: false, type: .integer), 
            AWSShapeMember(label: "MinTermDurationInDays", location: .body(locationName: "minTermDurationInDays"), required: false, type: .integer), 
            AWSShapeMember(label: "MaxTermDurationInDays", location: .body(locationName: "maxTermDurationInDays"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailableInstanceCount", location: .body(locationName: "availableInstanceCount"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "SlotDurationInHours", location: .body(locationName: "slotDurationInHours"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "FirstSlotStartTime", location: .body(locationName: "firstSlotStartTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "NetworkPlatform", location: .body(locationName: "networkPlatform"), required: false, type: .string), 
            AWSShapeMember(label: "PurchaseToken", location: .body(locationName: "purchaseToken"), required: false, type: .string), 
            AWSShapeMember(label: "Recurrence", location: .body(locationName: "recurrence"), required: false, type: .structure)
        ]
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int32?
        /// The minimum term. The only possible value is 365 days.
        public let minTermDurationInDays: Int32?
        /// The maximum term. The only possible value is 365 days.
        public let maxTermDurationInDays: Int32?
        /// The number of available instances.
        public let availableInstanceCount: Int32?
        /// The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
        public let instanceType: String?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int32?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The time period for the first schedule to start.
        public let firstSlotStartTime: TimeStamp?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The purchase token. This token expires in two hours.
        public let purchaseToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?

        public init(platform: String? = nil, totalScheduledInstanceHours: Int32? = nil, minTermDurationInDays: Int32? = nil, maxTermDurationInDays: Int32? = nil, availableInstanceCount: Int32? = nil, instanceType: String? = nil, slotDurationInHours: Int32? = nil, availabilityZone: String? = nil, hourlyPrice: String? = nil, firstSlotStartTime: TimeStamp? = nil, networkPlatform: String? = nil, purchaseToken: String? = nil, recurrence: ScheduledInstanceRecurrence? = nil) {
            self.platform = platform
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
            self.minTermDurationInDays = minTermDurationInDays
            self.maxTermDurationInDays = maxTermDurationInDays
            self.availableInstanceCount = availableInstanceCount
            self.instanceType = instanceType
            self.slotDurationInHours = slotDurationInHours
            self.availabilityZone = availabilityZone
            self.hourlyPrice = hourlyPrice
            self.firstSlotStartTime = firstSlotStartTime
            self.networkPlatform = networkPlatform
            self.purchaseToken = purchaseToken
            self.recurrence = recurrence
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case totalScheduledInstanceHours = "totalScheduledInstanceHours"
            case minTermDurationInDays = "minTermDurationInDays"
            case maxTermDurationInDays = "maxTermDurationInDays"
            case availableInstanceCount = "availableInstanceCount"
            case instanceType = "instanceType"
            case slotDurationInHours = "slotDurationInHours"
            case availabilityZone = "availabilityZone"
            case hourlyPrice = "hourlyPrice"
            case firstSlotStartTime = "firstSlotStartTime"
            case networkPlatform = "networkPlatform"
            case purchaseToken = "purchaseToken"
            case recurrence = "recurrence"
        }
    }

    public struct PricingDetailsList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PricingDetail]?

        public init(item: [PricingDetail]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VolumeDetail: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: true, type: .long)
        ]
        /// The size of the volume, in GiB.
        public let size: Int64

        public init(size: Int64) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
        }
    }

    public struct ReleaseHostsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: true, type: .structure)
        ]
        /// The IDs of the Dedicated Hosts you want to release.
        public let hostIds: RequestHostIdList

        public init(hostIds: RequestHostIdList) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostId"
        }
    }

    public enum CancelSpotInstanceRequestState: String, CustomStringConvertible, Codable {
        case active = "active"
        case open = "open"
        case closed = "closed"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public struct InstanceStatusDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "ImpairedSince", location: .body(locationName: "impairedSince"), required: false, type: .timestamp)
        ]
        /// The type of instance status.
        public let name: StatusName?
        /// The status.
        public let status: StatusType?
        /// The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
        public let impairedSince: TimeStamp?

        public init(name: StatusName? = nil, status: StatusType? = nil, impairedSince: TimeStamp? = nil) {
            self.name = name
            self.status = status
            self.impairedSince = impairedSince
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case status = "status"
            case impairedSince = "impairedSince"
        }
    }

    public struct StartInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Reserved.
        public let additionalInfo: String?

        public init(dryRun: Bool? = nil, instanceIds: InstanceIdStringList, additionalInfo: String? = nil) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
            self.additionalInfo = additionalInfo
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case instanceIds = "InstanceId"
            case additionalInfo = "additionalInfo"
        }
    }

    public struct FlowLogSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [FlowLog]?

        public init(item: [FlowLog]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SlotStartTimeRangeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EarliestTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestTime", required: false, type: .timestamp)
        ]
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: TimeStamp?
        /// The latest date and time, in UTC, for the Scheduled Instance to start.
        public let latestTime: TimeStamp?

        public init(earliestTime: TimeStamp? = nil, latestTime: TimeStamp? = nil) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct CreateRouteResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct VolumeStatusEventsList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusEvent]?

        public init(item: [VolumeStatusEvent]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum NetworkInterfaceType: String, CustomStringConvertible, Codable {
        case interface = "interface"
        case natgateway = "natGateway"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedInstancesListingsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListings", location: .body(locationName: "reservedInstancesListingsSet"), required: false, type: .structure)
        ]
        /// Information about the Reserved Instance listing.
        public let reservedInstancesListings: ReservedInstancesListingList?

        public init(reservedInstancesListings: ReservedInstancesListingList? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct GetHostReservationPurchasePreviewResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Purchase", location: .body(locationName: "purchase"), required: false, type: .list), 
            AWSShapeMember(label: "TotalUpfrontPrice", location: .body(locationName: "totalUpfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "TotalHourlyPrice", location: .body(locationName: "totalHourlyPrice"), required: false, type: .string)
        ]
        /// The purchase information of the Dedicated Host Reservation and the Dedicated Hosts associated with it.
        public let purchase: [Purchase]?
        /// The potential total upfront price. This is billed immediately.
        public let totalUpfrontPrice: String?
        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The potential total hourly price of the reservation per hour.
        public let totalHourlyPrice: String?

        public init(purchase: [Purchase]? = nil, totalUpfrontPrice: String? = nil, currencyCode: CurrencyCodeValues? = nil, totalHourlyPrice: String? = nil) {
            self.purchase = purchase
            self.totalUpfrontPrice = totalUpfrontPrice
            self.currencyCode = currencyCode
            self.totalHourlyPrice = totalHourlyPrice
        }

        private enum CodingKeys: String, CodingKey {
            case purchase = "purchase"
            case totalUpfrontPrice = "totalUpfrontPrice"
            case currencyCode = "currencyCode"
            case totalHourlyPrice = "totalHourlyPrice"
        }
    }

    public struct ExportTask: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceExportDetails", location: .body(locationName: "instanceExport"), required: false, type: .structure), 
            AWSShapeMember(label: "ExportTaskId", location: .body(locationName: "exportTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "ExportToS3Task", location: .body(locationName: "exportToS3"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// Information about the instance to export.
        public let instanceExportDetails: InstanceExportDetails?
        /// The ID of the export task.
        public let exportTaskId: String?
        /// Information about the export task.
        public let exportToS3Task: ExportToS3Task?
        /// The state of the export task.
        public let state: ExportTaskState?
        /// The status message related to the export task.
        public let statusMessage: String?
        /// A description of the resource being exported.
        public let description: String?

        public init(instanceExportDetails: InstanceExportDetails? = nil, exportTaskId: String? = nil, exportToS3Task: ExportToS3Task? = nil, state: ExportTaskState? = nil, statusMessage: String? = nil, description: String? = nil) {
            self.instanceExportDetails = instanceExportDetails
            self.exportTaskId = exportTaskId
            self.exportToS3Task = exportToS3Task
            self.state = state
            self.statusMessage = statusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case instanceExportDetails = "instanceExport"
            case exportTaskId = "exportTaskId"
            case exportToS3Task = "exportToS3"
            case state = "state"
            case statusMessage = "statusMessage"
            case description = "description"
        }
    }

    public struct CreateSpotDatafeedSubscriptionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", location: .body(locationName: "bucket"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Prefix", location: .body(locationName: "prefix"), required: false, type: .string)
        ]
        /// The Amazon S3 bucket in which to store the Spot instance data feed.
        public let bucket: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A prefix for the data feed file names.
        public let prefix: String?

        public init(bucket: String, dryRun: Bool? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case dryRun = "dryRun"
            case prefix = "prefix"
        }
    }

    public struct EgressOnlyInternetGatewayList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [EgressOnlyInternetGateway]?

        public init(item: [EgressOnlyInternetGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeScheduledInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SlotStartTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "ScheduledInstanceIds", location: .body(locationName: "ScheduledInstanceId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The time period for the first schedule to start.
        public let slotStartTimeRange: SlotStartTimeRangeRequest?
        /// One or more Scheduled Instance IDs.
        public let scheduledInstanceIds: ScheduledInstanceIdRequestSet?
        /// One or more filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(slotStartTimeRange: SlotStartTimeRangeRequest? = nil, scheduledInstanceIds: ScheduledInstanceIdRequestSet? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.slotStartTimeRange = slotStartTimeRange
            self.scheduledInstanceIds = scheduledInstanceIds
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case slotStartTimeRange = "SlotStartTimeRange"
            case scheduledInstanceIds = "ScheduledInstanceId"
            case filters = "Filter"
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteSubnetRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the subnet.
        public let subnetId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(subnetId: String, dryRun: Bool? = nil) {
            self.subnetId = subnetId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case dryRun = "dryRun"
        }
    }

    public struct EbsInstanceBlockDeviceSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string)
        ]
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(deleteOnTermination: Bool? = nil, volumeId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case volumeId = "volumeId"
        }
    }

    public struct NetworkInterfaceAttachment: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "AttachTime", location: .body(locationName: "attachTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceOwnerId", location: .body(locationName: "instanceOwnerId"), required: false, type: .string)
        ]
        /// The device index of the network interface attachment on the instance.
        public let deviceIndex: Int32?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The ID of the instance.
        public let instanceId: String?
        /// The timestamp indicating when the attachment initiated.
        public let attachTime: TimeStamp?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The AWS account ID of the owner of the instance.
        public let instanceOwnerId: String?

        public init(deviceIndex: Int32? = nil, status: AttachmentStatus? = nil, instanceId: String? = nil, attachTime: TimeStamp? = nil, deleteOnTermination: Bool? = nil, attachmentId: String? = nil, instanceOwnerId: String? = nil) {
            self.deviceIndex = deviceIndex
            self.status = status
            self.instanceId = instanceId
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.attachmentId = attachmentId
            self.instanceOwnerId = instanceOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceIndex = "deviceIndex"
            case status = "status"
            case instanceId = "instanceId"
            case attachTime = "attachTime"
            case deleteOnTermination = "deleteOnTermination"
            case attachmentId = "attachmentId"
            case instanceOwnerId = "instanceOwnerId"
        }
    }

    public struct DescribePrefixListsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixLists", location: .body(locationName: "prefixListSet"), required: false, type: .structure)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// All available prefix lists.
        public let prefixLists: PrefixListSet?

        public init(nextToken: String? = nil, prefixLists: PrefixListSet? = nil) {
            self.nextToken = nextToken
            self.prefixLists = prefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case prefixLists = "prefixListSet"
        }
    }

    public struct ReplaceRouteTableAssociationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new route table to associate with the subnet.
        public let routeTableId: String
        /// The association ID.
        public let associationId: String

        public init(dryRun: Bool? = nil, routeTableId: String, associationId: String) {
            self.dryRun = dryRun
            self.routeTableId = routeTableId
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case routeTableId = "routeTableId"
            case associationId = "associationId"
        }
    }

    public struct AccountAttributeNameStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", required: false, type: .list)
        ]
        public let attributeName: [AccountAttributeName]?

        public init(attributeName: [AccountAttributeName]? = nil) {
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
        }
    }

    public enum ImageAttributeName: String, CustomStringConvertible, Codable {
        case description = "description"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        case launchpermission = "launchPermission"
        case productcodes = "productCodes"
        case blockdevicemapping = "blockDeviceMapping"
        case sriovnetsupport = "sriovNetSupport"
        public var description: String { return self.rawValue }
    }

    public enum PlacementGroupState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct ScheduledInstancesBlockDeviceMappingSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMapping", required: false, type: .list)
        ]
        public let blockDeviceMapping: [ScheduledInstancesBlockDeviceMapping]?

        public init(blockDeviceMapping: [ScheduledInstancesBlockDeviceMapping]? = nil) {
            self.blockDeviceMapping = blockDeviceMapping
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMapping = "BlockDeviceMapping"
        }
    }

    public struct SecurityGroupReferences: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SecurityGroupReference]?

        public init(item: [SecurityGroupReference]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstanceStatusSummary: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", location: .body(locationName: "details"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The system instance health or application instance health.
        public let details: InstanceStatusDetailsList?
        /// The status.
        public let status: SummaryStatus?

        public init(details: InstanceStatusDetailsList? = nil, status: SummaryStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct UnsuccessfulItemError: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: true, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: true, type: .string)
        ]
        /// The error code.
        public let code: String
        /// The error message accompanying the error code.
        public let message: String

        public init(code: String, message: String) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct SnapshotIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .list)
        ]
        public let snapshotId: [String]?

        public init(snapshotId: [String]? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct RestoreAddressToClassicResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]
        /// The move status for the IP address.
        public let status: Status?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(status: Status? = nil, publicIp: String? = nil) {
            self.status = status
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case publicIp = "publicIp"
        }
    }

    public struct CopyImageResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct DescribeSecurityGroupReferencesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupReferenceSet", location: .body(locationName: "securityGroupReferenceSet"), required: false, type: .structure)
        ]
        /// Information about the VPCs with the referencing security groups.
        public let securityGroupReferenceSet: SecurityGroupReferences?

        public init(securityGroupReferenceSet: SecurityGroupReferences? = nil) {
            self.securityGroupReferenceSet = securityGroupReferenceSet
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupReferenceSet = "securityGroupReferenceSet"
        }
    }

    public struct InstanceStateChangeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStateChange]?

        public init(item: [InstanceStateChange]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct LaunchPermission: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "Group", location: .body(locationName: "group"), required: false, type: .enum)
        ]
        /// The AWS account ID.
        public let userId: String?
        /// The name of the group.
        public let group: PermissionGroup?

        public init(userId: String? = nil, group: PermissionGroup? = nil) {
            self.userId = userId
            self.group = group
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "userId"
            case group = "group"
        }
    }

    public enum ContainerFormat: String, CustomStringConvertible, Codable {
        case ova = "ova"
        public var description: String { return self.rawValue }
    }

    public struct ImportImageResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseType", location: .body(locationName: "licenseType"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .string), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotDetails", location: .body(locationName: "snapshotDetailSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The operating system of the virtual machine.
        public let platform: String?
        /// A brief status of the task.
        public let status: String?
        /// The progress of the task.
        public let progress: String?
        /// The target hypervisor of the import task.
        public let hypervisor: String?
        /// The architecture of the virtual machine.
        public let architecture: String?
        /// The ID of the Amazon Machine Image (AMI) created by the import task.
        public let imageId: String?
        /// The task ID of the import image task.
        public let importTaskId: String?
        /// A detailed status message of the import task.
        public let statusMessage: String?
        /// Information about the snapshots.
        public let snapshotDetails: SnapshotDetailList?
        /// A description of the import task.
        public let description: String?

        public init(licenseType: String? = nil, platform: String? = nil, status: String? = nil, progress: String? = nil, hypervisor: String? = nil, architecture: String? = nil, imageId: String? = nil, importTaskId: String? = nil, statusMessage: String? = nil, snapshotDetails: SnapshotDetailList? = nil, description: String? = nil) {
            self.licenseType = licenseType
            self.platform = platform
            self.status = status
            self.progress = progress
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.statusMessage = statusMessage
            self.snapshotDetails = snapshotDetails
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case licenseType = "licenseType"
            case platform = "platform"
            case status = "status"
            case progress = "progress"
            case hypervisor = "hypervisor"
            case architecture = "architecture"
            case imageId = "imageId"
            case importTaskId = "importTaskId"
            case statusMessage = "statusMessage"
            case snapshotDetails = "snapshotDetailSet"
            case description = "description"
        }
    }

    public struct DescribeVpcPeeringConnectionsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnections", location: .body(locationName: "vpcPeeringConnectionSet"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connections.
        public let vpcPeeringConnections: VpcPeeringConnectionList?

        public init(vpcPeeringConnections: VpcPeeringConnectionList? = nil) {
            self.vpcPeeringConnections = vpcPeeringConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnections = "vpcPeeringConnectionSet"
        }
    }

    public struct DiskImageDetail: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "ImportManifestUrl", location: .body(locationName: "importManifestUrl"), required: true, type: .string), 
            AWSShapeMember(label: "Bytes", location: .body(locationName: "bytes"), required: true, type: .long)
        ]
        /// The disk image format.
        public let format: DiskImageFormat
        /// A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String
        /// The size of the disk image, in GiB.
        public let bytes: Int64

        public init(format: DiskImageFormat, importManifestUrl: String, bytes: Int64) {
            self.format = format
            self.importManifestUrl = importManifestUrl
            self.bytes = bytes
        }

        private enum CodingKeys: String, CodingKey {
            case format = "format"
            case importManifestUrl = "importManifestUrl"
            case bytes = "bytes"
        }
    }

    public struct PrefixList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixListId", location: .body(locationName: "prefixListId"), required: false, type: .string), 
            AWSShapeMember(label: "PrefixListName", location: .body(locationName: "prefixListName"), required: false, type: .string), 
            AWSShapeMember(label: "Cidrs", location: .body(locationName: "cidrSet"), required: false, type: .structure)
        ]
        /// The ID of the prefix.
        public let prefixListId: String?
        /// The name of the prefix.
        public let prefixListName: String?
        /// The IP address range of the AWS service.
        public let cidrs: ValueStringList?

        public init(prefixListId: String? = nil, prefixListName: String? = nil, cidrs: ValueStringList? = nil) {
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
            self.cidrs = cidrs
        }

        private enum CodingKeys: String, CodingKey {
            case prefixListId = "prefixListId"
            case prefixListName = "prefixListName"
            case cidrs = "cidrSet"
        }
    }

    public struct ModifyIdFormatRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", required: true, type: .string), 
            AWSShapeMember(label: "UseLongIds", required: true, type: .boolean)
        ]
        /// The type of resource: instance | reservation | snapshot | volume 
        public let resource: String
        /// Indicate whether the resource should use longer IDs (17-character IDs).
        public let useLongIds: Bool

        public init(resource: String, useLongIds: Bool) {
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case useLongIds = "UseLongIds"
        }
    }

    public struct DescribeTagsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// One or more filters.    key - The tag key.    resource-id - The resource ID.    resource-type - The resource type (customer-gateway | dhcp-options | image | instance | internet-gateway | network-acl | network-interface | reserved-instances | route-table | security-group | snapshot | spot-instances-request | subnet | volume | vpc | vpn-connection | vpn-gateway).    value - The tag value.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case dryRun = "dryRun"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct BundleTask: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "BundleTaskError", location: .body(locationName: "error"), required: false, type: .structure), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Storage", location: .body(locationName: "storage"), required: false, type: .structure), 
            AWSShapeMember(label: "BundleId", location: .body(locationName: "bundleId"), required: false, type: .string)
        ]
        /// The time this task started.
        public let startTime: TimeStamp?
        /// If the task fails, a description of the error.
        public let bundleTaskError: BundleTaskError?
        /// The level of task completion, as a percent (for example, 20%).
        public let progress: String?
        /// The ID of the instance associated with this bundle task.
        public let instanceId: String?
        /// The state of the task.
        public let state: BundleTaskState?
        /// The time of the most recent update for the task.
        public let updateTime: TimeStamp?
        /// The Amazon S3 storage locations.
        public let storage: Storage?
        /// The ID of the bundle task.
        public let bundleId: String?

        public init(startTime: TimeStamp? = nil, bundleTaskError: BundleTaskError? = nil, progress: String? = nil, instanceId: String? = nil, state: BundleTaskState? = nil, updateTime: TimeStamp? = nil, storage: Storage? = nil, bundleId: String? = nil) {
            self.startTime = startTime
            self.bundleTaskError = bundleTaskError
            self.progress = progress
            self.instanceId = instanceId
            self.state = state
            self.updateTime = updateTime
            self.storage = storage
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "startTime"
            case bundleTaskError = "error"
            case progress = "progress"
            case instanceId = "instanceId"
            case state = "state"
            case updateTime = "updateTime"
            case storage = "storage"
            case bundleId = "bundleId"
        }
    }

    public enum SubnetCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        case failing = "failing"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct DetachNetworkInterfaceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: true, type: .string), 
            AWSShapeMember(label: "Force", location: .body(locationName: "force"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let attachmentId: String
        /// Specifies whether to force a detachment.
        public let force: Bool?

        public init(dryRun: Bool? = nil, attachmentId: String, force: Bool? = nil) {
            self.dryRun = dryRun
            self.attachmentId = attachmentId
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case attachmentId = "attachmentId"
            case force = "force"
        }
    }

    public struct DescribeRegionsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Regions", location: .body(locationName: "regionInfo"), required: false, type: .structure)
        ]
        /// Information about one or more regions.
        public let regions: RegionList?

        public init(regions: RegionList? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regionInfo"
        }
    }

    public struct GetConsoleOutputRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct CreateVolumePermissionList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CreateVolumePermission]?

        public init(item: [CreateVolumePermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ZoneNameStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ZoneName", required: false, type: .list)
        ]
        public let zoneName: [String]?

        public init(zoneName: [String]? = nil) {
            self.zoneName = zoneName
        }

        private enum CodingKeys: String, CodingKey {
            case zoneName = "ZoneName"
        }
    }

    public struct PlacementGroupList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PlacementGroup]?

        public init(item: [PlacementGroup]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateVpnConnectionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "CustomerGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string)
        ]
        /// Indicates whether the VPN connection requires static routes. If you are creating a VPN connection for a device that does not support BGP, you must specify true. Default: false 
        public let options: VpnConnectionOptionsSpecification?
        /// The ID of the customer gateway.
        public let customerGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of VPN connection (ipsec.1).
        public let `type`: String
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(options: VpnConnectionOptionsSpecification? = nil, customerGatewayId: String, dryRun: Bool? = nil, type: String, vpnGatewayId: String) {
            self.options = options
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
            self.`type` = `type`
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case options = "options"
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "dryRun"
            case `type` = "Type"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DescribeSpotPriceHistoryResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotPriceHistory", location: .body(locationName: "spotPriceHistorySet"), required: false, type: .structure)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The historical Spot prices.
        public let spotPriceHistory: SpotPriceHistoryList?

        public init(nextToken: String? = nil, spotPriceHistory: SpotPriceHistoryList? = nil) {
            self.nextToken = nextToken
            self.spotPriceHistory = spotPriceHistory
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotPriceHistory = "spotPriceHistorySet"
        }
    }

    public struct CreateSecurityGroupResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string)
        ]
        /// The ID of the security group.
        public let groupId: String?

        public init(groupId: String? = nil) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
        }
    }

    public struct InstanceNetworkInterfaceSpecificationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceNetworkInterfaceSpecification]?

        public init(item: [InstanceNetworkInterfaceSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CancelSpotFleetRequestsSuccessSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [CancelSpotFleetRequestsSuccessItem]?

        public init(item: [CancelSpotFleetRequestsSuccessItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum AllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestprice = "lowestPrice"
        case diversified = "diversified"
        public var description: String { return self.rawValue }
    }

    public struct CreateNatGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "NatGateway", location: .body(locationName: "natGateway"), required: false, type: .structure)
        ]
        /// Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
        public let clientToken: String?
        /// Information about the NAT gateway.
        public let natGateway: NatGateway?

        public init(clientToken: String? = nil, natGateway: NatGateway? = nil) {
            self.clientToken = clientToken
            self.natGateway = natGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case natGateway = "natGateway"
        }
    }

    public struct InstanceStatusDetailsList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStatusDetails]?

        public init(item: [InstanceStatusDetails]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SecurityGroupList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SecurityGroup]?

        public init(item: [SecurityGroup]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum SpotInstanceState: String, CustomStringConvertible, Codable {
        case open = "open"
        case active = "active"
        case closed = "closed"
        case cancelled = "cancelled"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct SpotPlacement: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]
        /// The Availability Zone. [Spot fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
        public let availabilityZone: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for Spot instances.
        public let tenancy: Tenancy?
        /// The name of the placement group (for cluster instances).
        public let groupName: String?

        public init(availabilityZone: String? = nil, tenancy: Tenancy? = nil, groupName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.tenancy = tenancy
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case tenancy = "tenancy"
            case groupName = "groupName"
        }
    }

    public struct Instance: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .boolean), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "dnsName"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceType", location: .body(locationName: "rootDeviceType"), required: false, type: .enum), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceLifecycle", location: .body(locationName: "instanceLifecycle"), required: false, type: .enum), 
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTime", location: .body(locationName: "launchTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "State", location: .body(locationName: "instanceState"), required: false, type: .structure), 
            AWSShapeMember(label: "PublicIpAddress", location: .body(locationName: "ipAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "StateReason", location: .body(locationName: "stateReason"), required: false, type: .structure), 
            AWSShapeMember(label: "StateTransitionReason", location: .body(locationName: "reason"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .enum), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "AmiLaunchIndex", location: .body(locationName: "amiLaunchIndex"), required: false, type: .integer), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .enum)
        ]
        /// The idempotency token you provided when you launched the instance, if applicable.
        public let clientToken: String?
        /// The root device name (for example, /dev/sda1 or /dev/xvda).
        public let rootDeviceName: String?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: Bool?
        /// Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of true means checking is enabled, and false means checking is disabled. The value must be false for the instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
        public let sourceDestCheck: Bool?
        /// The kernel associated with this instance, if applicable.
        public let kernelId: String?
        /// (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.  [EC2-VPC] The Amazon-provided DNS server will resolve Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
        public let privateDnsName: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The private IPv4 address assigned to the instance.
        public let privateIpAddress: String?
        /// The product codes attached to this instance, if applicable.
        public let productCodes: ProductCodeList?
        /// The name of the key pair, if this instance was launched with an associated key pair.
        public let keyName: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The IAM instance profile associated with the instance, if applicable.
        public let iamInstanceProfile: IamInstanceProfile?
        /// (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
        public let publicDnsName: String?
        /// [EC2-VPC] The ID of the VPC in which the instance is running.
        public let vpcId: String?
        /// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// The RAM disk associated with this instance, if applicable.
        public let ramdiskId: String?
        /// Indicates whether this is a Spot instance or a Scheduled Instance.
        public let instanceLifecycle: InstanceLifecycleType?
        /// Any block device mapping entries for the instance.
        public let blockDeviceMappings: InstanceBlockDeviceMappingList?
        /// [EC2-VPC] The ID of the subnet in which the instance is running.
        public let subnetId: String?
        /// The value is Windows for Windows instances; otherwise blank.
        public let platform: PlatformValues?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// If the request is a Spot instance request, the ID of the request.
        public let spotInstanceRequestId: String?
        /// Any tags assigned to the instance.
        public let tags: TagList?
        /// The time the instance was launched.
        public let launchTime: TimeStamp?
        /// The current state of the instance.
        public let state: InstanceState?
        /// The public IPv4 address assigned to the instance, if applicable.
        public let publicIpAddress: String?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?
        /// The reason for the most recent state transition.
        public let stateReason: StateReason?
        /// The reason for the most recent state transition. This might be an empty string.
        public let stateTransitionReason: String?
        /// One or more security groups for the instance.
        public let securityGroups: GroupIdentifierList?
        /// The hypervisor type of the instance.
        public let hypervisor: HypervisorType?
        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// The ID of the AMI used to launch the instance.
        public let imageId: String?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// [EC2-VPC] One or more network interfaces for the instance.
        public let networkInterfaces: InstanceNetworkInterfaceList?
        /// The AMI launch index, which can be used to find this instance in the launch group.
        public let amiLaunchIndex: Int32?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The virtualization type of the instance.
        public let virtualizationType: VirtualizationType?

        public init(clientToken: String? = nil, rootDeviceName: String? = nil, ebsOptimized: Bool? = nil, sourceDestCheck: Bool? = nil, kernelId: String? = nil, privateDnsName: String? = nil, instanceType: InstanceType? = nil, privateIpAddress: String? = nil, productCodes: ProductCodeList? = nil, keyName: String? = nil, instanceId: String? = nil, iamInstanceProfile: IamInstanceProfile? = nil, publicDnsName: String? = nil, vpcId: String? = nil, rootDeviceType: DeviceType? = nil, ramdiskId: String? = nil, instanceLifecycle: InstanceLifecycleType? = nil, blockDeviceMappings: InstanceBlockDeviceMappingList? = nil, subnetId: String? = nil, platform: PlatformValues? = nil, sriovNetSupport: String? = nil, spotInstanceRequestId: String? = nil, tags: TagList? = nil, launchTime: TimeStamp? = nil, state: InstanceState? = nil, publicIpAddress: String? = nil, monitoring: Monitoring? = nil, stateReason: StateReason? = nil, stateTransitionReason: String? = nil, securityGroups: GroupIdentifierList? = nil, hypervisor: HypervisorType? = nil, architecture: ArchitectureValues? = nil, imageId: String? = nil, enaSupport: Bool? = nil, networkInterfaces: InstanceNetworkInterfaceList? = nil, amiLaunchIndex: Int32? = nil, placement: Placement? = nil, virtualizationType: VirtualizationType? = nil) {
            self.clientToken = clientToken
            self.rootDeviceName = rootDeviceName
            self.ebsOptimized = ebsOptimized
            self.sourceDestCheck = sourceDestCheck
            self.kernelId = kernelId
            self.privateDnsName = privateDnsName
            self.instanceType = instanceType
            self.privateIpAddress = privateIpAddress
            self.productCodes = productCodes
            self.keyName = keyName
            self.instanceId = instanceId
            self.iamInstanceProfile = iamInstanceProfile
            self.publicDnsName = publicDnsName
            self.vpcId = vpcId
            self.rootDeviceType = rootDeviceType
            self.ramdiskId = ramdiskId
            self.instanceLifecycle = instanceLifecycle
            self.blockDeviceMappings = blockDeviceMappings
            self.subnetId = subnetId
            self.platform = platform
            self.sriovNetSupport = sriovNetSupport
            self.spotInstanceRequestId = spotInstanceRequestId
            self.tags = tags
            self.launchTime = launchTime
            self.state = state
            self.publicIpAddress = publicIpAddress
            self.monitoring = monitoring
            self.stateReason = stateReason
            self.stateTransitionReason = stateTransitionReason
            self.securityGroups = securityGroups
            self.hypervisor = hypervisor
            self.architecture = architecture
            self.imageId = imageId
            self.enaSupport = enaSupport
            self.networkInterfaces = networkInterfaces
            self.amiLaunchIndex = amiLaunchIndex
            self.placement = placement
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case rootDeviceName = "rootDeviceName"
            case ebsOptimized = "ebsOptimized"
            case sourceDestCheck = "sourceDestCheck"
            case kernelId = "kernelId"
            case privateDnsName = "privateDnsName"
            case instanceType = "instanceType"
            case privateIpAddress = "privateIpAddress"
            case productCodes = "productCodes"
            case keyName = "keyName"
            case instanceId = "instanceId"
            case iamInstanceProfile = "iamInstanceProfile"
            case publicDnsName = "dnsName"
            case vpcId = "vpcId"
            case rootDeviceType = "rootDeviceType"
            case ramdiskId = "ramdiskId"
            case instanceLifecycle = "instanceLifecycle"
            case blockDeviceMappings = "blockDeviceMapping"
            case subnetId = "subnetId"
            case platform = "platform"
            case sriovNetSupport = "sriovNetSupport"
            case spotInstanceRequestId = "spotInstanceRequestId"
            case tags = "tagSet"
            case launchTime = "launchTime"
            case state = "instanceState"
            case publicIpAddress = "ipAddress"
            case monitoring = "monitoring"
            case stateReason = "stateReason"
            case stateTransitionReason = "reason"
            case securityGroups = "groupSet"
            case hypervisor = "hypervisor"
            case architecture = "architecture"
            case imageId = "imageId"
            case enaSupport = "enaSupport"
            case networkInterfaces = "networkInterfaceSet"
            case amiLaunchIndex = "amiLaunchIndex"
            case placement = "placement"
            case virtualizationType = "virtualizationType"
        }
    }

    public enum ReportStatusType: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        public var description: String { return self.rawValue }
    }

    public struct AttachVolumeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string)
        ]
        /// The device name to expose to the instance (for example, /dev/sdh or xvdh).
        public let device: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
        public let volumeId: String

        public init(device: String, dryRun: Bool? = nil, instanceId: String, volumeId: String) {
            self.device = device
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
        }
    }

    public struct DisableVpcClassicLinkResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public enum TelemetryStatus: String, CustomStringConvertible, Codable {
        case up = "UP"
        case down = "DOWN"
        public var description: String { return self.rawValue }
    }

    public struct AcceptVpcPeeringConnectionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct DescribeFlowLogsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "FlowLogIds", location: .body(locationName: "FlowLogId"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL)  
        public let filter: FilterList?
        /// One or more flow log IDs.
        public let flowLogIds: ValueStringList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. You cannot specify this parameter and the flow log IDs parameter in the same request.
        public let maxResults: Int32?

        public init(filter: FilterList? = nil, flowLogIds: ValueStringList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filter = filter
            self.flowLogIds = flowLogIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case flowLogIds = "FlowLogId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct HostInstance: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The instance type size (for example, m3.medium) of the running instance.
        public let instanceType: String?
        /// the IDs of instances that are running on the Dedicated Host.
        public let instanceId: String?

        public init(instanceType: String? = nil, instanceId: String? = nil) {
            self.instanceType = instanceType
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case instanceId = "instanceId"
        }
    }

    public enum NatGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case failed = "failed"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSpotDatafeedSubscriptionResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotDatafeedSubscription", location: .body(locationName: "spotDatafeedSubscription"), required: false, type: .structure)
        ]
        /// The Spot instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public struct SpotFleetMonitoring: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", location: .body(locationName: "enabled"), required: false, type: .boolean)
        ]
        /// Enables monitoring for the instance. Default: false 
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct Storage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3", required: false, type: .structure)
        ]
        /// An Amazon S3 storage location.
        public let s3: S3Storage?

        public init(s3: S3Storage? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct BlockDeviceMappingRequestList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMapping", required: false, type: .list)
        ]
        public let blockDeviceMapping: [BlockDeviceMapping]?

        public init(blockDeviceMapping: [BlockDeviceMapping]? = nil) {
            self.blockDeviceMapping = blockDeviceMapping
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMapping = "BlockDeviceMapping"
        }
    }

    public enum VirtualizationType: String, CustomStringConvertible, Codable {
        case hvm = "hvm"
        case paravirtual = "paravirtual"
        public var description: String { return self.rawValue }
    }

    public struct ImportInstanceLaunchSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure), 
            AWSShapeMember(label: "GroupIds", location: .body(locationName: "GroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "AdditionalInfo", location: .body(locationName: "additionalInfo"), required: false, type: .string), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "GroupName"), required: false, type: .structure)
        ]
        /// [EC2-VPC] An available IP address from the IP address range of the subnet.
        public let privateIpAddress: String?
        /// [EC2-VPC] The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The user data to make available to the instance. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let userData: UserData?
        /// One or more security group IDs.
        public let groupIds: SecurityGroupIdStringList?
        /// The architecture of the instance.
        public let architecture: ArchitectureValues?
        /// Reserved.
        public let additionalInfo: String?
        /// The placement information for the instance.
        public let placement: Placement?
        /// Indicates whether monitoring is enabled.
        public let monitoring: Bool?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The instance type. For more information about the instance types that you can import, see Instance Types in the VM Import/Export User Guide.
        public let instanceType: InstanceType?
        /// One or more security group names.
        public let groupNames: SecurityGroupStringList?

        public init(privateIpAddress: String? = nil, subnetId: String? = nil, userData: UserData? = nil, groupIds: SecurityGroupIdStringList? = nil, architecture: ArchitectureValues? = nil, additionalInfo: String? = nil, placement: Placement? = nil, monitoring: Bool? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceType: InstanceType? = nil, groupNames: SecurityGroupStringList? = nil) {
            self.privateIpAddress = privateIpAddress
            self.subnetId = subnetId
            self.userData = userData
            self.groupIds = groupIds
            self.architecture = architecture
            self.additionalInfo = additionalInfo
            self.placement = placement
            self.monitoring = monitoring
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
            case subnetId = "subnetId"
            case userData = "userData"
            case groupIds = "GroupId"
            case architecture = "architecture"
            case additionalInfo = "additionalInfo"
            case placement = "placement"
            case monitoring = "monitoring"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case instanceType = "instanceType"
            case groupNames = "GroupName"
        }
    }

    public struct GroupIdentifierList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [GroupIdentifier]?

        public init(item: [GroupIdentifier]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReservedInstancesList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstances]?

        public init(item: [ReservedInstances]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct IpPermissionList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IpPermission]?

        public init(item: [IpPermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct Ipv6RangeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Ipv6Range]?

        public init(item: [Ipv6Range]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SpotInstanceStatus: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "UpdateTime", location: .body(locationName: "updateTime"), required: false, type: .timestamp)
        ]
        /// The description for the status code.
        public let message: String?
        /// The status code. For a list of status codes, see Spot Bid Status Codes in the Amazon Elastic Compute Cloud User Guide.
        public let code: String?
        /// The date and time of the most recent status update, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let updateTime: TimeStamp?

        public init(message: String? = nil, code: String? = nil, updateTime: TimeStamp? = nil) {
            self.message = message
            self.code = code
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case code = "code"
            case updateTime = "updateTime"
        }
    }

    public struct InstanceStatusEventList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceStatusEvent]?

        public init(item: [InstanceStatusEvent]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SecurityGroupStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroup", required: false, type: .list)
        ]
        public let securityGroup: [String]?

        public init(securityGroup: [String]? = nil) {
            self.securityGroup = securityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroup = "SecurityGroup"
        }
    }

    public struct InstanceIpv6Address: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6Address", location: .body(locationName: "ipv6Address"), required: false, type: .string)
        ]
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
        }
    }

    public struct ImportSnapshotTaskList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImportSnapshotTask]?

        public init(item: [ImportSnapshotTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ConversionTaskState: String, CustomStringConvertible, Codable {
        case active = "active"
        case cancelling = "cancelling"
        case cancelled = "cancelled"
        case completed = "completed"
        public var description: String { return self.rawValue }
    }

    public struct StaleIpPermission: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "prefixListIds"), required: false, type: .structure), 
            AWSShapeMember(label: "UserIdGroupPairs", location: .body(locationName: "groups"), required: false, type: .structure), 
            AWSShapeMember(label: "IpRanges", location: .body(locationName: "ipRanges"), required: false, type: .structure), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string)
        ]
        /// One or more prefix list IDs for an AWS service. Not applicable for stale security group rules.
        public let prefixListIds: PrefixListIdSet?
        /// One or more security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
        public let userIdGroupPairs: UserIdGroupPairSet?
        /// One or more IP ranges. Not applicable for stale security group rules.
        public let ipRanges: IpRanges?
        /// The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
        public let fromPort: Int32?
        /// The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types. 
        public let toPort: Int32?
        /// The IP protocol name (for tcp, udp, and icmp) or number (see Protocol Numbers).
        public let ipProtocol: String?

        public init(prefixListIds: PrefixListIdSet? = nil, userIdGroupPairs: UserIdGroupPairSet? = nil, ipRanges: IpRanges? = nil, fromPort: Int32? = nil, toPort: Int32? = nil, ipProtocol: String? = nil) {
            self.prefixListIds = prefixListIds
            self.userIdGroupPairs = userIdGroupPairs
            self.ipRanges = ipRanges
            self.fromPort = fromPort
            self.toPort = toPort
            self.ipProtocol = ipProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case prefixListIds = "prefixListIds"
            case userIdGroupPairs = "groups"
            case ipRanges = "ipRanges"
            case fromPort = "fromPort"
            case toPort = "toPort"
            case ipProtocol = "ipProtocol"
        }
    }

    public struct IamInstanceProfile: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The ID of the instance profile.
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
        }
    }

    public struct DescribeSecurityGroupsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroupInfo"), required: false, type: .structure)
        ]
        /// Information about one or more security groups.
        public let securityGroups: SecurityGroupList?

        public init(securityGroups: SecurityGroupList? = nil) {
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroups = "securityGroupInfo"
        }
    }

    public struct Purchase: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpfrontPrice", location: .body(locationName: "upfrontPrice"), required: false, type: .string), 
            AWSShapeMember(label: "HostIdSet", location: .body(locationName: "hostIdSet"), required: false, type: .structure), 
            AWSShapeMember(label: "PaymentOption", location: .body(locationName: "paymentOption"), required: false, type: .enum), 
            AWSShapeMember(label: "HourlyPrice", location: .body(locationName: "hourlyPrice"), required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "HostReservationId", location: .body(locationName: "hostReservationId"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .integer), 
            AWSShapeMember(label: "InstanceFamily", location: .body(locationName: "instanceFamily"), required: false, type: .string)
        ]
        /// The upfront price of the reservation.
        public let upfrontPrice: String?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        public let hostIdSet: ResponseHostIdSet?
        /// The payment option for the reservation.
        public let paymentOption: PaymentOption?
        /// The hourly price of the reservation per hour.
        public let hourlyPrice: String?
        /// The currency in which the UpfrontPrice and HourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The ID of the reservation.
        public let hostReservationId: String?
        /// The duration of the reservation's term in seconds.
        public let duration: Int32?
        /// The instance family on the Dedicated Host that the reservation can be associated with.
        public let instanceFamily: String?

        public init(upfrontPrice: String? = nil, hostIdSet: ResponseHostIdSet? = nil, paymentOption: PaymentOption? = nil, hourlyPrice: String? = nil, currencyCode: CurrencyCodeValues? = nil, hostReservationId: String? = nil, duration: Int32? = nil, instanceFamily: String? = nil) {
            self.upfrontPrice = upfrontPrice
            self.hostIdSet = hostIdSet
            self.paymentOption = paymentOption
            self.hourlyPrice = hourlyPrice
            self.currencyCode = currencyCode
            self.hostReservationId = hostReservationId
            self.duration = duration
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case upfrontPrice = "upfrontPrice"
            case hostIdSet = "hostIdSet"
            case paymentOption = "paymentOption"
            case hourlyPrice = "hourlyPrice"
            case currencyCode = "currencyCode"
            case hostReservationId = "hostReservationId"
            case duration = "duration"
            case instanceFamily = "instanceFamily"
        }
    }

    public struct RequestSpotFleetRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestConfig", location: .body(locationName: "spotFleetRequestConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The configuration for the Spot fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(spotFleetRequestConfig: SpotFleetRequestConfigData, dryRun: Bool? = nil) {
            self.spotFleetRequestConfig = spotFleetRequestConfig
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestConfig = "spotFleetRequestConfig"
            case dryRun = "dryRun"
        }
    }

    public enum VpcState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public struct ReservedInstancesOffering: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringCharges", location: .body(locationName: "recurringCharges"), required: false, type: .structure), 
            AWSShapeMember(label: "UsagePrice", location: .body(locationName: "usagePrice"), required: false, type: .float), 
            AWSShapeMember(label: "InstanceTenancy", location: .body(locationName: "instanceTenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "PricingDetails", location: .body(locationName: "pricingDetailsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "ProductDescription", location: .body(locationName: "productDescription"), required: false, type: .enum), 
            AWSShapeMember(label: "Marketplace", location: .body(locationName: "marketplace"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "OfferingClass", location: .body(locationName: "offeringClass"), required: false, type: .enum), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum), 
            AWSShapeMember(label: "ReservedInstancesOfferingId", location: .body(locationName: "reservedInstancesOfferingId"), required: false, type: .string), 
            AWSShapeMember(label: "Duration", location: .body(locationName: "duration"), required: false, type: .long), 
            AWSShapeMember(label: "Scope", location: .body(locationName: "scope"), required: false, type: .enum), 
            AWSShapeMember(label: "FixedPrice", location: .body(locationName: "fixedPrice"), required: false, type: .float)
        ]
        /// The recurring charge tag assigned to the resource.
        public let recurringCharges: RecurringChargesList?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The pricing details of the Reserved Instance offering.
        public let pricingDetails: PricingDetailsList?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is true.
        public let marketplace: Bool?
        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// If convertible it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If standard, it is not possible to perform an exchange.
        public let offeringClass: OfferingClassType?
        /// The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The ID of the Reserved Instance offering. This is the offering ID used in GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
        public let reservedInstancesOfferingId: String?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// Whether the Reserved Instance is applied to instances in a region or an Availability Zone.
        public let scope: Scope?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?

        public init(recurringCharges: RecurringChargesList? = nil, usagePrice: Float? = nil, instanceTenancy: Tenancy? = nil, pricingDetails: PricingDetailsList? = nil, instanceType: InstanceType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, marketplace: Bool? = nil, availabilityZone: String? = nil, offeringClass: OfferingClassType? = nil, currencyCode: CurrencyCodeValues? = nil, reservedInstancesOfferingId: String? = nil, duration: Int64? = nil, scope: Scope? = nil, fixedPrice: Float? = nil) {
            self.recurringCharges = recurringCharges
            self.usagePrice = usagePrice
            self.instanceTenancy = instanceTenancy
            self.pricingDetails = pricingDetails
            self.instanceType = instanceType
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.marketplace = marketplace
            self.availabilityZone = availabilityZone
            self.offeringClass = offeringClass
            self.currencyCode = currencyCode
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
            self.duration = duration
            self.scope = scope
            self.fixedPrice = fixedPrice
        }

        private enum CodingKeys: String, CodingKey {
            case recurringCharges = "recurringCharges"
            case usagePrice = "usagePrice"
            case instanceTenancy = "instanceTenancy"
            case pricingDetails = "pricingDetailsSet"
            case instanceType = "instanceType"
            case offeringType = "offeringType"
            case productDescription = "productDescription"
            case marketplace = "marketplace"
            case availabilityZone = "availabilityZone"
            case offeringClass = "offeringClass"
            case currencyCode = "currencyCode"
            case reservedInstancesOfferingId = "reservedInstancesOfferingId"
            case duration = "duration"
            case scope = "scope"
            case fixedPrice = "fixedPrice"
        }
    }

    public struct InstanceCount: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: false, type: .integer)
        ]
        /// The states of the listed Reserved Instances.
        public let state: ListingState?
        /// The number of listed Reserved Instances in the state specified by the state.
        public let instanceCount: Int32?

        public init(state: ListingState? = nil, instanceCount: Int32? = nil) {
            self.state = state
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case instanceCount = "instanceCount"
        }
    }

    public struct DescribeNetworkInterfacesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceIds", location: .body(locationName: "NetworkInterfaceId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "filter"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more network interface IDs. Default: Describes all your network interfaces.
        public let networkInterfaceIds: NetworkInterfaceIdList?
        /// One or more filters.    addresses.private-ip-address - The private IPv4 addresses associated with the network interface.    addresses.primary - Whether the private IPv4 address is the primary IP address associated with the network interface.     addresses.association.public-ip - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).    addresses.association.owner-id - The owner ID of the addresses associated with the network interface.    association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    association.public-dns-name - The public DNS name for the network interface (IPv4).    attachment.attachment-id - The ID of the interface attachment.    attachment.attach.time - The time that the network interface was attached to an instance.    attachment.delete-on-termination - Indicates whether the attachment is deleted when an instance is terminated.    attachment.device-index - The device index to which the network interface is attached.    attachment.instance-id - The ID of the instance to which the network interface is attached.    attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    attachment.nat-gateway-id - The ID of the NAT gateway to which the network interface is attached.    attachment.status - The status of the attachment (attaching | attached | detaching | detached).    availability-zone - The Availability Zone of the network interface.    description - The description of the network interface.    group-id - The ID of a security group associated with the network interface.    group-name - The name of a security group associated with the network interface.    ipv6-addresses.ipv6-address - An IPv6 address associated with the network interface.    mac-address - The MAC address of the network interface.    network-interface-id - The ID of the network interface.    owner-id - The AWS account ID of the network interface owner.    private-ip-address - The private IPv4 address or addresses of the network interface.    private-dns-name - The private DNS name of the network interface (IPv4).    requester-id - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).    requester-managed - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).    source-desk-check - Indicates whether the network interface performs source/destination checking. A value of true means checking is enabled, and false means checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.     status - The status of the network interface. If the network interface is not attached to an instance, the status is available; if a network interface is attached to an instance the status is in-use.    subnet-id - The ID of the subnet for the network interface.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    vpc-id - The ID of the VPC for the network interface.  
        public let filters: FilterList?

        public init(dryRun: Bool? = nil, networkInterfaceIds: NetworkInterfaceIdList? = nil, filters: FilterList? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceIds = networkInterfaceIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceIds = "NetworkInterfaceId"
            case filters = "filter"
        }
    }

    public enum GatewayType: String, CustomStringConvertible, Codable {
        case ipsec1 = "ipsec.1"
        public var description: String { return self.rawValue }
    }

    public struct CreateNetworkAclResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkAcl", location: .body(locationName: "networkAcl"), required: false, type: .structure)
        ]
        /// Information about the network ACL.
        public let networkAcl: NetworkAcl?

        public init(networkAcl: NetworkAcl? = nil) {
            self.networkAcl = networkAcl
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcl = "networkAcl"
        }
    }

    public struct InstanceBlockDeviceMapping: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string)
        ]
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDevice?
        /// The device name exposed to the instance (for example, /dev/sdh or xvdh).
        public let deviceName: String?

        public init(ebs: EbsInstanceBlockDevice? = nil, deviceName: String? = nil) {
            self.ebs = ebs
            self.deviceName = deviceName
        }

        private enum CodingKeys: String, CodingKey {
            case ebs = "ebs"
            case deviceName = "deviceName"
        }
    }

    public struct VolumeStatusAction: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: false, type: .string), 
            AWSShapeMember(label: "EventId", location: .body(locationName: "eventId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The code identifying the operation, for example, enable-volume-io.
        public let code: String?
        /// The event type associated with this operation.
        public let eventType: String?
        /// The ID of the event associated with this operation.
        public let eventId: String?
        /// A description of the operation.
        public let description: String?

        public init(code: String? = nil, eventType: String? = nil, eventId: String? = nil, description: String? = nil) {
            self.code = code
            self.eventType = eventType
            self.eventId = eventId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case eventType = "eventType"
            case eventId = "eventId"
            case description = "description"
        }
    }

    public struct InstanceMonitoringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceMonitoring]?

        public init(item: [InstanceMonitoring]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NetworkInterfaceList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkInterface]?

        public init(item: [NetworkInterface]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateReservedInstancesListingRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PriceSchedules", location: .body(locationName: "priceSchedules"), required: true, type: .structure), 
            AWSShapeMember(label: "InstanceCount", location: .body(locationName: "instanceCount"), required: true, type: .integer), 
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: true, type: .string)
        ]
        /// A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.
        public let priceSchedules: PriceScheduleSpecificationList
        /// The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.
        public let instanceCount: Int32
        /// The ID of the active Standard Reserved Instance.
        public let reservedInstancesId: String
        /// Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String

        public init(priceSchedules: PriceScheduleSpecificationList, instanceCount: Int32, reservedInstancesId: String, clientToken: String) {
            self.priceSchedules = priceSchedules
            self.instanceCount = instanceCount
            self.reservedInstancesId = reservedInstancesId
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case priceSchedules = "priceSchedules"
            case instanceCount = "instanceCount"
            case reservedInstancesId = "reservedInstancesId"
            case clientToken = "clientToken"
        }
    }

    public struct GroupIds: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeRouteTablesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTables", location: .body(locationName: "routeTableSet"), required: false, type: .structure)
        ]
        /// Information about one or more route tables.
        public let routeTables: RouteTableList?

        public init(routeTables: RouteTableList? = nil) {
            self.routeTables = routeTables
        }

        private enum CodingKeys: String, CodingKey {
            case routeTables = "routeTableSet"
        }
    }

    public struct AssociateIamInstanceProfileResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public enum ExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable {
        case notermination = "noTermination"
        case `default` = "default"
        public var description: String { return self.rawValue }
    }

    public struct DhcpOptions: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", location: .body(locationName: "dhcpOptionsId"), required: false, type: .string), 
            AWSShapeMember(label: "DhcpConfigurations", location: .body(locationName: "dhcpConfigurationSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// The ID of the set of DHCP options.
        public let dhcpOptionsId: String?
        /// One or more DHCP options in the set.
        public let dhcpConfigurations: DhcpConfigurationList?
        /// Any tags assigned to the DHCP options set.
        public let tags: TagList?

        public init(dhcpOptionsId: String? = nil, dhcpConfigurations: DhcpConfigurationList? = nil, tags: TagList? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dhcpConfigurations = dhcpConfigurations
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "dhcpOptionsId"
            case dhcpConfigurations = "dhcpConfigurationSet"
            case tags = "tagSet"
        }
    }

    public struct DescribeClassicLinkInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", location: .body(locationName: "instancesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about one or more linked EC2-Classic instances.
        public let instances: ClassicLinkInstanceList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instances: ClassicLinkInstanceList? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instancesSet"
            case nextToken = "nextToken"
        }
    }

    public struct UserIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", required: false, type: .list)
        ]
        public let userId: [String]?

        public init(userId: [String]? = nil) {
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
        }
    }

    public enum InstanceAttributeName: String, CustomStringConvertible, Codable {
        case instancetype = "instanceType"
        case kernel = "kernel"
        case ramdisk = "ramdisk"
        case userdata = "userData"
        case disableapitermination = "disableApiTermination"
        case instanceinitiatedshutdownbehavior = "instanceInitiatedShutdownBehavior"
        case rootdevicename = "rootDeviceName"
        case blockdevicemapping = "blockDeviceMapping"
        case productcodes = "productCodes"
        case sourcedestcheck = "sourceDestCheck"
        case groupset = "groupSet"
        case ebsoptimized = "ebsOptimized"
        case sriovnetsupport = "sriovNetSupport"
        case enasupport = "enaSupport"
        public var description: String { return self.rawValue }
    }

    public struct CopyImageRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: false, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "SourceImageId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when encrypting the snapshots of an image during a copy operation. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef. The specified CMK must exist in the region that the snapshot is being copied to. If a KmsKeyId is specified, the Encrypted flag must also be set.
        public let kmsKeyId: String?
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon Elastic Compute Cloud User Guide.
        public let clientToken: String?
        /// The name of the region that contains the AMI to copy.
        public let sourceRegion: String
        /// The name of the new AMI in the destination region.
        public let name: String
        /// Specifies whether the destination snapshots of the copied image should be encrypted. The default CMK for EBS is used unless a non-default AWS Key Management Service (AWS KMS) CMK is specified with KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The ID of the AMI to copy.
        public let sourceImageId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A description for the new AMI in the destination region.
        public let description: String?

        public init(kmsKeyId: String? = nil, clientToken: String? = nil, sourceRegion: String, name: String, encrypted: Bool? = nil, sourceImageId: String, dryRun: Bool? = nil, description: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.clientToken = clientToken
            self.sourceRegion = sourceRegion
            self.name = name
            self.encrypted = encrypted
            self.sourceImageId = sourceImageId
            self.dryRun = dryRun
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case clientToken = "ClientToken"
            case sourceRegion = "SourceRegion"
            case name = "Name"
            case encrypted = "encrypted"
            case sourceImageId = "SourceImageId"
            case dryRun = "dryRun"
            case description = "Description"
        }
    }

    public struct DescribeNetworkAclsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclIds", location: .body(locationName: "NetworkAclId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more network ACL IDs. Default: Describes all your network ACLs.
        public let networkAclIds: ValueStringList?
        /// One or more filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.egress - Indicates whether the entry applies to egress traffic.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.rule-number - The number of an entry (in other words, rule) in the ACL's set of entries.    network-acl-id - The ID of the network ACL.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    vpc-id - The ID of the VPC for the network ACL.  
        public let filters: FilterList?

        public init(dryRun: Bool? = nil, networkAclIds: ValueStringList? = nil, filters: FilterList? = nil) {
            self.dryRun = dryRun
            self.networkAclIds = networkAclIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkAclIds = "NetworkAclId"
            case filters = "Filter"
        }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case add = "add"
        case remove = "remove"
        public var description: String { return self.rawValue }
    }

    public enum ListingStatus: String, CustomStringConvertible, Codable {
        case active = "active"
        case pending = "pending"
        case cancelled = "cancelled"
        case closed = "closed"
        public var description: String { return self.rawValue }
    }

    public struct VpcAttachmentList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcAttachment]?

        public init(item: [VpcAttachment]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TerminateInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminatingInstances", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// Information about one or more terminated instances.
        public let terminatingInstances: InstanceStateChangeList?

        public init(terminatingInstances: InstanceStateChangeList? = nil) {
            self.terminatingInstances = terminatingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case terminatingInstances = "instancesSet"
        }
    }

    public struct CreateVolumeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagSpecifications", location: .body(locationName: "TagSpecification"), required: false, type: .structure), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum), 
            AWSShapeMember(label: "Size", required: false, type: .integer), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string)
        ]
        /// The tags to apply to the volume during creation.
        public let tagSpecifications: TagSpecificationList?
        /// The volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes. Default: standard 
        public let volumeType: VolumeType?
        /// The size of the volume, in GiBs. Constraints: 1-16384 for gp2, 4-16384 for io1, 500-16384 for st1, 500-16384 for sc1, and 1-1024 for standard. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let size: Int32?
        /// Specifies whether the volume should be encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or vice versa. If your AMI uses encrypted volumes, you can only launch it on supported instance types. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The snapshot from which to create the volume.
        public let snapshotId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Only valid for Provisioned IOPS SSD volumes. The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 50 IOPS/GiB. Constraint: Range is 100 to 20000 for Provisioned IOPS SSD volumes 
        public let iops: Int32?
        /// The Availability Zone in which to create the volume. Use DescribeAvailabilityZones to list the Availability Zones that are currently available to you.
        public let availabilityZone: String
        /// The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef. If a KmsKeyId is specified, the Encrypted flag must also be set.
        public let kmsKeyId: String?

        public init(tagSpecifications: TagSpecificationList? = nil, volumeType: VolumeType? = nil, size: Int32? = nil, encrypted: Bool? = nil, snapshotId: String? = nil, dryRun: Bool? = nil, iops: Int32? = nil, availabilityZone: String, kmsKeyId: String? = nil) {
            self.tagSpecifications = tagSpecifications
            self.volumeType = volumeType
            self.size = size
            self.encrypted = encrypted
            self.snapshotId = snapshotId
            self.dryRun = dryRun
            self.iops = iops
            self.availabilityZone = availabilityZone
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case tagSpecifications = "TagSpecification"
            case volumeType = "VolumeType"
            case size = "Size"
            case encrypted = "encrypted"
            case snapshotId = "SnapshotId"
            case dryRun = "dryRun"
            case iops = "Iops"
            case availabilityZone = "AvailabilityZone"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public enum RouteState: String, CustomStringConvertible, Codable {
        case active = "active"
        case blackhole = "blackhole"
        public var description: String { return self.rawValue }
    }

    public struct DescribeImportSnapshotTasksRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskIds", location: .body(locationName: "ImportTaskId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters.
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A token that indicates the next page of results.
        public let nextToken: String?
        /// A list of import snapshot task IDs.
        public let importTaskIds: ImportTaskIdList?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, importTaskIds: ImportTaskIdList? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
        }
    }

    public struct DisassociateSubnetCidrBlockResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure)
        ]
        /// The ID of the subnet.
        public let subnetId: String?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?

        public init(subnetId: String? = nil, ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil) {
            self.subnetId = subnetId
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
        }
    }

    public struct ReservedInstanceReservationValueSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstanceReservationValue]?

        public init(item: [ReservedInstanceReservationValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AllocateAddressResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .enum), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string)
        ]
        /// [EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
        public let allocationId: String?
        /// Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
        public let domain: DomainType?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(allocationId: String? = nil, domain: DomainType? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.domain = domain
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "allocationId"
            case domain = "domain"
            case publicIp = "publicIp"
        }
    }

    public struct VolumeModification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OriginalIops", location: .body(locationName: "originalIops"), required: false, type: .integer), 
            AWSShapeMember(label: "ModificationState", location: .body(locationName: "modificationState"), required: false, type: .enum), 
            AWSShapeMember(label: "OriginalSize", location: .body(locationName: "originalSize"), required: false, type: .integer), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .long), 
            AWSShapeMember(label: "VolumeId", location: .body(locationName: "volumeId"), required: false, type: .string), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "TargetVolumeType", location: .body(locationName: "targetVolumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "TargetIops", location: .body(locationName: "targetIops"), required: false, type: .integer), 
            AWSShapeMember(label: "OriginalVolumeType", location: .body(locationName: "originalVolumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "TargetSize", location: .body(locationName: "targetSize"), required: false, type: .integer), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// Modification start time 
        public let startTime: TimeStamp?
        /// Original IOPS rate of the volume being modified.
        public let originalIops: Int32?
        /// Current state of modification. Modification state is null for unmodified volumes. 
        public let modificationState: VolumeModificationState?
        /// Original size of the volume being modified.
        public let originalSize: Int32?
        /// Modification progress from 0 to 100%.
        public let progress: Int64?
        /// ID of the volume being modified.
        public let volumeId: String?
        /// Modification completion or failure time.
        public let endTime: TimeStamp?
        /// Target EBS volume type of the volume being modified.
        public let targetVolumeType: VolumeType?
        /// Target IOPS rate of the volume being modified.
        public let targetIops: Int32?
        /// Original EBS volume type of the volume being modified.
        public let originalVolumeType: VolumeType?
        /// Target size of the volume being modified.
        public let targetSize: Int32?
        /// Generic status message on modification progress or failure.
        public let statusMessage: String?

        public init(startTime: TimeStamp? = nil, originalIops: Int32? = nil, modificationState: VolumeModificationState? = nil, originalSize: Int32? = nil, progress: Int64? = nil, volumeId: String? = nil, endTime: TimeStamp? = nil, targetVolumeType: VolumeType? = nil, targetIops: Int32? = nil, originalVolumeType: VolumeType? = nil, targetSize: Int32? = nil, statusMessage: String? = nil) {
            self.startTime = startTime
            self.originalIops = originalIops
            self.modificationState = modificationState
            self.originalSize = originalSize
            self.progress = progress
            self.volumeId = volumeId
            self.endTime = endTime
            self.targetVolumeType = targetVolumeType
            self.targetIops = targetIops
            self.originalVolumeType = originalVolumeType
            self.targetSize = targetSize
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "startTime"
            case originalIops = "originalIops"
            case modificationState = "modificationState"
            case originalSize = "originalSize"
            case progress = "progress"
            case volumeId = "volumeId"
            case endTime = "endTime"
            case targetVolumeType = "targetVolumeType"
            case targetIops = "targetIops"
            case originalVolumeType = "originalVolumeType"
            case targetSize = "targetSize"
            case statusMessage = "statusMessage"
        }
    }

    public struct UserBucket: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "S3Key", required: false, type: .string)
        ]
        /// The name of the S3 bucket where the disk image is located.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
        }
    }

    public struct AssociateDhcpOptionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DhcpOptionsId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
        public let dhcpOptionsId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dhcpOptionsId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun = "dryRun"
        }
    }

    public struct CreateSnapshotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS volume.
        public let volumeId: String
        /// A description for the snapshot.
        public let description: String?

        public init(dryRun: Bool? = nil, volumeId: String, description: String? = nil) {
            self.dryRun = dryRun
            self.volumeId = volumeId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case volumeId = "VolumeId"
            case description = "Description"
        }
    }

    public struct HostReservationIdSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeIdFormatRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", required: false, type: .string)
        ]
        /// The type of resource: instance | reservation | snapshot | volume 
        public let resource: String?

        public init(resource: String? = nil) {
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
        }
    }

    public struct HostInstanceList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [HostInstance]?

        public init(item: [HostInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeHostReservationsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostReservationIdSet", required: false, type: .structure), 
            AWSShapeMember(label: "Filter", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more host reservation IDs.
        public let hostReservationIdSet: HostReservationIdSet?
        /// One or more filters.    instance-family - The instance family (e.g., m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).  
        public let filter: FilterList?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500; if maxResults is given a larger value than 500, you will receive an error.
        public let maxResults: Int32?

        public init(hostReservationIdSet: HostReservationIdSet? = nil, filter: FilterList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.hostReservationIdSet = hostReservationIdSet
            self.filter = filter
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case hostReservationIdSet = "HostReservationIdSet"
            case filter = "Filter"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetHostReservationPurchasePreviewRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIdSet", required: true, type: .structure), 
            AWSShapeMember(label: "OfferingId", required: true, type: .string)
        ]
        /// The ID/s of the Dedicated Host/s that the reservation will be associated with.
        public let hostIdSet: RequestHostIdSet
        /// The offering ID of the reservation.
        public let offeringId: String

        public init(hostIdSet: RequestHostIdSet, offeringId: String) {
            self.hostIdSet = hostIdSet
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case hostIdSet = "HostIdSet"
            case offeringId = "OfferingId"
        }
    }

    public struct ActiveInstance: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceHealth", location: .body(locationName: "instanceHealth"), required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "SpotInstanceRequestId", location: .body(locationName: "spotInstanceRequestId"), required: false, type: .string)
        ]
        /// The instance type.
        public let instanceType: String?
        /// The health status of the instance. If the status of either the instance status check or the system status check is impaired, the health status of the instance is unhealthy. Otherwise, the health status is healthy.
        public let instanceHealth: InstanceHealthStatus?
        /// The ID of the instance.
        public let instanceId: String?
        /// The ID of the Spot instance request.
        public let spotInstanceRequestId: String?

        public init(instanceType: String? = nil, instanceHealth: InstanceHealthStatus? = nil, instanceId: String? = nil, spotInstanceRequestId: String? = nil) {
            self.instanceType = instanceType
            self.instanceHealth = instanceHealth
            self.instanceId = instanceId
            self.spotInstanceRequestId = spotInstanceRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case instanceHealth = "instanceHealth"
            case instanceId = "instanceId"
            case spotInstanceRequestId = "spotInstanceRequestId"
        }
    }

    public struct DescribeMovingAddressesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MovingAddressStatuses", location: .body(locationName: "movingAddressStatusSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The status for each Elastic IP address.
        public let movingAddressStatuses: MovingAddressStatusSet?

        public init(nextToken: String? = nil, movingAddressStatuses: MovingAddressStatusSet? = nil) {
            self.nextToken = nextToken
            self.movingAddressStatuses = movingAddressStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case movingAddressStatuses = "movingAddressStatusSet"
        }
    }

    public struct ExportToS3Task: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Key", location: .body(locationName: "s3Key"), required: false, type: .string), 
            AWSShapeMember(label: "ContainerFormat", location: .body(locationName: "containerFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageFormat", location: .body(locationName: "diskImageFormat"), required: false, type: .enum)
        ]
        /// The encryption key for your S3 bucket.
        public let s3Key: String?
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?

        public init(s3Key: String? = nil, containerFormat: ContainerFormat? = nil, s3Bucket: String? = nil, diskImageFormat: DiskImageFormat? = nil) {
            self.s3Key = s3Key
            self.containerFormat = containerFormat
            self.s3Bucket = s3Bucket
            self.diskImageFormat = diskImageFormat
        }

        private enum CodingKeys: String, CodingKey {
            case s3Key = "s3Key"
            case containerFormat = "containerFormat"
            case s3Bucket = "s3Bucket"
            case diskImageFormat = "diskImageFormat"
        }
    }

    public enum VpcAttributeName: String, CustomStringConvertible, Codable {
        case enablednssupport = "enableDnsSupport"
        case enablednshostnames = "enableDnsHostnames"
        public var description: String { return self.rawValue }
    }

    public struct ValueStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VpcAttachment: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// The current state of the attachment.
        public let state: AttachmentStatus?

        public init(vpcId: String? = nil, state: AttachmentStatus? = nil) {
            self.vpcId = vpcId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case state = "state"
        }
    }

    public struct Ipv6Range: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIpv6", location: .body(locationName: "cidrIpv6"), required: false, type: .string)
        ]
        /// The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix.
        public let cidrIpv6: String?

        public init(cidrIpv6: String? = nil) {
            self.cidrIpv6 = cidrIpv6
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv6 = "cidrIpv6"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CreateTagsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: true, type: .structure), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "ResourceId"), required: true, type: .list)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string. 
        public let tags: TagList
        /// The IDs of one or more resources to tag. For example, ami-1a2b3c4d.
        public let resources: [String]

        public init(dryRun: Bool? = nil, tags: TagList, resources: [String]) {
            self.dryRun = dryRun
            self.tags = tags
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case tags = "Tag"
            case resources = "ResourceId"
        }
    }

    public struct PrefixListSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PrefixList]?

        public init(item: [PrefixList]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSnapshotsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RestorableByUserIds", location: .body(locationName: "RestorableBy"), required: false, type: .list), 
            AWSShapeMember(label: "SnapshotIds", location: .body(locationName: "SnapshotId"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerIds", location: .body(locationName: "Owner"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more AWS accounts IDs that can create volumes from the snapshot.
        public let restorableByUserIds: [String]?
        /// One or more snapshot IDs. Default: Describes snapshots for which you have launch permissions.
        public let snapshotIds: SnapshotIdStringList?
        /// Returns the snapshots owned by the specified owner. Multiple owners can be specified.
        public let ownerIds: OwnerStringList?
        /// One or more filters.    description - A description of the snapshot.    owner-alias - Value from an Amazon-maintained list (amazon | aws-marketplace | microsoft) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM consolew.    owner-id - The ID of the AWS account that owns the snapshot.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The NextToken value returned from a previous paginated DescribeSnapshots request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The maximum number of snapshot results returned by DescribeSnapshots in paginated output. When this parameter is used, DescribeSnapshots only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeSnapshots request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then DescribeSnapshots returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.
        public let maxResults: Int32?

        public init(restorableByUserIds: [String]? = nil, snapshotIds: SnapshotIdStringList? = nil, ownerIds: OwnerStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.restorableByUserIds = restorableByUserIds
            self.snapshotIds = snapshotIds
            self.ownerIds = ownerIds
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case restorableByUserIds = "RestorableBy"
            case snapshotIds = "SnapshotId"
            case ownerIds = "Owner"
            case filters = "Filter"
            case dryRun = "dryRun"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct CancelReservedInstancesListingRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesListingId", location: .body(locationName: "reservedInstancesListingId"), required: true, type: .string)
        ]
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String

        public init(reservedInstancesListingId: String) {
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListingId = "reservedInstancesListingId"
        }
    }

    public struct ScheduledInstancesMonitoring: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Indicates whether monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct CreateNetworkInterfaceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", location: .body(locationName: "secondaryPrivateIpAddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddresses"), required: false, type: .structure)
        ]
        /// A description for the network interface.
        public let description: String?
        /// The ID of the subnet to associate with the network interface.
        public let subnetId: String
        /// The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary).
        public let privateIpAddress: String?
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. The number of IP addresses you can assign to a network interface varies by instance type. For more information, see IP Addresses Per ENI Per Instance Type in the Amazon Virtual Private Cloud User Guide.
        public let secondaryPrivateIpAddressCount: Int32?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
        public let ipv6AddressCount: Int32?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: InstanceIpv6AddressList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups.
        public let groups: SecurityGroupIdStringList?
        /// One or more private IPv4 addresses.
        public let privateIpAddresses: PrivateIpAddressSpecificationList?

        public init(description: String? = nil, subnetId: String, privateIpAddress: String? = nil, secondaryPrivateIpAddressCount: Int32? = nil, ipv6AddressCount: Int32? = nil, ipv6Addresses: InstanceIpv6AddressList? = nil, dryRun: Bool? = nil, groups: SecurityGroupIdStringList? = nil, privateIpAddresses: PrivateIpAddressSpecificationList? = nil) {
            self.description = description
            self.subnetId = subnetId
            self.privateIpAddress = privateIpAddress
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.dryRun = dryRun
            self.groups = groups
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case subnetId = "subnetId"
            case privateIpAddress = "privateIpAddress"
            case secondaryPrivateIpAddressCount = "secondaryPrivateIpAddressCount"
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6Addresses"
            case dryRun = "dryRun"
            case groups = "SecurityGroupId"
            case privateIpAddresses = "privateIpAddresses"
        }
    }

    public struct ModifyReservedInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "ReservedInstancesId"), required: true, type: .structure), 
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "ReservedInstancesConfigurationSetItemType"), required: true, type: .structure), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// The IDs of the Reserved Instances to modify.
        public let reservedInstancesIds: ReservedInstancesIdStringList
        /// The configuration settings for the Reserved Instances to modify.
        public let targetConfigurations: ReservedInstancesConfigurationList
        /// A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?

        public init(reservedInstancesIds: ReservedInstancesIdStringList, targetConfigurations: ReservedInstancesConfigurationList, clientToken: String? = nil) {
            self.reservedInstancesIds = reservedInstancesIds
            self.targetConfigurations = targetConfigurations
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesIds = "ReservedInstancesId"
            case targetConfigurations = "ReservedInstancesConfigurationSetItemType"
            case clientToken = "clientToken"
        }
    }

    public struct CancelSpotFleetRequestsErrorItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Error", location: .body(locationName: "error"), required: true, type: .structure), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The error.
        public let error: CancelSpotFleetRequestsError
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String

        public init(error: CancelSpotFleetRequestsError, spotFleetRequestId: String) {
            self.error = error
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct CreateInstanceExportTaskResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTask", location: .body(locationName: "exportTask"), required: false, type: .structure)
        ]
        /// Information about the instance export task.
        public let exportTask: ExportTask?

        public init(exportTask: ExportTask? = nil) {
            self.exportTask = exportTask
        }

        private enum CodingKeys: String, CodingKey {
            case exportTask = "exportTask"
        }
    }

    public struct DescribeVolumesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeIds", location: .body(locationName: "VolumeId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// One or more volume IDs.
        public let volumeIds: VolumeIdStringList?
        /// One or more filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name that is exposed to the instance (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching | detached).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - The encryption status of the volume.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The status of the volume (creating | available | in-use | deleting | deleted | error).    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type. This can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The NextToken value returned from a previous paginated DescribeVolumes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The maximum number of volume results returned by DescribeVolumes in paginated output. When this parameter is used, DescribeVolumes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeVolumes request with the returned NextToken value. This value can be between 5 and 500; if MaxResults is given a value larger than 500, only 500 results are returned. If this parameter is not used, then DescribeVolumes returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int32?

        public init(volumeIds: VolumeIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.volumeIds = volumeIds
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case volumeIds = "VolumeId"
            case filters = "Filter"
            case dryRun = "dryRun"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteVpnGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(dryRun: Bool? = nil, vpnGatewayId: String) {
            self.dryRun = dryRun
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DescribeReservedInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstances", location: .body(locationName: "reservedInstancesSet"), required: false, type: .structure)
        ]
        /// A list of Reserved Instances.
        public let reservedInstances: ReservedInstancesList?

        public init(reservedInstances: ReservedInstancesList? = nil) {
            self.reservedInstances = reservedInstances
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstances = "reservedInstancesSet"
        }
    }

    public enum VolumeStatusName: String, CustomStringConvertible, Codable {
        case ioEnabled = "io-enabled"
        case ioPerformance = "io-performance"
        public var description: String { return self.rawValue }
    }

    public struct InstanceNetworkInterfaceList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceNetworkInterface]?

        public init(item: [InstanceNetworkInterface]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct DescribeNetworkInterfaceAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: false, type: .enum)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The attribute of the network interface. This parameter is required.
        public let attribute: NetworkInterfaceAttribute?

        public init(dryRun: Bool? = nil, networkInterfaceId: String, attribute: NetworkInterfaceAttribute? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
            case attribute = "attribute"
        }
    }

    public struct SlotDateTimeRangeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EarliestTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "LatestTime", required: true, type: .timestamp)
        ]
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: TimeStamp
        /// The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
        public let latestTime: TimeStamp

        public init(earliestTime: TimeStamp, latestTime: TimeStamp) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct DeleteVpcRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case dryRun = "dryRun"
        }
    }

    public struct StorageLocation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The name of the S3 bucket.
        public let bucket: String?
        /// The key.
        public let key: String?

        public init(bucket: String? = nil, key: String? = nil) {
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct InstanceBlockDeviceMappingSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoDevice", location: .body(locationName: "noDevice"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", location: .body(locationName: "virtualName"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Ebs", location: .body(locationName: "ebs"), required: false, type: .structure)
        ]
        /// suppress the specified device included in the block device mapping.
        public let noDevice: String?
        /// The virtual device name.
        public let virtualName: String?
        /// The device name exposed to the instance (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDeviceSpecification?

        public init(noDevice: String? = nil, virtualName: String? = nil, deviceName: String? = nil, ebs: EbsInstanceBlockDeviceSpecification? = nil) {
            self.noDevice = noDevice
            self.virtualName = virtualName
            self.deviceName = deviceName
            self.ebs = ebs
        }

        private enum CodingKeys: String, CodingKey {
            case noDevice = "noDevice"
            case virtualName = "virtualName"
            case deviceName = "deviceName"
            case ebs = "ebs"
        }
    }

    public struct InstanceMonitoring: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string)
        ]
        /// The monitoring for the instance.
        public let monitoring: Monitoring?
        /// The ID of the instance.
        public let instanceId: String?

        public init(monitoring: Monitoring? = nil, instanceId: String? = nil) {
            self.monitoring = monitoring
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case monitoring = "monitoring"
            case instanceId = "instanceId"
        }
    }

    public struct PriceScheduleList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PriceSchedule]?

        public init(item: [PriceSchedule]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVpcEndpointsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// One or more filters.    service-name: The name of the AWS service.    vpc-id: The ID of the VPC in which the endpoint resides.    vpc-endpoint-id: The ID of the endpoint.    vpc-endpoint-state: The state of the endpoint. (pending | available | deleting | deleted)  
        public let filters: FilterList?
        /// One or more endpoint IDs.
        public let vpcEndpointIds: ValueStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, vpcEndpointIds: ValueStringList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.vpcEndpointIds = vpcEndpointIds
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case vpcEndpointIds = "VpcEndpointId"
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum VolumeStatusInfoStatus: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        case insufficientData = "insufficient-data"
        public var description: String { return self.rawValue }
    }

    public struct DescribeFlowLogsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "FlowLogs", location: .body(locationName: "flowLogSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the flow logs.
        public let flowLogs: FlowLogSet?

        public init(nextToken: String? = nil, flowLogs: FlowLogSet? = nil) {
            self.nextToken = nextToken
            self.flowLogs = flowLogs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case flowLogs = "flowLogSet"
        }
    }

    public struct EnableVpcClassicLinkResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct CreateVpnConnectionResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnection", location: .body(locationName: "vpnConnection"), required: false, type: .structure)
        ]
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection = "vpnConnection"
        }
    }

    public struct PropagatingVgw: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayId", location: .body(locationName: "gatewayId"), required: false, type: .string)
        ]
        /// The ID of the virtual private gateway (VGW).
        public let gatewayId: String?

        public init(gatewayId: String? = nil) {
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId = "gatewayId"
        }
    }

    public struct StartInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartingInstances", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// Information about one or more started instances.
        public let startingInstances: InstanceStateChangeList?

        public init(startingInstances: InstanceStateChangeList? = nil) {
            self.startingInstances = startingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case startingInstances = "instancesSet"
        }
    }

    public struct RevokeSecurityGroupEgressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceSecurityGroupOwnerId", location: .body(locationName: "sourceSecurityGroupOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "IpPermissions", location: .body(locationName: "ipPermissions"), required: false, type: .structure), 
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSecurityGroupName", location: .body(locationName: "sourceSecurityGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: true, type: .string)
        ]
        /// The AWS account number for a destination security group. To revoke outbound access to a destination security group, we recommend that you use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// A set of IP permissions. You can't specify a destination security group and a CIDR IP address range.
        public let ipPermissions: IpPermissionList?
        /// The CIDR IP address range. We recommend that you specify the CIDR range in a set of IP permissions instead.
        public let cidrIp: String?
        /// The name of a destination security group. To revoke outbound access to a destination security group, we recommend that you use a set of IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.
        public let fromPort: Int32?
        /// The end of port range for the TCP and UDP protocols, or an ICMP type number. We recommend that you specify the port range in a set of IP permissions instead.
        public let toPort: Int32?
        /// The IP protocol name or number. We recommend that you specify the protocol in a set of IP permissions instead.
        public let ipProtocol: String?
        /// The ID of the security group.
        public let groupId: String

        public init(sourceSecurityGroupOwnerId: String? = nil, ipPermissions: IpPermissionList? = nil, cidrIp: String? = nil, sourceSecurityGroupName: String? = nil, dryRun: Bool? = nil, fromPort: Int32? = nil, toPort: Int32? = nil, ipProtocol: String? = nil, groupId: String) {
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.ipPermissions = ipPermissions
            self.cidrIp = cidrIp
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.toPort = toPort
            self.ipProtocol = ipProtocol
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceSecurityGroupOwnerId = "sourceSecurityGroupOwnerId"
            case ipPermissions = "ipPermissions"
            case cidrIp = "cidrIp"
            case sourceSecurityGroupName = "sourceSecurityGroupName"
            case dryRun = "dryRun"
            case fromPort = "fromPort"
            case toPort = "toPort"
            case ipProtocol = "ipProtocol"
            case groupId = "groupId"
        }
    }

    public enum ResetImageAttributeName: String, CustomStringConvertible, Codable {
        case launchpermission = "launchPermission"
        public var description: String { return self.rawValue }
    }

    public struct PublicIpStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIp", required: false, type: .list)
        ]
        public let publicIp: [String]?

        public init(publicIp: [String]? = nil) {
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "PublicIp"
        }
    }

    public struct DescribeImportImageTasksResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ImportImageTasks", location: .body(locationName: "importImageTaskSet"), required: false, type: .structure)
        ]
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.
        public let importImageTasks: ImportImageTaskList?

        public init(nextToken: String? = nil, importImageTasks: ImportImageTaskList? = nil) {
            self.nextToken = nextToken
            self.importImageTasks = importImageTasks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case importImageTasks = "importImageTaskSet"
        }
    }

    public enum PaymentOption: String, CustomStringConvertible, Codable {
        case allupfront = "AllUpfront"
        case partialupfront = "PartialUpfront"
        case noupfront = "NoUpfront"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case customerGateway = "customer-gateway"
        case dhcpOptions = "dhcp-options"
        case image = "image"
        case instance = "instance"
        case internetGateway = "internet-gateway"
        case networkAcl = "network-acl"
        case networkInterface = "network-interface"
        case reservedInstances = "reserved-instances"
        case routeTable = "route-table"
        case snapshot = "snapshot"
        case spotInstancesRequest = "spot-instances-request"
        case subnet = "subnet"
        case securityGroup = "security-group"
        case volume = "volume"
        case vpc = "vpc"
        case vpnConnection = "vpn-connection"
        case vpnGateway = "vpn-gateway"
        public var description: String { return self.rawValue }
    }

    public struct InstanceStateChange: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreviousState", location: .body(locationName: "previousState"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "CurrentState", location: .body(locationName: "currentState"), required: false, type: .structure)
        ]
        /// The previous state of the instance.
        public let previousState: InstanceState?
        /// The ID of the instance.
        public let instanceId: String?
        /// The current state of the instance.
        public let currentState: InstanceState?

        public init(previousState: InstanceState? = nil, instanceId: String? = nil, currentState: InstanceState? = nil) {
            self.previousState = previousState
            self.instanceId = instanceId
            self.currentState = currentState
        }

        private enum CodingKeys: String, CodingKey {
            case previousState = "previousState"
            case instanceId = "instanceId"
            case currentState = "currentState"
        }
    }

    public struct ClassicLinkInstanceList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ClassicLinkInstance]?

        public init(item: [ClassicLinkInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GroupIdentifier: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
        }
    }

    public struct CreateSubnetRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Ipv6CidrBlock", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
        public let ipv6CidrBlock: String?
        /// The ID of the VPC.
        public let vpcId: String
        /// The Availability Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.
        public let availabilityZone: String?
        /// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.
        public let cidrBlock: String

        public init(dryRun: Bool? = nil, ipv6CidrBlock: String? = nil, vpcId: String, availabilityZone: String? = nil, cidrBlock: String) {
            self.dryRun = dryRun
            self.ipv6CidrBlock = ipv6CidrBlock
            self.vpcId = vpcId
            self.availabilityZone = availabilityZone
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case vpcId = "VpcId"
            case availabilityZone = "AvailabilityZone"
            case cidrBlock = "CidrBlock"
        }
    }

    public struct ReservedInstancesId: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct StaleIpPermissionSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [StaleIpPermission]?

        public init(item: [StaleIpPermission]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ResetNetworkInterfaceAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The source/destination checking attribute. Resets the value to true.
        public let sourceDestCheck: String?

        public init(dryRun: Bool? = nil, networkInterfaceId: String, sourceDestCheck: String? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case networkInterfaceId = "networkInterfaceId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public enum AccountAttributeName: String, CustomStringConvertible, Codable {
        case supportedPlatforms = "supported-platforms"
        case defaultVpc = "default-vpc"
        public var description: String { return self.rawValue }
    }

    public struct DescribeInternetGatewaysRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGatewayIds", location: .body(locationName: "internetGatewayId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more Internet gateway IDs. Default: Describes all your Internet gateways.
        public let internetGatewayIds: ValueStringList?
        /// One or more filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(internetGatewayIds: ValueStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.internetGatewayIds = internetGatewayIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case internetGatewayIds = "internetGatewayId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeIdentityIdFormatRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalArn", location: .body(locationName: "principalArn"), required: true, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: false, type: .string)
        ]
        /// The ARN of the principal, which can be an IAM role, IAM user, or the root user.
        public let principalArn: String
        /// The type of resource: instance | reservation | snapshot | volume 
        public let resource: String?

        public init(principalArn: String, resource: String? = nil) {
            self.principalArn = principalArn
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn = "principalArn"
            case resource = "resource"
        }
    }

    public struct ResponseHostIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ReportInstanceReasonCodes: String, CustomStringConvertible, Codable {
        case instanceStuckInState = "instance-stuck-in-state"
        case unresponsive = "unresponsive"
        case notAcceptingCredentials = "not-accepting-credentials"
        case passwordNotAvailable = "password-not-available"
        case performanceNetwork = "performance-network"
        case performanceInstanceStore = "performance-instance-store"
        case performanceEbsVolume = "performance-ebs-volume"
        case performanceOther = "performance-other"
        case other = "other"
        public var description: String { return self.rawValue }
    }

    public struct CustomerGatewayIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGatewayId", required: false, type: .list)
        ]
        public let customerGatewayId: [String]?

        public init(customerGatewayId: [String]? = nil) {
            self.customerGatewayId = customerGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
        }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case passed = "passed"
        case failed = "failed"
        case insufficientData = "insufficient-data"
        case initializing = "initializing"
        public var description: String { return self.rawValue }
    }

    public struct Image: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "RootDeviceName", location: .body(locationName: "rootDeviceName"), required: false, type: .string), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .string), 
            AWSShapeMember(label: "ImageOwnerAlias", location: .body(locationName: "imageOwnerAlias"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "imageState"), required: false, type: .enum), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "ImageLocation", location: .body(locationName: "imageLocation"), required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", location: .body(locationName: "creationDate"), required: false, type: .string), 
            AWSShapeMember(label: "StateReason", location: .body(locationName: "stateReason"), required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "imageOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "Public", location: .body(locationName: "isPublic"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .structure), 
            AWSShapeMember(label: "Hypervisor", location: .body(locationName: "hypervisor"), required: false, type: .enum), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .boolean), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "RootDeviceType", location: .body(locationName: "rootDeviceType"), required: false, type: .enum), 
            AWSShapeMember(label: "Architecture", location: .body(locationName: "architecture"), required: false, type: .enum), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "ImageType", location: .body(locationName: "imageType"), required: false, type: .enum), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string), 
            AWSShapeMember(label: "VirtualizationType", location: .body(locationName: "virtualizationType"), required: false, type: .enum)
        ]
        /// Any block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// The value is Windows for Windows AMIs; otherwise blank.
        public let platform: PlatformValues?
        /// The device name of the root device (for example, /dev/sda1 or /dev/xvda).
        public let rootDeviceName: String?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
        public let imageOwnerAlias: String?
        /// Any tags assigned to the image.
        public let tags: TagList?
        /// The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.
        public let state: ImageState?
        /// The kernel associated with the image, if any. Only applicable for machine images.
        public let kernelId: String?
        /// The location of the AMI.
        public let imageLocation: String?
        /// The date and time the image was created.
        public let creationDate: String?
        /// The reason for the state change.
        public let stateReason: StateReason?
        /// The AWS account ID of the image owner.
        public let ownerId: String?
        /// Indicates whether the image has public launch permissions. The value is true if this image has public launch permissions or false if it has only implicit and explicit launch permissions.
        public let `public`: Bool?
        /// The description of the AMI that was provided during image creation.
        public let description: String?
        /// Any product codes associated with the AMI.
        public let productCodes: ProductCodeList?
        /// The hypervisor type of the image.
        public let hypervisor: HypervisorType?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// The name of the AMI that was provided during image creation.
        public let name: String?
        /// The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// The ID of the AMI.
        public let imageId: String?
        /// The type of image.
        public let imageType: ImageTypeValues?
        /// The RAM disk associated with the image, if any. Only applicable for machine images.
        public let ramdiskId: String?
        /// The type of virtualization of the AMI.
        public let virtualizationType: VirtualizationType?

        public init(blockDeviceMappings: BlockDeviceMappingList? = nil, platform: PlatformValues? = nil, rootDeviceName: String? = nil, sriovNetSupport: String? = nil, imageOwnerAlias: String? = nil, tags: TagList? = nil, state: ImageState? = nil, kernelId: String? = nil, imageLocation: String? = nil, creationDate: String? = nil, stateReason: StateReason? = nil, ownerId: String? = nil, public: Bool? = nil, description: String? = nil, productCodes: ProductCodeList? = nil, hypervisor: HypervisorType? = nil, enaSupport: Bool? = nil, name: String? = nil, rootDeviceType: DeviceType? = nil, architecture: ArchitectureValues? = nil, imageId: String? = nil, imageType: ImageTypeValues? = nil, ramdiskId: String? = nil, virtualizationType: VirtualizationType? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.platform = platform
            self.rootDeviceName = rootDeviceName
            self.sriovNetSupport = sriovNetSupport
            self.imageOwnerAlias = imageOwnerAlias
            self.tags = tags
            self.state = state
            self.kernelId = kernelId
            self.imageLocation = imageLocation
            self.creationDate = creationDate
            self.stateReason = stateReason
            self.ownerId = ownerId
            self.`public` = `public`
            self.description = description
            self.productCodes = productCodes
            self.hypervisor = hypervisor
            self.enaSupport = enaSupport
            self.name = name
            self.rootDeviceType = rootDeviceType
            self.architecture = architecture
            self.imageId = imageId
            self.imageType = imageType
            self.ramdiskId = ramdiskId
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case platform = "platform"
            case rootDeviceName = "rootDeviceName"
            case sriovNetSupport = "sriovNetSupport"
            case imageOwnerAlias = "imageOwnerAlias"
            case tags = "tagSet"
            case state = "imageState"
            case kernelId = "kernelId"
            case imageLocation = "imageLocation"
            case creationDate = "creationDate"
            case stateReason = "stateReason"
            case ownerId = "imageOwnerId"
            case `public` = "isPublic"
            case description = "description"
            case productCodes = "productCodes"
            case hypervisor = "hypervisor"
            case enaSupport = "enaSupport"
            case name = "name"
            case rootDeviceType = "rootDeviceType"
            case architecture = "architecture"
            case imageId = "imageId"
            case imageType = "imageType"
            case ramdiskId = "ramdiskId"
            case virtualizationType = "virtualizationType"
        }
    }

    public struct InternetGatewayList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InternetGateway]?

        public init(item: [InternetGateway]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VpnConnectionOptions: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticRoutesOnly", location: .body(locationName: "staticRoutesOnly"), required: false, type: .boolean)
        ]
        /// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
        public let staticRoutesOnly: Bool?

        public init(staticRoutesOnly: Bool? = nil) {
            self.staticRoutesOnly = staticRoutesOnly
        }

        private enum CodingKeys: String, CodingKey {
            case staticRoutesOnly = "staticRoutesOnly"
        }
    }

    public struct DescribeImportImageTasksRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskIds", location: .body(locationName: "ImportTaskId"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, deleted.
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A token that indicates the next page of results.
        public let nextToken: String?
        /// A list of import image task IDs.
        public let importTaskIds: ImportTaskIdList?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(filters: FilterList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, importTaskIds: ImportTaskIdList? = nil, maxResults: Int32? = nil) {
            self.filters = filters
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
        }
    }

    public struct NatGateway: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteTime", location: .body(locationName: "deleteTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "FailureCode", location: .body(locationName: "failureCode"), required: false, type: .string), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureMessage", location: .body(locationName: "failureMessage"), required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedBandwidth", location: .body(locationName: "provisionedBandwidth"), required: false, type: .structure), 
            AWSShapeMember(label: "NatGatewayAddresses", location: .body(locationName: "natGatewayAddressSet"), required: false, type: .structure)
        ]
        /// The ID of the subnet in which the NAT gateway is located.
        public let subnetId: String?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// The date and time the NAT gateway was deleted, if applicable.
        public let deleteTime: TimeStamp?
        /// The ID of the VPC in which the NAT gateway is located.
        public let vpcId: String?
        /// The state of the NAT gateway.    pending: The NAT gateway is being created and is not ready to process traffic.    failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.    available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.    deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.    deleted: The NAT gateway has been terminated and is no longer processing traffic.  
        public let state: NatGatewayState?
        /// If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
        public let failureCode: String?
        /// The date and time the NAT gateway was created.
        public let createTime: TimeStamp?
        /// If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"   For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"   For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"   For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"   For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."   For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."  
        public let failureMessage: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionedBandwidth: ProvisionedBandwidth?
        /// Information about the IP addresses and network interface associated with the NAT gateway.
        public let natGatewayAddresses: NatGatewayAddressList?

        public init(subnetId: String? = nil, natGatewayId: String? = nil, deleteTime: TimeStamp? = nil, vpcId: String? = nil, state: NatGatewayState? = nil, failureCode: String? = nil, createTime: TimeStamp? = nil, failureMessage: String? = nil, provisionedBandwidth: ProvisionedBandwidth? = nil, natGatewayAddresses: NatGatewayAddressList? = nil) {
            self.subnetId = subnetId
            self.natGatewayId = natGatewayId
            self.deleteTime = deleteTime
            self.vpcId = vpcId
            self.state = state
            self.failureCode = failureCode
            self.createTime = createTime
            self.failureMessage = failureMessage
            self.provisionedBandwidth = provisionedBandwidth
            self.natGatewayAddresses = natGatewayAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case natGatewayId = "natGatewayId"
            case deleteTime = "deleteTime"
            case vpcId = "vpcId"
            case state = "state"
            case failureCode = "failureCode"
            case createTime = "createTime"
            case failureMessage = "failureMessage"
            case provisionedBandwidth = "provisionedBandwidth"
            case natGatewayAddresses = "natGatewayAddressSet"
        }
    }

    public struct VpnStaticRouteList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpnStaticRoute]?

        public init(item: [VpnStaticRoute]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstanceCapacity: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "TotalCapacity", location: .body(locationName: "totalCapacity"), required: false, type: .integer), 
            AWSShapeMember(label: "AvailableCapacity", location: .body(locationName: "availableCapacity"), required: false, type: .integer)
        ]
        /// The instance type size supported by the Dedicated Host.
        public let instanceType: String?
        /// The total number of instances that can be launched onto the Dedicated Host.
        public let totalCapacity: Int32?
        /// The number of instances that can still be launched onto the Dedicated Host.
        public let availableCapacity: Int32?

        public init(instanceType: String? = nil, totalCapacity: Int32? = nil, availableCapacity: Int32? = nil) {
            self.instanceType = instanceType
            self.totalCapacity = totalCapacity
            self.availableCapacity = availableCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "instanceType"
            case totalCapacity = "totalCapacity"
            case availableCapacity = "availableCapacity"
        }
    }

    public enum PermissionGroup: String, CustomStringConvertible, Codable {
        case all = "all"
        public var description: String { return self.rawValue }
    }

    public struct UnassignIpv6AddressesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "UnassignedIpv6Addresses", location: .body(locationName: "unassignedIpv6Addresses"), required: false, type: .structure)
        ]
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv6 addresses that have been unassigned from the network interface.
        public let unassignedIpv6Addresses: Ipv6AddressList?

        public init(networkInterfaceId: String? = nil, unassignedIpv6Addresses: Ipv6AddressList? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.unassignedIpv6Addresses = unassignedIpv6Addresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "networkInterfaceId"
            case unassignedIpv6Addresses = "unassignedIpv6Addresses"
        }
    }

    public struct ClassicLinkDnsSupport: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "ClassicLinkDnsSupported", location: .body(locationName: "classicLinkDnsSupported"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Indicates whether ClassicLink DNS support is enabled for the VPC.
        public let classicLinkDnsSupported: Bool?

        public init(vpcId: String? = nil, classicLinkDnsSupported: Bool? = nil) {
            self.vpcId = vpcId
            self.classicLinkDnsSupported = classicLinkDnsSupported
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case classicLinkDnsSupported = "classicLinkDnsSupported"
        }
    }

    public struct ClassicLinkDnsSupportList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ClassicLinkDnsSupport]?

        public init(item: [ClassicLinkDnsSupport]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct FpgaImageState: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The state. The following are the possible values:    pending - AFI bitstream generation is in progress.    available - The AFI is available for use.    failed - AFI bitstream generation failed.    unavailable - The AFI is no longer available for use.  
        public let code: FpgaImageStateCode?
        /// If the state is failed, this is the error message.
        public let message: String?

        public init(code: FpgaImageStateCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct CancelImportTaskResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreviousState", location: .body(locationName: "previousState"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .string), 
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string)
        ]
        /// The current state of the task being canceled.
        public let previousState: String?
        /// The current state of the task being canceled.
        public let state: String?
        /// The ID of the task being canceled.
        public let importTaskId: String?

        public init(previousState: String? = nil, state: String? = nil, importTaskId: String? = nil) {
            self.previousState = previousState
            self.state = state
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case previousState = "previousState"
            case state = "state"
            case importTaskId = "importTaskId"
        }
    }

    public struct SnapshotDetailList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SnapshotDetail]?

        public init(item: [SnapshotDetail]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PriceScheduleSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double), 
            AWSShapeMember(label: "Term", location: .body(locationName: "term"), required: false, type: .long), 
            AWSShapeMember(label: "CurrencyCode", location: .body(locationName: "currencyCode"), required: false, type: .enum)
        ]
        /// The fixed price for the term.
        public let price: Double?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?
        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?

        public init(price: Double? = nil, term: Int64? = nil, currencyCode: CurrencyCodeValues? = nil) {
            self.price = price
            self.term = term
            self.currencyCode = currencyCode
        }

        private enum CodingKeys: String, CodingKey {
            case price = "price"
            case term = "term"
            case currencyCode = "currencyCode"
        }
    }

    public enum InstanceLifecycleType: String, CustomStringConvertible, Codable {
        case spot = "spot"
        case scheduled = "scheduled"
        public var description: String { return self.rawValue }
    }

    public struct ProductCodeStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductCode", required: false, type: .list)
        ]
        public let productCode: [String]?

        public init(productCode: [String]? = nil) {
            self.productCode = productCode
        }

        private enum CodingKeys: String, CodingKey {
            case productCode = "ProductCode"
        }
    }

    public enum ListingState: String, CustomStringConvertible, Codable {
        case available = "available"
        case sold = "sold"
        case cancelled = "cancelled"
        case pending = "pending"
        public var description: String { return self.rawValue }
    }

    public struct DescribeIdentityIdFormatResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statuses", location: .body(locationName: "statusSet"), required: false, type: .structure)
        ]
        /// Information about the ID format for the resources.
        public let statuses: IdFormatList?

        public init(statuses: IdFormatList? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct CreateVpnConnectionRouteRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationCidrBlock", required: true, type: .string)
        ]
        /// The ID of the VPN connection.
        public let vpnConnectionId: String
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String

        public init(vpnConnectionId: String, destinationCidrBlock: String) {
            self.vpnConnectionId = vpnConnectionId
            self.destinationCidrBlock = destinationCidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionId = "VpnConnectionId"
            case destinationCidrBlock = "DestinationCidrBlock"
        }
    }

    public struct ReservedInstancesConfigurationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesConfiguration]?

        public init(item: [ReservedInstancesConfiguration]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum VolumeAttributeName: String, CustomStringConvertible, Codable {
        case autoenableio = "autoEnableIO"
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public struct ImportVolumeResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTask", location: .body(locationName: "conversionTask"), required: false, type: .structure)
        ]
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct VpnConnection: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", location: .body(locationName: "options"), required: false, type: .structure), 
            AWSShapeMember(label: "CustomerGatewayId", location: .body(locationName: "customerGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Routes", location: .body(locationName: "routes"), required: false, type: .structure), 
            AWSShapeMember(label: "VpnConnectionId", location: .body(locationName: "vpnConnectionId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VgwTelemetry", location: .body(locationName: "vgwTelemetry"), required: false, type: .structure), 
            AWSShapeMember(label: "CustomerGatewayConfiguration", location: .body(locationName: "customerGatewayConfiguration"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum), 
            AWSShapeMember(label: "VpnGatewayId", location: .body(locationName: "vpnGatewayId"), required: false, type: .string)
        ]
        /// The VPN connection options.
        public let options: VpnConnectionOptions?
        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// The static routes associated with the VPN connection.
        public let routes: VpnStaticRouteList?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?
        /// The current state of the VPN connection.
        public let state: VpnState?
        /// Any tags assigned to the VPN connection.
        public let tags: TagList?
        /// Information about the VPN tunnel.
        public let vgwTelemetry: VgwTelemetryList?
        /// The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the CreateVpnConnection response; however, it's present in the DescribeVpnConnections response only if the VPN connection is in the pending or available state.
        public let customerGatewayConfiguration: String?
        /// The type of VPN connection.
        public let `type`: GatewayType?
        /// The ID of the virtual private gateway at the AWS side of the VPN connection.
        public let vpnGatewayId: String?

        public init(options: VpnConnectionOptions? = nil, customerGatewayId: String? = nil, routes: VpnStaticRouteList? = nil, vpnConnectionId: String? = nil, state: VpnState? = nil, tags: TagList? = nil, vgwTelemetry: VgwTelemetryList? = nil, customerGatewayConfiguration: String? = nil, type: GatewayType? = nil, vpnGatewayId: String? = nil) {
            self.options = options
            self.customerGatewayId = customerGatewayId
            self.routes = routes
            self.vpnConnectionId = vpnConnectionId
            self.state = state
            self.tags = tags
            self.vgwTelemetry = vgwTelemetry
            self.customerGatewayConfiguration = customerGatewayConfiguration
            self.`type` = `type`
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case options = "options"
            case customerGatewayId = "customerGatewayId"
            case routes = "routes"
            case vpnConnectionId = "vpnConnectionId"
            case state = "state"
            case tags = "tagSet"
            case vgwTelemetry = "vgwTelemetry"
            case customerGatewayConfiguration = "customerGatewayConfiguration"
            case `type` = "type"
            case vpnGatewayId = "vpnGatewayId"
        }
    }

    public enum PlacementStrategy: String, CustomStringConvertible, Codable {
        case cluster = "cluster"
        public var description: String { return self.rawValue }
    }

    public struct Address: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceOwnerId", location: .body(locationName: "networkInterfaceOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .enum), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]
        /// The ID of the AWS account that owns the network interface.
        public let networkInterfaceOwnerId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID representing the association of the address with an instance in a VPC.
        public let associationId: String?
        /// The ID of the instance that the address is associated with (if any).
        public let instanceId: String?
        /// The ID representing the allocation of the address for use with EC2-VPC.
        public let allocationId: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
        public let domain: DomainType?
        /// The private IP address associated with the Elastic IP address.
        public let privateIpAddress: String?

        public init(networkInterfaceOwnerId: String? = nil, networkInterfaceId: String? = nil, associationId: String? = nil, instanceId: String? = nil, allocationId: String? = nil, publicIp: String? = nil, domain: DomainType? = nil, privateIpAddress: String? = nil) {
            self.networkInterfaceOwnerId = networkInterfaceOwnerId
            self.networkInterfaceId = networkInterfaceId
            self.associationId = associationId
            self.instanceId = instanceId
            self.allocationId = allocationId
            self.publicIp = publicIp
            self.domain = domain
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceOwnerId = "networkInterfaceOwnerId"
            case networkInterfaceId = "networkInterfaceId"
            case associationId = "associationId"
            case instanceId = "instanceId"
            case allocationId = "allocationId"
            case publicIp = "publicIp"
            case domain = "domain"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct DescribeVpnGatewaysRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGatewayIds", location: .body(locationName: "VpnGatewayId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more virtual private gateway IDs. Default: Describes all your virtual private gateways.
        public let vpnGatewayIds: VpnGatewayIdStringList?
        /// One or more filters.    attachment.state - The current state of the attachment between the gateway and the VPC (attaching | attached | detaching | detached).    attachment.vpc-id - The ID of an attached VPC.    availability-zone - The Availability Zone for the virtual private gateway (if applicable).    state - The state of the virtual private gateway (pending | available | deleting | deleted).    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    type - The type of virtual private gateway. Currently the only supported type is ipsec.1.    vpn-gateway-id - The ID of the virtual private gateway.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpnGatewayIds: VpnGatewayIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.vpnGatewayIds = vpnGatewayIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGatewayIds = "VpnGatewayId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public enum VpnState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct TerminateInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct ReasonCodesList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReportInstanceReasonCodes]?

        public init(item: [ReportInstanceReasonCodes]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ImportImageTaskList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImportImageTask]?

        public init(item: [ImportImageTask]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NetworkAclAssociationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkAclAssociation]?

        public init(item: [NetworkAclAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct PurchaseReservedInstancesOfferingResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", location: .body(locationName: "reservedInstancesId"), required: false, type: .string)
        ]
        /// The IDs of the purchased Reserved Instances.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "reservedInstancesId"
        }
    }

    public struct CreateNetworkAclRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeVpnConnectionsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnections", location: .body(locationName: "vpnConnectionSet"), required: false, type: .structure)
        ]
        /// Information about one or more VPN connections.
        public let vpnConnections: VpnConnectionList?

        public init(vpnConnections: VpnConnectionList? = nil) {
            self.vpnConnections = vpnConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnections = "vpnConnectionSet"
        }
    }

    public struct ImportInstanceTaskDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .enum), 
            AWSShapeMember(label: "Volumes", location: .body(locationName: "volumes"), required: true, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The instance operating system.
        public let platform: PlatformValues?
        /// One or more volumes.
        public let volumes: ImportInstanceVolumeDetailSet
        /// The ID of the instance.
        public let instanceId: String?
        /// A description of the task.
        public let description: String?

        public init(platform: PlatformValues? = nil, volumes: ImportInstanceVolumeDetailSet, instanceId: String? = nil, description: String? = nil) {
            self.platform = platform
            self.volumes = volumes
            self.instanceId = instanceId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case volumes = "volumes"
            case instanceId = "instanceId"
            case description = "description"
        }
    }

    public struct BundleTaskError: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct AccountAttribute: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", location: .body(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "AttributeValues", location: .body(locationName: "attributeValueSet"), required: false, type: .structure)
        ]
        /// The name of the account attribute.
        public let attributeName: String?
        /// One or more values for the account attribute.
        public let attributeValues: AccountAttributeValueList?

        public init(attributeName: String? = nil, attributeValues: AccountAttributeValueList? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case attributeValues = "attributeValueSet"
        }
    }

    public struct PropagatingVgwList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PropagatingVgw]?

        public init(item: [PropagatingVgw]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyReservedInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesModificationId", location: .body(locationName: "reservedInstancesModificationId"), required: false, type: .string)
        ]
        /// The ID for the modification.
        public let reservedInstancesModificationId: String?

        public init(reservedInstancesModificationId: String? = nil) {
            self.reservedInstancesModificationId = reservedInstancesModificationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationId = "reservedInstancesModificationId"
        }
    }

    public struct CreateCustomerGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BgpAsn", required: true, type: .integer), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "IpAddress"), required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// For devices that support BGP, the customer gateway's BGP ASN. Default: 65000
        public let bgpAsn: Int32
        /// The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
        public let publicIp: String
        /// The type of VPN connection that this customer gateway supports (ipsec.1).
        public let `type`: GatewayType
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bgpAsn: Int32, publicIp: String, type: GatewayType, dryRun: Bool? = nil) {
            self.bgpAsn = bgpAsn
            self.publicIp = publicIp
            self.`type` = `type`
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bgpAsn = "BgpAsn"
            case publicIp = "IpAddress"
            case `type` = "Type"
            case dryRun = "dryRun"
        }
    }

    public struct CancelSpotInstanceRequestsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "SpotInstanceRequestIds", location: .body(locationName: "SpotInstanceRequestId"), required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more Spot instance request IDs.
        public let spotInstanceRequestIds: SpotInstanceRequestIdList

        public init(dryRun: Bool? = nil, spotInstanceRequestIds: SpotInstanceRequestIdList) {
            self.dryRun = dryRun
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public enum DiskImageFormat: String, CustomStringConvertible, Codable {
        case vmdk = "VMDK"
        case raw = "RAW"
        case vhd = "VHD"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEgressOnlyInternetGatewaysResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGateways", location: .body(locationName: "egressOnlyInternetGatewaySet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// Information about the egress-only Internet gateways.
        public let egressOnlyInternetGateways: EgressOnlyInternetGatewayList?

        public init(nextToken: String? = nil, egressOnlyInternetGateways: EgressOnlyInternetGatewayList? = nil) {
            self.nextToken = nextToken
            self.egressOnlyInternetGateways = egressOnlyInternetGateways
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case egressOnlyInternetGateways = "egressOnlyInternetGatewaySet"
        }
    }

    public struct CreateSecurityGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: true, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Description", location: .body(locationName: "GroupDescription"), required: true, type: .string)
        ]
        /// The name of the security group. Constraints: Up to 255 characters in length Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let groupName: String
        /// [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
        public let vpcId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A description for the security group. This is informational only. Constraints: Up to 255 characters in length Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String

        public init(groupName: String, vpcId: String? = nil, dryRun: Bool? = nil, description: String) {
            self.groupName = groupName
            self.vpcId = vpcId
            self.dryRun = dryRun
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case vpcId = "VpcId"
            case dryRun = "dryRun"
            case description = "GroupDescription"
        }
    }

    public struct SubnetList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Subnet]?

        public init(item: [Subnet]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct MoveAddressToVpcRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String

        public init(dryRun: Bool? = nil, publicIp: String) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case publicIp = "publicIp"
        }
    }

    public struct DescribeSpotFleetRequestHistoryResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastEvaluatedTime", location: .body(locationName: "lastEvaluatedTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "HistoryRecords", location: .body(locationName: "historyRecordSet"), required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
        public let lastEvaluatedTime: TimeStamp
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp
        /// Information about the events in the history of the Spot fleet request.
        public let historyRecords: HistoryRecords
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String

        public init(lastEvaluatedTime: TimeStamp, startTime: TimeStamp, historyRecords: HistoryRecords, nextToken: String? = nil, spotFleetRequestId: String) {
            self.lastEvaluatedTime = lastEvaluatedTime
            self.startTime = startTime
            self.historyRecords = historyRecords
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case lastEvaluatedTime = "lastEvaluatedTime"
            case startTime = "startTime"
            case historyRecords = "historyRecordSet"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct CreateInternetGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGateway", location: .body(locationName: "internetGateway"), required: false, type: .structure)
        ]
        /// Information about the Internet gateway.
        public let internetGateway: InternetGateway?

        public init(internetGateway: InternetGateway? = nil) {
            self.internetGateway = internetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateway = "internetGateway"
        }
    }

    public struct DescribeImageAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The AMI attribute.  Note: Depending on your account privileges, the blockDeviceMapping attribute may return a Client.AuthFailure error. If this happens, use DescribeImages to get information about the block device mapping for the AMI.
        public let attribute: ImageAttributeName
        /// The ID of the AMI.
        public let imageId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(attribute: ImageAttributeName, imageId: String, dryRun: Bool? = nil) {
            self.attribute = attribute
            self.imageId = imageId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case imageId = "ImageId"
            case dryRun = "dryRun"
        }
    }

    public struct HostList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Host]?

        public init(item: [Host]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReplaceNetworkAclEntryRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "Icmp"), required: false, type: .structure), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .string), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure)
        ]
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
        public let cidrBlock: String?
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying the ICMP (1) protocol, or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The rule number of the entry to replace.
        public let ruleNumber: Int32
        /// The IP protocol. You can specify all or -1 to mean all protocols. If you specify all, -1, or a protocol number other than tcp, udp, or icmp, traffic on all ports is allowed, regardless of any ports or ICMP types or codes you specify. If you specify protocol 58 (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol 58 (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule.
        public let egress: Bool
        /// The ID of the ACL.
        public let networkAclId: String
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying TCP (6) or UDP (17) for the protocol.
        public let portRange: PortRange?

        public init(cidrBlock: String? = nil, icmpTypeCode: IcmpTypeCode? = nil, ruleNumber: Int32, protocol: String, ruleAction: RuleAction, dryRun: Bool? = nil, egress: Bool, networkAclId: String, ipv6CidrBlock: String? = nil, portRange: PortRange? = nil) {
            self.cidrBlock = cidrBlock
            self.icmpTypeCode = icmpTypeCode
            self.ruleNumber = ruleNumber
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.dryRun = dryRun
            self.egress = egress
            self.networkAclId = networkAclId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case icmpTypeCode = "Icmp"
            case ruleNumber = "ruleNumber"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case dryRun = "dryRun"
            case egress = "egress"
            case networkAclId = "networkAclId"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case portRange = "portRange"
        }
    }

    public struct DeleteKeyPairRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyName", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The name of the key pair.
        public let keyName: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(keyName: String, dryRun: Bool? = nil) {
            self.keyName = keyName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case keyName = "KeyName"
            case dryRun = "dryRun"
        }
    }

    public struct IamInstanceProfileAssociationSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IamInstanceProfileAssociation]?

        public init(item: [IamInstanceProfileAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct EbsBlockDevice: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeSize", location: .body(locationName: "volumeSize"), required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", location: .body(locationName: "volumeType"), required: false, type: .enum), 
            AWSShapeMember(label: "Iops", location: .body(locationName: "iops"), required: false, type: .integer), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean)
        ]
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The size of the volume, in GiB. Constraints: 1-16384 for General Purpose SSD (gp2), 4-16384 for Provisioned IOPS SSD (io1), 500-16384 for Throughput Optimized HDD (st1), 500-16384 for Cold HDD (sc1), and 1-1024 for Magnetic (standard) volumes. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// The volume type: gp2, io1, st1, sc1, or standard. Default: standard 
        public let volumeType: VolumeType?
        /// The number of I/O operations per second (IOPS) that the volume supports. For io1, this represents the number of IOPS that are provisioned for the volume. For gp2, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for gp2 volumes. Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int32?
        /// Indicates whether the EBS volume is encrypted. Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption.
        public let encrypted: Bool?

        public init(snapshotId: String? = nil, deleteOnTermination: Bool? = nil, volumeSize: Int32? = nil, volumeType: VolumeType? = nil, iops: Int32? = nil, encrypted: Bool? = nil) {
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.volumeSize = volumeSize
            self.volumeType = volumeType
            self.iops = iops
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
            case deleteOnTermination = "deleteOnTermination"
            case volumeSize = "volumeSize"
            case volumeType = "volumeType"
            case iops = "iops"
            case encrypted = "encrypted"
        }
    }

    public struct DescribeExportTasksResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTasks", location: .body(locationName: "exportTaskSet"), required: false, type: .structure)
        ]
        /// Information about the export tasks.
        public let exportTasks: ExportTaskList?

        public init(exportTasks: ExportTaskList? = nil) {
            self.exportTasks = exportTasks
        }

        private enum CodingKeys: String, CodingKey {
            case exportTasks = "exportTaskSet"
        }
    }

    public enum Scope: String, CustomStringConvertible, Codable {
        case availabilityZone = "Availability Zone"
        case region = "Region"
        public var description: String { return self.rawValue }
    }

    public struct CreateVpcPeeringConnectionResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnection", location: .body(locationName: "vpcPeeringConnection"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct IpRange: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrIp", location: .body(locationName: "cidrIp"), required: false, type: .string)
        ]
        /// The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix.
        public let cidrIp: String?

        public init(cidrIp: String? = nil) {
            self.cidrIp = cidrIp
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "cidrIp"
        }
    }

    public struct DhcpConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "valueSet"), required: false, type: .structure)
        ]
        /// The name of a DHCP option.
        public let key: String?
        /// One or more values for the DHCP option.
        public let values: DhcpConfigurationValueList?

        public init(key: String? = nil, values: DhcpConfigurationValueList? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case values = "valueSet"
        }
    }

    public struct CancelConversionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ConversionTaskId", location: .body(locationName: "conversionTaskId"), required: true, type: .string), 
            AWSShapeMember(label: "ReasonMessage", location: .body(locationName: "reasonMessage"), required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the conversion task.
        public let conversionTaskId: String
        /// The reason for canceling the conversion task.
        public let reasonMessage: String?

        public init(dryRun: Bool? = nil, conversionTaskId: String, reasonMessage: String? = nil) {
            self.dryRun = dryRun
            self.conversionTaskId = conversionTaskId
            self.reasonMessage = reasonMessage
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case conversionTaskId = "conversionTaskId"
            case reasonMessage = "reasonMessage"
        }
    }

    public struct GroupIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "groupId", required: false, type: .list)
        ]
        public let groupId: [String]?

        public init(groupId: [String]? = nil) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
        }
    }

    public struct SpotInstanceRequestIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequestId", required: false, type: .list)
        ]
        public let spotInstanceRequestId: [String]?

        public init(spotInstanceRequestId: [String]? = nil) {
            self.spotInstanceRequestId = spotInstanceRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequestId = "SpotInstanceRequestId"
        }
    }

    public struct TagSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "Tag"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .enum)
        ]
        /// The tags to apply to the resource.
        public let tags: TagList?
        /// The type of resource to tag. Currently, the resource types that support tagging on creation are instance and volume. 
        public let resourceType: ResourceType?

        public init(tags: TagList? = nil, resourceType: ResourceType? = nil) {
            self.tags = tags
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
            case resourceType = "resourceType"
        }
    }

    public struct ModifyInstancePlacementResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct NetworkInterfaceIpv6AddressesList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkInterfaceIpv6Address]?

        public init(item: [NetworkInterfaceIpv6Address]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum FleetType: String, CustomStringConvertible, Codable {
        case request = "request"
        case maintain = "maintain"
        public var description: String { return self.rawValue }
    }

    public struct UnsuccessfulItemSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UnsuccessfulItem]?

        public init(item: [UnsuccessfulItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeVpcAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Attribute", required: true, type: .enum)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The VPC attribute.
        public let attribute: VpcAttributeName

        public init(vpcId: String, dryRun: Bool? = nil, attribute: VpcAttributeName) {
            self.vpcId = vpcId
            self.dryRun = dryRun
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case dryRun = "dryRun"
            case attribute = "Attribute"
        }
    }

    public struct ReservedInstancesModification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "reservedInstancesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "EffectiveDate", location: .body(locationName: "effectiveDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "ModificationResults", location: .body(locationName: "modificationResultSet"), required: false, type: .structure), 
            AWSShapeMember(label: "UpdateDate", location: .body(locationName: "updateDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "ReservedInstancesModificationId", location: .body(locationName: "reservedInstancesModificationId"), required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", location: .body(locationName: "createDate"), required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string)
        ]
        /// The IDs of one or more Reserved Instances.
        public let reservedInstancesIds: ReservedIntancesIds?
        /// The status of the Reserved Instances modification request.
        public let status: String?
        /// The time for the modification to become effective.
        public let effectiveDate: TimeStamp?
        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Contains target configurations along with their corresponding new Reserved Instance IDs.
        public let modificationResults: ReservedInstancesModificationResultList?
        /// The time when the modification request was last updated.
        public let updateDate: TimeStamp?
        /// A unique ID for the Reserved Instance modification.
        public let reservedInstancesModificationId: String?
        /// The time when the modification request was created.
        public let createDate: TimeStamp?
        /// The reason for the status.
        public let statusMessage: String?

        public init(reservedInstancesIds: ReservedIntancesIds? = nil, status: String? = nil, effectiveDate: TimeStamp? = nil, clientToken: String? = nil, modificationResults: ReservedInstancesModificationResultList? = nil, updateDate: TimeStamp? = nil, reservedInstancesModificationId: String? = nil, createDate: TimeStamp? = nil, statusMessage: String? = nil) {
            self.reservedInstancesIds = reservedInstancesIds
            self.status = status
            self.effectiveDate = effectiveDate
            self.clientToken = clientToken
            self.modificationResults = modificationResults
            self.updateDate = updateDate
            self.reservedInstancesModificationId = reservedInstancesModificationId
            self.createDate = createDate
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesIds = "reservedInstancesSet"
            case status = "status"
            case effectiveDate = "effectiveDate"
            case clientToken = "clientToken"
            case modificationResults = "modificationResultSet"
            case updateDate = "updateDate"
            case reservedInstancesModificationId = "reservedInstancesModificationId"
            case createDate = "createDate"
            case statusMessage = "statusMessage"
        }
    }

    public struct DescribeAvailabilityZonesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", location: .body(locationName: "availabilityZoneInfo"), required: false, type: .structure)
        ]
        /// Information about one or more Availability Zones.
        public let availabilityZones: AvailabilityZoneList?

        public init(availabilityZones: AvailabilityZoneList? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "availabilityZoneInfo"
        }
    }

    public struct RejectVpcPeeringConnectionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct NetworkInterfacePrivateIpAddressList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkInterfacePrivateIpAddress]?

        public init(item: [NetworkInterfacePrivateIpAddress]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IamInstanceProfileAssociation", location: .body(locationName: "iamInstanceProfileAssociation"), required: false, type: .structure)
        ]
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation = "iamInstanceProfileAssociation"
        }
    }

    public struct CreateImageResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct ImportVolumeTaskDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Image", location: .body(locationName: "image"), required: true, type: .structure), 
            AWSShapeMember(label: "BytesConverted", location: .body(locationName: "bytesConverted"), required: true, type: .long), 
            AWSShapeMember(label: "Volume", location: .body(locationName: "volume"), required: true, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The image.
        public let image: DiskImageDescription
        /// The number of bytes converted so far.
        public let bytesConverted: Int64
        /// The volume.
        public let volume: DiskImageVolumeDescription
        /// The Availability Zone where the resulting volume will reside.
        public let availabilityZone: String
        /// The description you provided when starting the import volume task.
        public let description: String?

        public init(image: DiskImageDescription, bytesConverted: Int64, volume: DiskImageVolumeDescription, availabilityZone: String, description: String? = nil) {
            self.image = image
            self.bytesConverted = bytesConverted
            self.volume = volume
            self.availabilityZone = availabilityZone
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case image = "image"
            case bytesConverted = "bytesConverted"
            case volume = "volume"
            case availabilityZone = "availabilityZone"
            case description = "description"
        }
    }

    public struct IpRanges: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct NetworkInterfaceAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "IpOwnerId", location: .body(locationName: "ipOwnerId"), required: false, type: .string), 
            AWSShapeMember(label: "AllocationId", location: .body(locationName: "allocationId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string)
        ]
        /// The address of the Elastic IP address bound to the network interface.
        public let publicIp: String?
        /// The association ID.
        public let associationId: String?
        /// The ID of the Elastic IP address owner.
        public let ipOwnerId: String?
        /// The allocation ID.
        public let allocationId: String?
        /// The public DNS name.
        public let publicDnsName: String?

        public init(publicIp: String? = nil, associationId: String? = nil, ipOwnerId: String? = nil, allocationId: String? = nil, publicDnsName: String? = nil) {
            self.publicIp = publicIp
            self.associationId = associationId
            self.ipOwnerId = ipOwnerId
            self.allocationId = allocationId
            self.publicDnsName = publicDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp = "publicIp"
            case associationId = "associationId"
            case ipOwnerId = "ipOwnerId"
            case allocationId = "allocationId"
            case publicDnsName = "publicDnsName"
        }
    }

    public struct ScheduledInstanceRecurrenceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OccurrenceDays", location: .body(locationName: "OccurrenceDay"), required: false, type: .structure), 
            AWSShapeMember(label: "Frequency", required: false, type: .string), 
            AWSShapeMember(label: "OccurrenceUnit", required: false, type: .string), 
            AWSShapeMember(label: "OccurrenceRelativeToEnd", required: false, type: .boolean), 
            AWSShapeMember(label: "Interval", required: false, type: .integer)
        ]
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
        public let occurrenceDays: OccurrenceDayRequestSet?
        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required for a monthly schedule. You can't specify DayOfWeek with a weekly schedule. You can't specify this value with a daily schedule.
        public let occurrenceUnit: String?
        /// Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
        public let occurrenceRelativeToEnd: Bool?
        /// The interval quantity. The interval unit depends on the value of Frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int32?

        public init(occurrenceDays: OccurrenceDayRequestSet? = nil, frequency: String? = nil, occurrenceUnit: String? = nil, occurrenceRelativeToEnd: Bool? = nil, interval: Int32? = nil) {
            self.occurrenceDays = occurrenceDays
            self.frequency = frequency
            self.occurrenceUnit = occurrenceUnit
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.interval = interval
        }

        private enum CodingKeys: String, CodingKey {
            case occurrenceDays = "OccurrenceDay"
            case frequency = "Frequency"
            case occurrenceUnit = "OccurrenceUnit"
            case occurrenceRelativeToEnd = "OccurrenceRelativeToEnd"
            case interval = "Interval"
        }
    }

    public struct Filter: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Values", location: .body(locationName: "Value"), required: false, type: .structure)
        ]
        /// The name of the filter. Filter names are case-sensitive.
        public let name: String?
        /// One or more filter values. Filter values are case-sensitive.
        public let values: ValueStringList?

        public init(name: String? = nil, values: ValueStringList? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Value"
        }
    }

    public struct MonitorInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct LaunchSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string)
        ]
        /// One or more block device mapping entries. Although you can specify encrypted EBS volumes in this block device mapping for your Spot Instances, these volumes are not encrypted.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let userData: String?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The ID of the kernel.
        public let kernelId: String?
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The instance type.
        public let instanceType: InstanceType?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: GroupIdentifierList?
        /// The name of the key pair.
        public let keyName: String?
        /// Deprecated.
        public let addressingType: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?

        public init(blockDeviceMappings: BlockDeviceMappingList? = nil, subnetId: String? = nil, userData: String? = nil, ebsOptimized: Bool? = nil, kernelId: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, instanceType: InstanceType? = nil, securityGroups: GroupIdentifierList? = nil, keyName: String? = nil, addressingType: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.subnetId = subnetId
            self.userData = userData
            self.ebsOptimized = ebsOptimized
            self.kernelId = kernelId
            self.monitoring = monitoring
            self.instanceType = instanceType
            self.securityGroups = securityGroups
            self.keyName = keyName
            self.addressingType = addressingType
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case subnetId = "subnetId"
            case userData = "userData"
            case ebsOptimized = "ebsOptimized"
            case kernelId = "kernelId"
            case monitoring = "monitoring"
            case instanceType = "instanceType"
            case securityGroups = "groupSet"
            case keyName = "keyName"
            case addressingType = "addressingType"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
        }
    }

    public struct RequestSpotInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .structure)
        ]
        /// One or more Spot instance requests.
        public let spotInstanceRequests: SpotInstanceRequestList?

        public init(spotInstanceRequests: SpotInstanceRequestList? = nil) {
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct CreateNetworkAclEntryRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "IcmpTypeCode", location: .body(locationName: "Icmp"), required: false, type: .structure), 
            AWSShapeMember(label: "RuleNumber", location: .body(locationName: "ruleNumber"), required: true, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .string), 
            AWSShapeMember(label: "RuleAction", location: .body(locationName: "ruleAction"), required: true, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Egress", location: .body(locationName: "egress"), required: true, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "PortRange", location: .body(locationName: "portRange"), required: false, type: .structure)
        ]
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
        public let cidrBlock: String?
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying the ICMP protocol, or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.
        public let ruleNumber: Int32
        /// The protocol. A value of -1 or all means all protocols. If you specify all, -1, or a protocol number other than tcp, udp, or icmp, traffic on all ports is allowed, regardless of any ports or ICMP types or codes you specify. If you specify protocol 58 (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol 58 (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
        public let egress: Bool
        /// The ID of the network ACL.
        public let networkAclId: String
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        public let portRange: PortRange?

        public init(cidrBlock: String? = nil, icmpTypeCode: IcmpTypeCode? = nil, ruleNumber: Int32, protocol: String, ruleAction: RuleAction, dryRun: Bool? = nil, egress: Bool, networkAclId: String, ipv6CidrBlock: String? = nil, portRange: PortRange? = nil) {
            self.cidrBlock = cidrBlock
            self.icmpTypeCode = icmpTypeCode
            self.ruleNumber = ruleNumber
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.dryRun = dryRun
            self.egress = egress
            self.networkAclId = networkAclId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock = "cidrBlock"
            case icmpTypeCode = "Icmp"
            case ruleNumber = "ruleNumber"
            case `protocol` = "protocol"
            case ruleAction = "ruleAction"
            case dryRun = "dryRun"
            case egress = "egress"
            case networkAclId = "networkAclId"
            case ipv6CidrBlock = "ipv6CidrBlock"
            case portRange = "portRange"
        }
    }

    public struct CancelBundleTaskResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleTask", location: .body(locationName: "bundleInstanceTask"), required: false, type: .structure)
        ]
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct VpcPeeringConnection: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterVpcInfo", location: .body(locationName: "requesterVpcInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "AccepterVpcInfo", location: .body(locationName: "accepterVpcInfo"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .structure), 
            AWSShapeMember(label: "ExpirationTime", location: .body(locationName: "expirationTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]
        /// Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let requesterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let accepterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// The status of the VPC peering connection.
        public let status: VpcPeeringConnectionStateReason?
        /// The time that an unaccepted VPC peering connection will expire.
        public let expirationTime: TimeStamp?
        /// Any tags assigned to the resource.
        public let tags: TagList?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(requesterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, accepterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, status: VpcPeeringConnectionStateReason? = nil, expirationTime: TimeStamp? = nil, tags: TagList? = nil, vpcPeeringConnectionId: String? = nil) {
            self.requesterVpcInfo = requesterVpcInfo
            self.accepterVpcInfo = accepterVpcInfo
            self.status = status
            self.expirationTime = expirationTime
            self.tags = tags
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case requesterVpcInfo = "requesterVpcInfo"
            case accepterVpcInfo = "accepterVpcInfo"
            case status = "status"
            case expirationTime = "expirationTime"
            case tags = "tagSet"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public enum ShutdownBehavior: String, CustomStringConvertible, Codable {
        case stop = "stop"
        case terminate = "terminate"
        public var description: String { return self.rawValue }
    }

    public struct ScheduledInstanceAvailabilitySet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ScheduledInstanceAvailability]?

        public init(item: [ScheduledInstanceAvailability]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RegisterImageResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string)
        ]
        /// The ID of the newly registered AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
        }
    }

    public struct PriceScheduleSpecificationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PriceScheduleSpecification]?

        public init(item: [PriceScheduleSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ClientData: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comment", required: false, type: .string), 
            AWSShapeMember(label: "UploadStart", required: false, type: .timestamp), 
            AWSShapeMember(label: "UploadEnd", required: false, type: .timestamp), 
            AWSShapeMember(label: "UploadSize", required: false, type: .double)
        ]
        /// A user-defined comment about the disk upload.
        public let comment: String?
        /// The time that the disk upload starts.
        public let uploadStart: TimeStamp?
        /// The time that the disk upload ends.
        public let uploadEnd: TimeStamp?
        /// The size of the uploaded disk image, in GiB.
        public let uploadSize: Double?

        public init(comment: String? = nil, uploadStart: TimeStamp? = nil, uploadEnd: TimeStamp? = nil, uploadSize: Double? = nil) {
            self.comment = comment
            self.uploadStart = uploadStart
            self.uploadEnd = uploadEnd
            self.uploadSize = uploadSize
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case uploadStart = "UploadStart"
            case uploadEnd = "UploadEnd"
            case uploadSize = "UploadSize"
        }
    }

    public struct RejectVpcPeeringConnectionResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct DiskImageDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "Checksum", location: .body(locationName: "checksum"), required: false, type: .string), 
            AWSShapeMember(label: "ImportManifestUrl", location: .body(locationName: "importManifestUrl"), required: true, type: .string), 
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: true, type: .long)
        ]
        /// The disk image format.
        public let format: DiskImageFormat
        /// The checksum computed for the disk image.
        public let checksum: String?
        /// A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String
        /// The size of the disk image, in GiB.
        public let size: Int64

        public init(format: DiskImageFormat, checksum: String? = nil, importManifestUrl: String, size: Int64) {
            self.format = format
            self.checksum = checksum
            self.importManifestUrl = importManifestUrl
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case format = "format"
            case checksum = "checksum"
            case importManifestUrl = "importManifestUrl"
            case size = "size"
        }
    }

    public enum EventCode: String, CustomStringConvertible, Codable {
        case instanceReboot = "instance-reboot"
        case systemReboot = "system-reboot"
        case systemMaintenance = "system-maintenance"
        case instanceRetirement = "instance-retirement"
        case instanceStop = "instance-stop"
        public var description: String { return self.rawValue }
    }

    public struct CreateSubnetResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", location: .body(locationName: "subnet"), required: false, type: .structure)
        ]
        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "subnet"
        }
    }

    public struct PrivateIpAddressConfigSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddressConfigSet", required: false, type: .list)
        ]
        public let privateIpAddressConfigSet: [ScheduledInstancesPrivateIpAddressConfig]?

        public init(privateIpAddressConfigSet: [ScheduledInstancesPrivateIpAddressConfig]? = nil) {
            self.privateIpAddressConfigSet = privateIpAddressConfigSet
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddressConfigSet = "PrivateIpAddressConfigSet"
        }
    }

    public struct GroupNameStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: false, type: .list)
        ]
        public let groupName: [String]?

        public init(groupName: [String]? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
        }
    }

    public struct GetConsoleOutputResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Output", location: .body(locationName: "output"), required: false, type: .string)
        ]
        /// The time the output was last updated.
        public let timestamp: TimeStamp?
        /// The ID of the instance.
        public let instanceId: String?
        /// The console output, Base64-encoded. If using a command line tool, the tool decodes the output for you.
        public let output: String?

        public init(timestamp: TimeStamp? = nil, instanceId: String? = nil, output: String? = nil) {
            self.timestamp = timestamp
            self.instanceId = instanceId
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "timestamp"
            case instanceId = "instanceId"
            case output = "output"
        }
    }

    public struct InstanceIdSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DisassociateRouteTableRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The association ID representing the current association between the route table and subnet.
        public let associationId: String

        public init(dryRun: Bool? = nil, associationId: String) {
            self.dryRun = dryRun
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case associationId = "associationId"
        }
    }

    public struct AssignIpv6AddressesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6AddressCount", location: .body(locationName: "ipv6AddressCount"), required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string)
        ]
        /// The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int32?
        /// One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
        public let ipv6Addresses: Ipv6AddressList?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6AddressCount: Int32? = nil, ipv6Addresses: Ipv6AddressList? = nil, networkInterfaceId: String) {
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6AddressCount = "ipv6AddressCount"
            case ipv6Addresses = "ipv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct DescribeImportSnapshotTasksResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ImportSnapshotTasks", location: .body(locationName: "importSnapshotTaskSet"), required: false, type: .structure)
        ]
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.
        public let importSnapshotTasks: ImportSnapshotTaskList?

        public init(nextToken: String? = nil, importSnapshotTasks: ImportSnapshotTaskList? = nil) {
            self.nextToken = nextToken
            self.importSnapshotTasks = importSnapshotTasks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case importSnapshotTasks = "importSnapshotTaskSet"
        }
    }

    public struct VpnConnectionIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnConnectionId", required: false, type: .list)
        ]
        public let vpnConnectionId: [String]?

        public init(vpnConnectionId: [String]? = nil) {
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct VolumeStatusInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", location: .body(locationName: "details"), required: false, type: .structure), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The details of the volume status.
        public let details: VolumeStatusDetailsList?
        /// The status of the volume.
        public let status: VolumeStatusInfoStatus?

        public init(details: VolumeStatusDetailsList? = nil, status: VolumeStatusInfoStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case status = "status"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct RouteTableList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [RouteTable]?

        public init(item: [RouteTable]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSubnetsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", location: .body(locationName: "subnetSet"), required: false, type: .structure)
        ]
        /// Information about one or more subnets.
        public let subnets: SubnetList?

        public init(subnets: SubnetList? = nil) {
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "subnetSet"
        }
    }

    public struct DeleteVpcPeeringConnectionResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Return", location: .body(locationName: "return"), required: false, type: .boolean)
        ]
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return` = "return"
        }
    }

    public struct StaleSecurityGroupSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [StaleSecurityGroup]?

        public init(item: [StaleSecurityGroup]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UserBucketDetails: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string), 
            AWSShapeMember(label: "S3Key", location: .body(locationName: "s3Key"), required: false, type: .string)
        ]
        /// The S3 bucket from which the disk image was created.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "s3Bucket"
            case s3Key = "s3Key"
        }
    }

    public struct RequestSpotFleetResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String

        public init(spotFleetRequestId: String) {
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct DeleteVpcEndpointsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the endpoints that were not successfully deleted.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGatewayIds", location: .body(locationName: "EgressOnlyInternetGatewayId"), required: false, type: .structure)
        ]
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value larger than 1000, only 1000 results are returned.
        public let maxResults: Int32?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// One or more egress-only Internet gateway IDs.
        public let egressOnlyInternetGatewayIds: EgressOnlyInternetGatewayIdList?

        public init(maxResults: Int32? = nil, dryRun: Bool? = nil, nextToken: String? = nil, egressOnlyInternetGatewayIds: EgressOnlyInternetGatewayIdList? = nil) {
            self.maxResults = maxResults
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.egressOnlyInternetGatewayIds = egressOnlyInternetGatewayIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case dryRun = "DryRun"
            case nextToken = "NextToken"
            case egressOnlyInternetGatewayIds = "EgressOnlyInternetGatewayId"
        }
    }

    public struct AttachInternetGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the Internet gateway.
        public let internetGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, internetGatewayId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.internetGatewayId = internetGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case internetGatewayId = "internetGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct CopySnapshotResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string)
        ]
        /// The ID of the new snapshot.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "snapshotId"
        }
    }

    public struct VpcIpv6CidrBlockAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockState", location: .body(locationName: "ipv6CidrBlockState"), required: false, type: .structure), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: VpcCidrBlockState?
        /// The association ID for the IPv6 CIDR block.
        public let associationId: String?

        public init(ipv6CidrBlock: String? = nil, ipv6CidrBlockState: VpcCidrBlockState? = nil, associationId: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
            case ipv6CidrBlockState = "ipv6CidrBlockState"
            case associationId = "associationId"
        }
    }

    public struct ScheduledInstancesIamInstanceProfile: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The name.
        public let name: String?
        /// The Amazon Resource Name (ARN).
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct ImportInstanceVolumeDetailSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ImportInstanceVolumeDetailItem]?

        public init(item: [ImportInstanceVolumeDetailItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AcceptVpcPeeringConnectionResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcPeeringConnection", location: .body(locationName: "vpcPeeringConnection"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection = "vpcPeeringConnection"
        }
    }

    public struct ImportSnapshotResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportTaskId", location: .body(locationName: "importTaskId"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotTaskDetail", location: .body(locationName: "snapshotTaskDetail"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Information about the import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// A description of the import snapshot task.
        public let description: String?

        public init(importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, description: String? = nil) {
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case importTaskId = "importTaskId"
            case snapshotTaskDetail = "snapshotTaskDetail"
            case description = "description"
        }
    }

    public struct SnapshotDiskContainer: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserBucket", required: false, type: .structure), 
            AWSShapeMember(label: "Format", required: false, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucket?
        /// The format of the disk image being imported. Valid values: RAW | VHD | VMDK | OVA 
        public let format: String?
        /// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
        public let url: String?
        /// The description of the disk image being imported.
        public let description: String?

        public init(userBucket: UserBucket? = nil, format: String? = nil, url: String? = nil, description: String? = nil) {
            self.userBucket = userBucket
            self.format = format
            self.url = url
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case userBucket = "UserBucket"
            case format = "Format"
            case url = "Url"
            case description = "Description"
        }
    }

    public struct DeleteFlowLogsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// Information about the flow logs that could not be deleted successfully.
        public let unsuccessful: UnsuccessfulItemSet?

        public init(unsuccessful: UnsuccessfulItemSet? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DescribeDhcpOptionsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptions", location: .body(locationName: "dhcpOptionsSet"), required: false, type: .structure)
        ]
        /// Information about one or more DHCP options sets.
        public let dhcpOptions: DhcpOptionsList?

        public init(dhcpOptions: DhcpOptionsList? = nil) {
            self.dhcpOptions = dhcpOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptionsSet"
        }
    }

    public struct UserIdGroupPairSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [UserIdGroupPair]?

        public init(item: [UserIdGroupPair]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteRouteRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpv6CidrBlock", location: .body(locationName: "destinationIpv6CidrBlock"), required: false, type: .string)
        ]
        /// The ID of the route table.
        public let routeTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationIpv6CidrBlock: String?

        public init(routeTableId: String, dryRun: Bool? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil) {
            self.routeTableId = routeTableId
            self.dryRun = dryRun
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "routeTableId"
            case dryRun = "dryRun"
            case destinationCidrBlock = "destinationCidrBlock"
            case destinationIpv6CidrBlock = "destinationIpv6CidrBlock"
        }
    }

    public struct IamInstanceProfileAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure)
        ]
        /// The time the IAM instance profile was associated with the instance.
        public let timestamp: TimeStamp?
        /// The ID of the association.
        public let associationId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The state of the association.
        public let state: IamInstanceProfileAssociationState?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfile?

        public init(timestamp: TimeStamp? = nil, associationId: String? = nil, instanceId: String? = nil, state: IamInstanceProfileAssociationState? = nil, iamInstanceProfile: IamInstanceProfile? = nil) {
            self.timestamp = timestamp
            self.associationId = associationId
            self.instanceId = instanceId
            self.state = state
            self.iamInstanceProfile = iamInstanceProfile
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "timestamp"
            case associationId = "associationId"
            case instanceId = "instanceId"
            case state = "state"
            case iamInstanceProfile = "iamInstanceProfile"
        }
    }

    public struct PeeringConnectionOptions: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", location: .body(locationName: "allowEgressFromLocalVpcToRemoteClassicLink"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", location: .body(locationName: "allowEgressFromLocalClassicLinkToRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", location: .body(locationName: "allowDnsResolutionFromRemoteVpc"), required: false, type: .boolean)
        ]
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC via ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC via ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?

        public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowDnsResolutionFromRemoteVpc: Bool? = nil) {
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
        }

        private enum CodingKeys: String, CodingKey {
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
        }
    }

    public struct DetachVpnGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(vpcId: String, dryRun: Bool? = nil, vpnGatewayId: String) {
            self.vpcId = vpcId
            self.dryRun = dryRun
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case dryRun = "dryRun"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct RouteTableAssociation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableAssociationId", location: .body(locationName: "routeTableAssociationId"), required: false, type: .string), 
            AWSShapeMember(label: "Main", location: .body(locationName: "main"), required: false, type: .boolean)
        ]
        /// The ID of the subnet. A subnet ID is not returned for an implicit association.
        public let subnetId: String?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of the association between a route table and a subnet.
        public let routeTableAssociationId: String?
        /// Indicates whether this is the main route table.
        public let main: Bool?

        public init(subnetId: String? = nil, routeTableId: String? = nil, routeTableAssociationId: String? = nil, main: Bool? = nil) {
            self.subnetId = subnetId
            self.routeTableId = routeTableId
            self.routeTableAssociationId = routeTableAssociationId
            self.main = main
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case routeTableId = "routeTableId"
            case routeTableAssociationId = "routeTableAssociationId"
            case main = "main"
        }
    }

    public struct ReservedInstancesListingList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesListing]?

        public init(item: [ReservedInstancesListing]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct UnmonitorInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", location: .body(locationName: "InstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more instance IDs.
        public let instanceIds: InstanceIdStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceIds: InstanceIdStringList, dryRun: Bool? = nil) {
            self.instanceIds = instanceIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeExportTasksRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskIds", location: .body(locationName: "exportTaskId"), required: false, type: .structure)
        ]
        /// One or more export task IDs.
        public let exportTaskIds: ExportTaskIdStringList?

        public init(exportTaskIds: ExportTaskIdStringList? = nil) {
            self.exportTaskIds = exportTaskIds
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskIds = "exportTaskId"
        }
    }

    public struct PricingDetail: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Price", location: .body(locationName: "price"), required: false, type: .double), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer)
        ]
        /// The price per instance.
        public let price: Double?
        /// The number of reservations available for the price.
        public let count: Int32?

        public init(price: Double? = nil, count: Int32? = nil) {
            self.price = price
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case price = "price"
            case count = "count"
        }
    }

    public struct ConversionIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VolumeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Volume]?

        public init(item: [Volume]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetConsoleScreenshotResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "ImageData", location: .body(locationName: "imageData"), required: false, type: .string)
        ]
        /// The ID of the instance.
        public let instanceId: String?
        /// The data that comprises the image.
        public let imageData: String?

        public init(instanceId: String? = nil, imageData: String? = nil) {
            self.instanceId = instanceId
            self.imageData = imageData
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "instanceId"
            case imageData = "imageData"
        }
    }

    public struct DescribeReservedInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesIds", location: .body(locationName: "ReservedInstancesId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "OfferingType", location: .body(locationName: "offeringType"), required: false, type: .enum), 
            AWSShapeMember(label: "OfferingClass", required: false, type: .enum)
        ]
        /// One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified.
        public let reservedInstancesIds: ReservedInstancesIdStringList?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (one year or three years), in seconds (31536000 | 94608000).    end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    scope - The scope of the Reserved Instance (Region or Availability Zone).    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web | Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC)).    reserved-instances-id - The ID of the Reserved Instance.    start - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).    state - The state of the Reserved Instance (payment-pending | active | payment-failed | retired).    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// Describes whether the Reserved Instance is Standard or Convertible.
        public let offeringClass: OfferingClassType?

        public init(reservedInstancesIds: ReservedInstancesIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, offeringType: OfferingTypeValues? = nil, offeringClass: OfferingClassType? = nil) {
            self.reservedInstancesIds = reservedInstancesIds
            self.filters = filters
            self.dryRun = dryRun
            self.offeringType = offeringType
            self.offeringClass = offeringClass
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesIds = "ReservedInstancesId"
            case filters = "Filter"
            case dryRun = "dryRun"
            case offeringType = "offeringType"
            case offeringClass = "OfferingClass"
        }
    }

    public struct Placement: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Affinity", location: .body(locationName: "affinity"), required: false, type: .string), 
            AWSShapeMember(label: "SpreadDomain", location: .body(locationName: "spreadDomain"), required: false, type: .string), 
            AWSShapeMember(label: "HostId", location: .body(locationName: "hostId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Tenancy", location: .body(locationName: "tenancy"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]
        /// The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the ImportInstance command.
        public let affinity: String?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the ImportInstance command.
        public let hostId: String?
        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the ImportInstance command.
        public let tenancy: Tenancy?
        /// The name of the placement group the instance is in (for cluster compute instances).
        public let groupName: String?

        public init(affinity: String? = nil, spreadDomain: String? = nil, hostId: String? = nil, availabilityZone: String? = nil, tenancy: Tenancy? = nil, groupName: String? = nil) {
            self.affinity = affinity
            self.spreadDomain = spreadDomain
            self.hostId = hostId
            self.availabilityZone = availabilityZone
            self.tenancy = tenancy
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "affinity"
            case spreadDomain = "spreadDomain"
            case hostId = "hostId"
            case availabilityZone = "availabilityZone"
            case tenancy = "tenancy"
            case groupName = "groupName"
        }
    }

    public struct VolumeStatusList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VolumeStatusItem]?

        public init(item: [VolumeStatusItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct RouteList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Route]?

        public init(item: [Route]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum AttachmentStatus: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        public var description: String { return self.rawValue }
    }

    public struct DescribeStaleSecurityGroupsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaleSecurityGroupSet", location: .body(locationName: "staleSecurityGroupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the stale security groups.
        public let staleSecurityGroupSet: StaleSecurityGroupSet?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(staleSecurityGroupSet: StaleSecurityGroupSet? = nil, nextToken: String? = nil) {
            self.staleSecurityGroupSet = staleSecurityGroupSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case staleSecurityGroupSet = "staleSecurityGroupSet"
            case nextToken = "nextToken"
        }
    }

    public struct ScheduledInstancesNetworkInterface: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceIndex", required: false, type: .integer), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddressConfigs", location: .body(locationName: "PrivateIpAddressConfig"), required: false, type: .structure), 
            AWSShapeMember(label: "SecondaryPrivateIpAddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6AddressCount", required: false, type: .integer), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "Ipv6Address"), required: false, type: .structure), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "Group"), required: false, type: .structure), 
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .string)
        ]
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int32?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// The private IPv4 addresses.
        public let privateIpAddressConfigs: PrivateIpAddressConfigSet?
        /// The number of secondary private IPv4 addresses.
        public let secondaryPrivateIpAddressCount: Int32?
        /// The description.
        public let description: String?
        /// The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
        public let ipv6AddressCount: Int32?
        /// One or more specific IPv6 addresses from the subnet range.
        public let ipv6Addresses: ScheduledInstancesIpv6AddressList?
        /// Indicates whether to delete the interface when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The IDs of one or more security groups.
        public let groups: ScheduledInstancesSecurityGroupIdSet?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?

        public init(deviceIndex: Int32? = nil, subnetId: String? = nil, networkInterfaceId: String? = nil, associatePublicIpAddress: Bool? = nil, privateIpAddressConfigs: PrivateIpAddressConfigSet? = nil, secondaryPrivateIpAddressCount: Int32? = nil, description: String? = nil, ipv6AddressCount: Int32? = nil, ipv6Addresses: ScheduledInstancesIpv6AddressList? = nil, deleteOnTermination: Bool? = nil, groups: ScheduledInstancesSecurityGroupIdSet? = nil, privateIpAddress: String? = nil) {
            self.deviceIndex = deviceIndex
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
            self.associatePublicIpAddress = associatePublicIpAddress
            self.privateIpAddressConfigs = privateIpAddressConfigs
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.description = description
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.deleteOnTermination = deleteOnTermination
            self.groups = groups
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case deviceIndex = "DeviceIndex"
            case subnetId = "SubnetId"
            case networkInterfaceId = "NetworkInterfaceId"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case privateIpAddressConfigs = "PrivateIpAddressConfig"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case description = "Description"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Address"
            case deleteOnTermination = "DeleteOnTermination"
            case groups = "Group"
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct UserIdGroupPair: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PeeringStatus", location: .body(locationName: "peeringStatus"), required: false, type: .string), 
            AWSShapeMember(label: "UserId", location: .body(locationName: "userId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "VpcPeeringConnectionId", location: .body(locationName: "vpcPeeringConnectionId"), required: false, type: .string)
        ]
        /// The status of a VPC peering connection, if applicable.
        public let peeringStatus: String?
        /// The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
        public let userId: String?
        /// The ID of the VPC for the referenced security group, if applicable.
        public let vpcId: String?
        /// The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.
        public let groupName: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The ID of the VPC peering connection, if applicable.
        public let vpcPeeringConnectionId: String?

        public init(peeringStatus: String? = nil, userId: String? = nil, vpcId: String? = nil, groupName: String? = nil, groupId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.peeringStatus = peeringStatus
            self.userId = userId
            self.vpcId = vpcId
            self.groupName = groupName
            self.groupId = groupId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case peeringStatus = "peeringStatus"
            case userId = "userId"
            case vpcId = "vpcId"
            case groupName = "groupName"
            case groupId = "groupId"
            case vpcPeeringConnectionId = "vpcPeeringConnectionId"
        }
    }

    public struct DescribeConversionTasksRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "ConversionTaskIds", location: .body(locationName: "conversionTaskId"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more conversion task IDs.
        public let conversionTaskIds: ConversionIdStringList?

        public init(dryRun: Bool? = nil, conversionTaskIds: ConversionIdStringList? = nil) {
            self.dryRun = dryRun
            self.conversionTaskIds = conversionTaskIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case conversionTaskIds = "conversionTaskId"
        }
    }

    public struct ModifySubnetAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MapPublicIpOnLaunch", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string), 
            AWSShapeMember(label: "AssignIpv6AddressOnCreation", required: false, type: .structure)
        ]
        /// Specify true to indicate that network interfaces created in the specified subnet should be assigned a public IPv4 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives a public IPv4 address).
        public let mapPublicIpOnLaunch: AttributeBooleanValue?
        /// The ID of the subnet.
        public let subnetId: String
        /// Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).  If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API.
        public let assignIpv6AddressOnCreation: AttributeBooleanValue?

        public init(mapPublicIpOnLaunch: AttributeBooleanValue? = nil, subnetId: String, assignIpv6AddressOnCreation: AttributeBooleanValue? = nil) {
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.subnetId = subnetId
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
        }

        private enum CodingKeys: String, CodingKey {
            case mapPublicIpOnLaunch = "MapPublicIpOnLaunch"
            case subnetId = "subnetId"
            case assignIpv6AddressOnCreation = "AssignIpv6AddressOnCreation"
        }
    }

    public struct PlacementGroup: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Strategy", location: .body(locationName: "strategy"), required: false, type: .enum), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]
        /// The state of the placement group.
        public let state: PlacementGroupState?
        /// The placement strategy.
        public let strategy: PlacementStrategy?
        /// The name of the placement group.
        public let groupName: String?

        public init(state: PlacementGroupState? = nil, strategy: PlacementStrategy? = nil, groupName: String? = nil) {
            self.state = state
            self.strategy = strategy
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case strategy = "strategy"
            case groupName = "groupName"
        }
    }

    public struct InstanceBlockDeviceMappingSpecificationList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceBlockDeviceMappingSpecification]?

        public init(item: [InstanceBlockDeviceMappingSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AssociateAddressResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: false, type: .string)
        ]
        /// [EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
        }
    }

    public struct Reservation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterId", location: .body(locationName: "requesterId"), required: false, type: .string), 
            AWSShapeMember(label: "Instances", location: .body(locationName: "instancesSet"), required: false, type: .structure), 
            AWSShapeMember(label: "ReservationId", location: .body(locationName: "reservationId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure)
        ]
        /// The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
        public let requesterId: String?
        /// One or more instances.
        public let instances: InstanceList?
        /// The ID of the reservation.
        public let reservationId: String?
        /// The ID of the AWS account that owns the reservation.
        public let ownerId: String?
        /// [EC2-Classic only] One or more security groups.
        public let groups: GroupIdentifierList?

        public init(requesterId: String? = nil, instances: InstanceList? = nil, reservationId: String? = nil, ownerId: String? = nil, groups: GroupIdentifierList? = nil) {
            self.requesterId = requesterId
            self.instances = instances
            self.reservationId = reservationId
            self.ownerId = ownerId
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case requesterId = "requesterId"
            case instances = "instancesSet"
            case reservationId = "reservationId"
            case ownerId = "ownerId"
            case groups = "groupSet"
        }
    }

    public enum ReservationState: String, CustomStringConvertible, Codable {
        case paymentPending = "payment-pending"
        case paymentFailed = "payment-failed"
        case active = "active"
        case retired = "retired"
        public var description: String { return self.rawValue }
    }

    public struct SpotFleetRequestConfigData: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetCapacity", location: .body(locationName: "targetCapacity"), required: true, type: .integer), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "IamFleetRole", location: .body(locationName: "iamFleetRole"), required: true, type: .string), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: true, type: .string), 
            AWSShapeMember(label: "ValidUntil", location: .body(locationName: "validUntil"), required: false, type: .timestamp), 
            AWSShapeMember(label: "AllocationStrategy", location: .body(locationName: "allocationStrategy"), required: false, type: .enum), 
            AWSShapeMember(label: "ExcessCapacityTerminationPolicy", location: .body(locationName: "excessCapacityTerminationPolicy"), required: false, type: .enum), 
            AWSShapeMember(label: "ValidFrom", location: .body(locationName: "validFrom"), required: false, type: .timestamp), 
            AWSShapeMember(label: "LaunchSpecifications", location: .body(locationName: "launchSpecifications"), required: true, type: .structure), 
            AWSShapeMember(label: "TerminateInstancesWithExpiration", location: .body(locationName: "terminateInstancesWithExpiration"), required: false, type: .boolean), 
            AWSShapeMember(label: "ReplaceUnhealthyInstances", location: .body(locationName: "replaceUnhealthyInstances"), required: false, type: .boolean), 
            AWSShapeMember(label: "FulfilledCapacity", location: .body(locationName: "fulfilledCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: false, type: .enum)
        ]
        /// The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O.
        public let targetCapacity: Int32
        /// A unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Grants the Spot fleet permission to terminate Spot instances on your behalf when you cancel its Spot fleet request using CancelSpotFleetRequests or when the Spot fleet request expires, if you set terminateInstancesWithExpiration.
        public let iamFleetRole: String
        /// The bid price per unit hour.
        public let spotPrice: String
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request.
        public let validUntil: TimeStamp?
        /// Indicates how to allocate the target capacity across the Spot pools specified by the Spot fleet request. The default is lowestPrice.
        public let allocationStrategy: AllocationStrategy?
        /// Indicates whether running Spot instances should be terminated if the target capacity of the Spot fleet request is decreased below the current size of the Spot fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: TimeStamp?
        /// Information about the launch specifications for the Spot fleet request.
        public let launchSpecifications: LaunchSpecsList
        /// Indicates whether running Spot instances should be terminated when the Spot fleet request expires.
        public let terminateInstancesWithExpiration: Bool?
        /// Indicates whether Spot fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The number of units fulfilled by this request compared to the set target capacity.
        public let fulfilledCapacity: Double?
        /// The type of request. Indicates whether the fleet will only request the target capacity or also attempt to maintain it. When you request a certain target capacity, the fleet will only place the required bids. It will not attempt to replenish Spot instances if capacity is diminished, nor will it submit bids in alternative Spot pools if capacity is not available. When you want to maintain a certain target capacity, fleet will place the required bids to meet this target capacity. It will also automatically replenish any interrupted instances. Default: maintain.
        public let `type`: FleetType?

        public init(targetCapacity: Int32, clientToken: String? = nil, iamFleetRole: String, spotPrice: String, validUntil: TimeStamp? = nil, allocationStrategy: AllocationStrategy? = nil, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, validFrom: TimeStamp? = nil, launchSpecifications: LaunchSpecsList, terminateInstancesWithExpiration: Bool? = nil, replaceUnhealthyInstances: Bool? = nil, fulfilledCapacity: Double? = nil, type: FleetType? = nil) {
            self.targetCapacity = targetCapacity
            self.clientToken = clientToken
            self.iamFleetRole = iamFleetRole
            self.spotPrice = spotPrice
            self.validUntil = validUntil
            self.allocationStrategy = allocationStrategy
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.validFrom = validFrom
            self.launchSpecifications = launchSpecifications
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.fulfilledCapacity = fulfilledCapacity
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case targetCapacity = "targetCapacity"
            case clientToken = "clientToken"
            case iamFleetRole = "iamFleetRole"
            case spotPrice = "spotPrice"
            case validUntil = "validUntil"
            case allocationStrategy = "allocationStrategy"
            case excessCapacityTerminationPolicy = "excessCapacityTerminationPolicy"
            case validFrom = "validFrom"
            case launchSpecifications = "launchSpecifications"
            case terminateInstancesWithExpiration = "terminateInstancesWithExpiration"
            case replaceUnhealthyInstances = "replaceUnhealthyInstances"
            case fulfilledCapacity = "fulfilledCapacity"
            case `type` = "type"
        }
    }

    public struct ImageList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Image]?

        public init(item: [Image]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum BundleTaskState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case waitingForShutdown = "waiting-for-shutdown"
        case bundling = "bundling"
        case storing = "storing"
        case cancelling = "cancelling"
        case complete = "complete"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct DeleteInternetGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the Internet gateway.
        public let internetGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(internetGatewayId: String, dryRun: Bool? = nil) {
            self.internetGatewayId = internetGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case internetGatewayId = "internetGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeFpgaImagesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "FpgaImageIds", location: .body(locationName: "FpgaImageId"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Owners", location: .body(locationName: "Owner"), required: false, type: .structure)
        ]
        /// The maximum number of results to return in a single call.
        public let maxResults: Int32?
        /// One or more filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The AWS account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the AWS Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    update-time - The time of the most recent update.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more AFI IDs.
        public let fpgaImageIds: FpgaImageIdList?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// Filters the AFI by owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace).
        public let owners: OwnerStringList?

        public init(maxResults: Int32? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, fpgaImageIds: FpgaImageIdList? = nil, nextToken: String? = nil, owners: OwnerStringList? = nil) {
            self.maxResults = maxResults
            self.filters = filters
            self.dryRun = dryRun
            self.fpgaImageIds = fpgaImageIds
            self.nextToken = nextToken
            self.owners = owners
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case filters = "Filter"
            case dryRun = "DryRun"
            case fpgaImageIds = "FpgaImageId"
            case nextToken = "NextToken"
            case owners = "Owner"
        }
    }

    public struct ScheduledInstancesBlockDeviceMapping: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoDevice", required: false, type: .string), 
            AWSShapeMember(label: "VirtualName", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "Ebs", required: false, type: .structure)
        ]
        /// Suppresses the specified device included in the block device mapping of the AMI.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for ephemeral0 and ephemeral1.The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?
        /// The device name exposed to the instance (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to set up EBS volumes automatically when the instance is launched.
        public let ebs: ScheduledInstancesEbs?

        public init(noDevice: String? = nil, virtualName: String? = nil, deviceName: String? = nil, ebs: ScheduledInstancesEbs? = nil) {
            self.noDevice = noDevice
            self.virtualName = virtualName
            self.deviceName = deviceName
            self.ebs = ebs
        }

        private enum CodingKeys: String, CodingKey {
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
            case deviceName = "DeviceName"
            case ebs = "Ebs"
        }
    }

    public struct StateReason: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The reason code for the state change.
        public let code: String?
        /// The message for the state change.    Server.InsufficientInstanceCapacity: There was insufficient instance capacity to satisfy the launch request.    Server.InternalError: An internal error occurred during instance launch, resulting in termination.    Server.ScheduledStop: The instance was stopped due to a scheduled retirement.    Server.SpotInstanceTermination: A Spot instance was terminated due to an increase in the market price.    Client.InternalError: A client error caused the instance to terminate on launch.    Client.InstanceInitiatedShutdown: The instance was shut down using the shutdown -h command from the instance.    Client.UserInitiatedShutdown: The instance was shut down using the Amazon EC2 API.    Client.VolumeLimitExceeded: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your limits.    Client.InvalidSnapshot.NotFound: The specified snapshot was not found.  
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DeleteTagsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tag"), required: false, type: .structure), 
            AWSShapeMember(label: "Resources", location: .body(locationName: "resourceId"), required: true, type: .list)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more tags to delete. If you omit the value parameter, we delete the tag regardless of its value. If you specify this parameter with an empty string as the value, we delete the key only if its value is an empty string.
        public let tags: TagList?
        /// The ID of the resource. For example, ami-1a2b3c4d. You can specify more than one resource ID.
        public let resources: [String]

        public init(dryRun: Bool? = nil, tags: TagList? = nil, resources: [String]) {
            self.dryRun = dryRun
            self.tags = tags
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case tags = "tag"
            case resources = "resourceId"
        }
    }

    public struct InstancePrivateIpAddressList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstancePrivateIpAddress]?

        public init(item: [InstancePrivateIpAddress]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum VpcPeeringConnectionStateReasonCode: String, CustomStringConvertible, Codable {
        case initiatingRequest = "initiating-request"
        case pendingAcceptance = "pending-acceptance"
        case active = "active"
        case deleted = "deleted"
        case rejected = "rejected"
        case failed = "failed"
        case expired = "expired"
        case provisioning = "provisioning"
        case deleting = "deleting"
        public var description: String { return self.rawValue }
    }

    public struct IdFormatList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IdFormat]?

        public init(item: [IdFormat]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstanceBlockDeviceMappingList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [InstanceBlockDeviceMapping]?

        public init(item: [InstanceBlockDeviceMapping]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeSpotInstanceRequestsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "SpotInstanceRequestIds", location: .body(locationName: "SpotInstanceRequestId"), required: false, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the Amazon EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the Amazon EBS volume (for example, /dev/sdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot used for the Amazon EBS volume.    launch.block-device-mapping.volume-size - The size of the Amazon EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of the Amazon EBS volume: gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.    launch.group-id - The security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether monitoring is enabled for the Spot instance.    launch.ramdisk-id - The RAM disk ID.    network-interface.network-interface-id - The ID of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.subnet-id - The ID of the subnet for the instance.    network-interface.description - A description of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.group-name - The name of the security group associated with the network interface.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot instance request ID.    spot-price - The maximum hourly price for any Spot instance launched to fulfill the request.    state - The state of the Spot instance request (open | active | closed | cancelled | failed). Spot bid status information can help you track your Amazon EC2 Spot instance requests. For more information, see Spot Bid Status in the Amazon Elastic Compute Cloud User Guide.    status-code - The short code describing the most recent evaluation of your Spot instance request.    status-message - The message explaining the status of the Spot instance request.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.    type - The type of Spot instance request (one-time | persistent).    launched-availability-zone - The Availability Zone in which the bid is launched.    valid-from - The start date of the request.    valid-until - The end date of the request.  
        public let filters: FilterList?
        /// One or more Spot instance request IDs.
        public let spotInstanceRequestIds: SpotInstanceRequestIdList?

        public init(dryRun: Bool? = nil, filters: FilterList? = nil, spotInstanceRequestIds: SpotInstanceRequestIdList? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct AttachClassicLinkVpcRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: true, type: .structure)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of a ClassicLink-enabled VPC.
        public let vpcId: String
        /// The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
        public let instanceId: String
        /// The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.
        public let groups: GroupIdStringList

        public init(dryRun: Bool? = nil, vpcId: String, instanceId: String, groups: GroupIdStringList) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.instanceId = instanceId
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case vpcId = "vpcId"
            case instanceId = "instanceId"
            case groups = "SecurityGroupId"
        }
    }

    public struct ReleaseHostsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .structure), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// The IDs of the Dedicated Hosts that were successfully released.
        public let successful: ResponseHostIdList?
        /// The IDs of the Dedicated Hosts that could not be released, including an error message.
        public let unsuccessful: UnsuccessfulItemList?

        public init(successful: ResponseHostIdList? = nil, unsuccessful: UnsuccessfulItemList? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct ScheduledInstanceIdRequestSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledInstanceId", required: false, type: .list)
        ]
        public let scheduledInstanceId: [String]?

        public init(scheduledInstanceId: [String]? = nil) {
            self.scheduledInstanceId = scheduledInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceId = "ScheduledInstanceId"
        }
    }

    public struct ExportToS3TaskSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Prefix", location: .body(locationName: "s3Prefix"), required: false, type: .string), 
            AWSShapeMember(label: "ContainerFormat", location: .body(locationName: "containerFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "DiskImageFormat", location: .body(locationName: "diskImageFormat"), required: false, type: .enum), 
            AWSShapeMember(label: "S3Bucket", location: .body(locationName: "s3Bucket"), required: false, type: .string)
        ]
        /// The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
        public let s3Prefix: String?
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?

        public init(s3Prefix: String? = nil, containerFormat: ContainerFormat? = nil, diskImageFormat: DiskImageFormat? = nil, s3Bucket: String? = nil) {
            self.s3Prefix = s3Prefix
            self.containerFormat = containerFormat
            self.diskImageFormat = diskImageFormat
            self.s3Bucket = s3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case s3Prefix = "s3Prefix"
            case containerFormat = "containerFormat"
            case diskImageFormat = "diskImageFormat"
            case s3Bucket = "s3Bucket"
        }
    }

    public struct CancelSpotFleetRequestsError: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: true, type: .enum), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: true, type: .string)
        ]
        /// The error code.
        public let code: CancelBatchErrorCode
        /// The description for the error code.
        public let message: String

        public init(code: CancelBatchErrorCode, message: String) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DescribeKeyPairsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyNames", location: .body(locationName: "KeyName"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// One or more key pair names. Default: Describes all your key pairs.
        public let keyNames: KeyNameStringList?
        /// One or more filters.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(keyNames: KeyNameStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.keyNames = keyNames
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case keyNames = "KeyName"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeReservedInstancesOfferingsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesOfferings", location: .body(locationName: "reservedInstancesOfferingsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// A list of Reserved Instances offerings.
        public let reservedInstancesOfferings: ReservedInstancesOfferingList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(reservedInstancesOfferings: ReservedInstancesOfferingList? = nil, nextToken: String? = nil) {
            self.reservedInstancesOfferings = reservedInstancesOfferings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesOfferings = "reservedInstancesOfferingsSet"
            case nextToken = "nextToken"
        }
    }

    public enum RecurringChargeFrequency: String, CustomStringConvertible, Codable {
        case hourly = "Hourly"
        public var description: String { return self.rawValue }
    }

    public struct VpnStaticRoute: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationCidrBlock", location: .body(locationName: "destinationCidrBlock"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: false, type: .enum)
        ]
        /// The CIDR block associated with the local subnet of the customer data center.
        public let destinationCidrBlock: String?
        /// The current state of the static route.
        public let state: VpnState?
        /// Indicates how the routes were provided.
        public let source: VpnStaticRouteSource?

        public init(destinationCidrBlock: String? = nil, state: VpnState? = nil, source: VpnStaticRouteSource? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.state = state
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "destinationCidrBlock"
            case state = "state"
            case source = "source"
        }
    }

    public struct CopySnapshotRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", location: .body(locationName: "kmsKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: true, type: .string), 
            AWSShapeMember(label: "Encrypted", location: .body(locationName: "encrypted"), required: false, type: .boolean), 
            AWSShapeMember(label: "DestinationRegion", location: .body(locationName: "destinationRegion"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "PresignedUrl", location: .body(locationName: "presignedUrl"), required: false, type: .string), 
            AWSShapeMember(label: "SourceSnapshotId", required: true, type: .string)
        ]
        /// A description for the EBS snapshot.
        public let description: String?
        /// The full ARN of the AWS Key Management Service (AWS KMS) CMK to use when creating the snapshot copy. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. The ARN contains the arn:aws:kms namespace, followed by the region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef. The specified CMK must exist in the region that the snapshot is being copied to. If a KmsKeyId is specified, the Encrypted flag must also be set.
        public let kmsKeyId: String?
        /// The ID of the region that contains the snapshot to be copied.
        public let sourceRegion: String
        /// Specifies whether the destination snapshot should be encrypted. You can encrypt a copy of an unencrypted snapshot using this flag, but you cannot use it to create an unencrypted copy from an encrypted snapshot. Your default CMK for EBS is used unless a non-default AWS Key Management Service (AWS KMS) CMK is specified with KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The destination region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination region in a PresignedUrl parameter, where it is required.   CopySnapshot sends the snapshot copy to the regional endpoint that you send the HTTP request to, such as ec2.us-east-1.amazonaws.com (in the AWS CLI, this is specified with the --region parameter or the default region in your AWS configuration file). 
        public let destinationRegion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The pre-signed URL that facilitates copying an encrypted snapshot. This parameter is only required when copying an encrypted snapshot with the Amazon EC2 Query API; it is available as an optional parameter in all other cases. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in Authenticating Requests by Using Query Parameters (AWS Signature Version 4) in the Amazon Simple Storage Service API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state.
        public let presignedUrl: String?
        /// The ID of the EBS snapshot to copy.
        public let sourceSnapshotId: String

        public init(description: String? = nil, kmsKeyId: String? = nil, sourceRegion: String, encrypted: Bool? = nil, destinationRegion: String? = nil, dryRun: Bool? = nil, presignedUrl: String? = nil, sourceSnapshotId: String) {
            self.description = description
            self.kmsKeyId = kmsKeyId
            self.sourceRegion = sourceRegion
            self.encrypted = encrypted
            self.destinationRegion = destinationRegion
            self.dryRun = dryRun
            self.presignedUrl = presignedUrl
            self.sourceSnapshotId = sourceSnapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case kmsKeyId = "kmsKeyId"
            case sourceRegion = "SourceRegion"
            case encrypted = "encrypted"
            case destinationRegion = "destinationRegion"
            case dryRun = "dryRun"
            case presignedUrl = "presignedUrl"
            case sourceSnapshotId = "SourceSnapshotId"
        }
    }

    public enum StatusName: String, CustomStringConvertible, Codable {
        case reachability = "reachability"
        public var description: String { return self.rawValue }
    }

    public struct IpRangeList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [IpRange]?

        public init(item: [IpRange]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VpnConnectionList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpnConnection]?

        public init(item: [VpnConnection]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribePlacementGroupsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementGroups", location: .body(locationName: "placementGroupSet"), required: false, type: .structure)
        ]
        /// One or more placement groups.
        public let placementGroups: PlacementGroupList?

        public init(placementGroups: PlacementGroupList? = nil) {
            self.placementGroups = placementGroups
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroups = "placementGroupSet"
        }
    }

    public struct DetachVolumeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Force", required: false, type: .boolean)
        ]
        /// The device name.
        public let device: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String?
        /// The ID of the volume.
        public let volumeId: String
        /// Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
        public let force: Bool?

        public init(device: String? = nil, dryRun: Bool? = nil, instanceId: String? = nil, volumeId: String, force: Bool? = nil) {
            self.device = device
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.volumeId = volumeId
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun = "dryRun"
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
            case force = "Force"
        }
    }

    public struct EgressOnlyInternetGateway: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EgressOnlyInternetGatewayId", location: .body(locationName: "egressOnlyInternetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .structure)
        ]
        /// The ID of the egress-only Internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// Information about the attachment of the egress-only Internet gateway.
        public let attachments: InternetGatewayAttachmentList?

        public init(egressOnlyInternetGatewayId: String? = nil, attachments: InternetGatewayAttachmentList? = nil) {
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.attachments = attachments
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId"
            case attachments = "attachmentSet"
        }
    }

    public struct EnableVgwRoutePropagationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "GatewayId", required: true, type: .string)
        ]
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of the virtual private gateway.
        public let gatewayId: String

        public init(routeTableId: String, gatewayId: String) {
            self.routeTableId = routeTableId
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "RouteTableId"
            case gatewayId = "GatewayId"
        }
    }

    public struct LaunchSpecsList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SpotFleetLaunchSpecification]?

        public init(item: [SpotFleetLaunchSpecification]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct GetReservedInstancesExchangeQuoteRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstanceIds", location: .body(locationName: "ReservedInstanceId"), required: true, type: .structure), 
            AWSShapeMember(label: "TargetConfigurations", location: .body(locationName: "TargetConfiguration"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// The IDs of the Convertible Reserved Instances to exchange.
        public let reservedInstanceIds: ReservedInstanceIdSet
        /// The configuration requirements of the Convertible Reserved Instances to exchange for your current Convertible Reserved Instances.
        public let targetConfigurations: TargetConfigurationRequestSet?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(reservedInstanceIds: ReservedInstanceIdSet, targetConfigurations: TargetConfigurationRequestSet? = nil, dryRun: Bool? = nil) {
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
            case dryRun = "DryRun"
        }
    }

    public struct SpotFleetLaunchSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .string), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .boolean), 
            AWSShapeMember(label: "KernelId", location: .body(locationName: "kernelId"), required: false, type: .string), 
            AWSShapeMember(label: "SpotPrice", location: .body(locationName: "spotPrice"), required: false, type: .string), 
            AWSShapeMember(label: "Monitoring", location: .body(locationName: "monitoring"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .enum), 
            AWSShapeMember(label: "WeightedCapacity", location: .body(locationName: "weightedCapacity"), required: false, type: .double), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "AddressingType", location: .body(locationName: "addressingType"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Placement", location: .body(locationName: "placement"), required: false, type: .structure), 
            AWSShapeMember(label: "RamdiskId", location: .body(locationName: "ramdiskId"), required: false, type: .string)
        ]
        /// One or more block device mapping entries.
        public let blockDeviceMappings: BlockDeviceMappingList?
        /// The ID of the subnet in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-a61dafcf, subnet-65ea5f08".
        public let subnetId: String?
        /// The user data to make available to the instances. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let userData: String?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false 
        public let ebsOptimized: Bool?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The bid price per unit hour for the specified instance type. If this value is not specified, the default is the Spot bid price specified for the fleet. To determine the bid price per unit hour, divide the Spot bid price by the value of WeightedCapacity.
        public let spotPrice: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: SpotFleetMonitoring?
        /// The instance type. Note that T2 and HS1 instance types are not supported.
        public let instanceType: InstanceType?
        /// The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms (instances or a performance characteristic such as vCPUs, memory, or I/O). If the target capacity divided by this value is not a whole number, we round the number of instances to the next whole number. If this value is not specified, the default is 1.
        public let weightedCapacity: Double?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        public let securityGroups: GroupIdentifierList?
        /// The name of the key pair.
        public let keyName: String?
        /// Deprecated.
        public let addressingType: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        public let networkInterfaces: InstanceNetworkInterfaceSpecificationList?
        /// The placement information.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?

        public init(blockDeviceMappings: BlockDeviceMappingList? = nil, subnetId: String? = nil, userData: String? = nil, ebsOptimized: Bool? = nil, kernelId: String? = nil, spotPrice: String? = nil, monitoring: SpotFleetMonitoring? = nil, instanceType: InstanceType? = nil, weightedCapacity: Double? = nil, securityGroups: GroupIdentifierList? = nil, keyName: String? = nil, addressingType: String? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, networkInterfaces: InstanceNetworkInterfaceSpecificationList? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.subnetId = subnetId
            self.userData = userData
            self.ebsOptimized = ebsOptimized
            self.kernelId = kernelId
            self.spotPrice = spotPrice
            self.monitoring = monitoring
            self.instanceType = instanceType
            self.weightedCapacity = weightedCapacity
            self.securityGroups = securityGroups
            self.keyName = keyName
            self.addressingType = addressingType
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case subnetId = "subnetId"
            case userData = "userData"
            case ebsOptimized = "ebsOptimized"
            case kernelId = "kernelId"
            case spotPrice = "spotPrice"
            case monitoring = "monitoring"
            case instanceType = "instanceType"
            case weightedCapacity = "weightedCapacity"
            case securityGroups = "groupSet"
            case keyName = "keyName"
            case addressingType = "addressingType"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageId = "imageId"
            case networkInterfaces = "networkInterfaceSet"
            case placement = "placement"
            case ramdiskId = "ramdiskId"
        }
    }

    public struct Region: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoint", location: .body(locationName: "regionEndpoint"), required: false, type: .string), 
            AWSShapeMember(label: "RegionName", location: .body(locationName: "regionName"), required: false, type: .string)
        ]
        /// The region service endpoint.
        public let endpoint: String?
        /// The name of the region.
        public let regionName: String?

        public init(endpoint: String? = nil, regionName: String? = nil) {
            self.endpoint = endpoint
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "regionEndpoint"
            case regionName = "regionName"
        }
    }

    public struct PurchaseRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PurchaseToken", required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer)
        ]
        /// The purchase token.
        public let purchaseToken: String
        /// The number of instances.
        public let instanceCount: Int32

        public init(purchaseToken: String, instanceCount: Int32) {
            self.purchaseToken = purchaseToken
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case purchaseToken = "PurchaseToken"
            case instanceCount = "InstanceCount"
        }
    }

    public struct ImportTaskIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportTaskId", required: false, type: .list)
        ]
        public let importTaskId: [String]?

        public init(importTaskId: [String]? = nil) {
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case importTaskId = "ImportTaskId"
        }
    }

    public struct DetachInternetGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: true, type: .string), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the Internet gateway.
        public let internetGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcId: String, internetGatewayId: String, dryRun: Bool? = nil) {
            self.vpcId = vpcId
            self.internetGatewayId = internetGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case internetGatewayId = "internetGatewayId"
            case dryRun = "dryRun"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Vpcs", location: .body(locationName: "vpcs"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Information about the ClassicLink DNS support status of the VPCs.
        public let vpcs: ClassicLinkDnsSupportList?
        /// The token to use when requesting the next set of items.
        public let nextToken: String?

        public init(vpcs: ClassicLinkDnsSupportList? = nil, nextToken: String? = nil) {
            self.vpcs = vpcs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcs"
            case nextToken = "nextToken"
        }
    }

    public struct CreateInternetGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
        }
    }

    public struct VpnConnectionOptionsSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticRoutesOnly", location: .body(locationName: "staticRoutesOnly"), required: false, type: .boolean)
        ]
        /// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
        public let staticRoutesOnly: Bool?

        public init(staticRoutesOnly: Bool? = nil) {
            self.staticRoutesOnly = staticRoutesOnly
        }

        private enum CodingKeys: String, CodingKey {
            case staticRoutesOnly = "staticRoutesOnly"
        }
    }

    public enum ImageState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case invalid = "invalid"
        case deregistered = "deregistered"
        case transient = "transient"
        case failed = "failed"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public enum DeviceType: String, CustomStringConvertible, Codable {
        case ebs = "ebs"
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public struct HistoryRecord: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventType", location: .body(locationName: "eventType"), required: true, type: .enum), 
            AWSShapeMember(label: "Timestamp", location: .body(locationName: "timestamp"), required: true, type: .timestamp), 
            AWSShapeMember(label: "EventInformation", location: .body(locationName: "eventInformation"), required: true, type: .structure)
        ]
        /// The event type.    error - Indicates an error with the Spot fleet request.    fleetRequestChange - Indicates a change in the status or configuration of the Spot fleet request.    instanceChange - Indicates that an instance was launched or terminated.  
        public let eventType: EventType
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: TimeStamp
        /// Information about the event.
        public let eventInformation: EventInformation

        public init(eventType: EventType, timestamp: TimeStamp, eventInformation: EventInformation) {
            self.eventType = eventType
            self.timestamp = timestamp
            self.eventInformation = eventInformation
        }

        private enum CodingKeys: String, CodingKey {
            case eventType = "eventType"
            case timestamp = "timestamp"
            case eventInformation = "eventInformation"
        }
    }

    public struct DescribeSpotFleetRequestsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestConfigs", location: .body(locationName: "spotFleetRequestConfigSet"), required: true, type: .structure)
        ]
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the configuration of your Spot fleet.
        public let spotFleetRequestConfigs: SpotFleetRequestConfigSet

        public init(nextToken: String? = nil, spotFleetRequestConfigs: SpotFleetRequestConfigSet) {
            self.nextToken = nextToken
            self.spotFleetRequestConfigs = spotFleetRequestConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case spotFleetRequestConfigs = "spotFleetRequestConfigSet"
        }
    }

    public struct VpcPeeringConnectionOptionsDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowEgressFromLocalVpcToRemoteClassicLink", location: .body(locationName: "allowEgressFromLocalVpcToRemoteClassicLink"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowEgressFromLocalClassicLinkToRemoteVpc", location: .body(locationName: "allowEgressFromLocalClassicLinkToRemoteVpc"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllowDnsResolutionFromRemoteVpc", location: .body(locationName: "allowDnsResolutionFromRemoteVpc"), required: false, type: .boolean)
        ]
        /// Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?
        /// Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?

        public init(allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowDnsResolutionFromRemoteVpc: Bool? = nil) {
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
        }

        private enum CodingKeys: String, CodingKey {
            case allowEgressFromLocalVpcToRemoteClassicLink = "allowEgressFromLocalVpcToRemoteClassicLink"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "allowEgressFromLocalClassicLinkToRemoteVpc"
            case allowDnsResolutionFromRemoteVpc = "allowDnsResolutionFromRemoteVpc"
        }
    }

    public struct VpcEndpointSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcEndpoint]?

        public init(item: [VpcEndpoint]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct InstanceStatus: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceState", location: .body(locationName: "instanceState"), required: false, type: .structure), 
            AWSShapeMember(label: "SystemStatus", location: .body(locationName: "systemStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "Events", location: .body(locationName: "eventsSet"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceStatus", location: .body(locationName: "instanceStatus"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string)
        ]
        /// The intended state of the instance. DescribeInstanceStatus requires that an instance be in the running state.
        public let instanceState: InstanceState?
        /// Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
        public let systemStatus: InstanceStatusSummary?
        /// Any scheduled events associated with the instance.
        public let events: InstanceStatusEventList?
        /// Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
        public let instanceStatus: InstanceStatusSummary?
        /// The ID of the instance.
        public let instanceId: String?
        /// The Availability Zone of the instance.
        public let availabilityZone: String?

        public init(instanceState: InstanceState? = nil, systemStatus: InstanceStatusSummary? = nil, events: InstanceStatusEventList? = nil, instanceStatus: InstanceStatusSummary? = nil, instanceId: String? = nil, availabilityZone: String? = nil) {
            self.instanceState = instanceState
            self.systemStatus = systemStatus
            self.events = events
            self.instanceStatus = instanceStatus
            self.instanceId = instanceId
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case instanceState = "instanceState"
            case systemStatus = "systemStatus"
            case events = "eventsSet"
            case instanceStatus = "instanceStatus"
            case instanceId = "instanceId"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct ReservedInstancesOfferingList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReservedInstancesOffering]?

        public init(item: [ReservedInstancesOffering]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum VpcCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        case failing = "failing"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct VpcPeeringConnectionVpcInfo: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PeeringOptions", location: .body(locationName: "peeringOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6CidrBlockSet", location: .body(locationName: "ipv6CidrBlockSet"), required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", location: .body(locationName: "ownerId"), required: false, type: .string), 
            AWSShapeMember(label: "CidrBlock", location: .body(locationName: "cidrBlock"), required: false, type: .string)
        ]
        /// Information about the VPC peering connection options for the accepter or requester VPC.
        public let peeringOptions: VpcPeeringConnectionOptionsDescription?
        /// The IPv6 CIDR block for the VPC.
        public let ipv6CidrBlockSet: Ipv6CidrBlockSet?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The AWS account ID of the VPC owner.
        public let ownerId: String?
        /// The IPv4 CIDR block for the VPC.
        public let cidrBlock: String?

        public init(peeringOptions: VpcPeeringConnectionOptionsDescription? = nil, ipv6CidrBlockSet: Ipv6CidrBlockSet? = nil, vpcId: String? = nil, ownerId: String? = nil, cidrBlock: String? = nil) {
            self.peeringOptions = peeringOptions
            self.ipv6CidrBlockSet = ipv6CidrBlockSet
            self.vpcId = vpcId
            self.ownerId = ownerId
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case peeringOptions = "peeringOptions"
            case ipv6CidrBlockSet = "ipv6CidrBlockSet"
            case vpcId = "vpcId"
            case ownerId = "ownerId"
            case cidrBlock = "cidrBlock"
        }
    }

    public struct SnapshotTaskDetail: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageSize", location: .body(locationName: "diskImageSize"), required: false, type: .double), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", location: .body(locationName: "userBucket"), required: false, type: .structure), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// A brief status for the import snapshot task.
        public let status: String?
        /// The percentage of completion for the import snapshot task.
        public let progress: String?
        /// The URL of the disk image from which the snapshot is created.
        public let url: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?
        /// A detailed status message for the import snapshot task.
        public let statusMessage: String?
        /// The description of the snapshot.
        public let description: String?

        public init(status: String? = nil, progress: String? = nil, url: String? = nil, diskImageSize: Double? = nil, format: String? = nil, snapshotId: String? = nil, userBucket: UserBucketDetails? = nil, statusMessage: String? = nil, description: String? = nil) {
            self.status = status
            self.progress = progress
            self.url = url
            self.diskImageSize = diskImageSize
            self.format = format
            self.snapshotId = snapshotId
            self.userBucket = userBucket
            self.statusMessage = statusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case progress = "progress"
            case url = "url"
            case diskImageSize = "diskImageSize"
            case format = "format"
            case snapshotId = "snapshotId"
            case userBucket = "userBucket"
            case statusMessage = "statusMessage"
            case description = "description"
        }
    }

    public struct SubnetIpv6CidrBlockAssociationSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [SubnetIpv6CidrBlockAssociation]?

        public init(item: [SubnetIpv6CidrBlockAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct TargetReservationValueSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TargetReservationValue]?

        public init(item: [TargetReservationValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateSpotDatafeedSubscriptionResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotDatafeedSubscription", location: .body(locationName: "spotDatafeedSubscription"), required: false, type: .structure)
        ]
        /// The Spot instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription = "spotDatafeedSubscription"
        }
    }

    public enum SummaryStatus: String, CustomStringConvertible, Codable {
        case ok = "ok"
        case impaired = "impaired"
        case insufficientData = "insufficient-data"
        case notApplicable = "not-applicable"
        case initializing = "initializing"
        public var description: String { return self.rawValue }
    }

    public struct DescribeSpotInstanceRequestsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotInstanceRequests", location: .body(locationName: "spotInstanceRequestSet"), required: false, type: .structure)
        ]
        /// One or more Spot instance requests.
        public let spotInstanceRequests: SpotInstanceRequestList?

        public init(spotInstanceRequests: SpotInstanceRequestList? = nil) {
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public enum ReservedInstanceState: String, CustomStringConvertible, Codable {
        case paymentPending = "payment-pending"
        case active = "active"
        case paymentFailed = "payment-failed"
        case retired = "retired"
        public var description: String { return self.rawValue }
    }

    public struct ModifyVpcPeeringConnectionOptionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccepterPeeringConnectionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RequesterPeeringConnectionOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcPeeringConnectionId", required: true, type: .string)
        ]
        /// The VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// The VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// Checks whether you have the required permissions for the operation, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "AccepterPeeringConnectionOptions"
            case requesterPeeringConnectionOptions = "RequesterPeeringConnectionOptions"
            case dryRun = "DryRun"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public enum AutoPlacement: String, CustomStringConvertible, Codable {
        case on = "on"
        case off = "off"
        public var description: String { return self.rawValue }
    }

    public struct IamInstanceProfileSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]
        /// The name of the instance profile.
        public let name: String?
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case arn = "arn"
        }
    }

    public enum HostTenancy: String, CustomStringConvertible, Codable {
        case dedicated = "dedicated"
        case host = "host"
        public var description: String { return self.rawValue }
    }

    public struct TagList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Tag]?

        public init(item: [Tag]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ConfirmProductInstanceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "ProductCode", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// The product code. This must be a product code that you own.
        public let productCode: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(instanceId: String, productCode: String, dryRun: Bool? = nil) {
            self.instanceId = instanceId
            self.productCode = productCode
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case productCode = "ProductCode"
            case dryRun = "dryRun"
        }
    }

    public struct DisableVgwRoutePropagationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RouteTableId", required: true, type: .string), 
            AWSShapeMember(label: "GatewayId", required: true, type: .string)
        ]
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of the virtual private gateway.
        public let gatewayId: String

        public init(routeTableId: String, gatewayId: String) {
            self.routeTableId = routeTableId
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case routeTableId = "RouteTableId"
            case gatewayId = "GatewayId"
        }
    }

    public struct DescribeSpotPriceHistoryRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", location: .body(locationName: "startTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "ProductDescriptions", location: .body(locationName: "ProductDescription"), required: false, type: .list), 
            AWSShapeMember(label: "EndTime", location: .body(locationName: "endTime"), required: false, type: .timestamp), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceTypes", location: .body(locationName: "InstanceType"), required: false, type: .list)
        ]
        /// The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: TimeStamp?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?
        /// Filters the results by the specified basic product descriptions.
        public let productDescriptions: [String]?
        /// The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let endTime: TimeStamp?
        /// One or more filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The timestamp of the Spot price history, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). You can use wildcards (* and ?). Greater than or less than comparison is not supported.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filters the results by the specified Availability Zone.
        public let availabilityZone: String?
        /// The token for the next set of results.
        public let nextToken: String?
        /// Filters the results by the specified instance types. Note that T2 and HS1 instance types are not supported.
        public let instanceTypes: [InstanceType]?

        public init(startTime: TimeStamp? = nil, maxResults: Int32? = nil, productDescriptions: [String]? = nil, endTime: TimeStamp? = nil, filters: FilterList? = nil, dryRun: Bool? = nil, availabilityZone: String? = nil, nextToken: String? = nil, instanceTypes: [InstanceType]? = nil) {
            self.startTime = startTime
            self.maxResults = maxResults
            self.productDescriptions = productDescriptions
            self.endTime = endTime
            self.filters = filters
            self.dryRun = dryRun
            self.availabilityZone = availabilityZone
            self.nextToken = nextToken
            self.instanceTypes = instanceTypes
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "startTime"
            case maxResults = "maxResults"
            case productDescriptions = "ProductDescription"
            case endTime = "endTime"
            case filters = "Filter"
            case dryRun = "dryRun"
            case availabilityZone = "availabilityZone"
            case nextToken = "nextToken"
            case instanceTypes = "InstanceType"
        }
    }

    public struct ExportTaskIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskId", required: false, type: .list)
        ]
        public let exportTaskId: [String]?

        public init(exportTaskId: [String]? = nil) {
            self.exportTaskId = exportTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskId = "ExportTaskId"
        }
    }

    public struct ConversionTask: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportInstance", location: .body(locationName: "importInstance"), required: false, type: .structure), 
            AWSShapeMember(label: "ExpirationTime", location: .body(locationName: "expirationTime"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: true, type: .enum), 
            AWSShapeMember(label: "ConversionTaskId", location: .body(locationName: "conversionTaskId"), required: true, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "ImportVolume", location: .body(locationName: "importVolume"), required: false, type: .structure)
        ]
        /// If the task is for importing an instance, this contains information about the import instance task.
        public let importInstance: ImportInstanceTaskDetails?
        /// The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
        public let expirationTime: String?
        /// Any tags assigned to the task.
        public let tags: TagList?
        /// The state of the conversion task.
        public let state: ConversionTaskState
        /// The ID of the conversion task.
        public let conversionTaskId: String
        /// The status message related to the conversion task.
        public let statusMessage: String?
        /// If the task is for importing a volume, this contains information about the import volume task.
        public let importVolume: ImportVolumeTaskDetails?

        public init(importInstance: ImportInstanceTaskDetails? = nil, expirationTime: String? = nil, tags: TagList? = nil, state: ConversionTaskState, conversionTaskId: String, statusMessage: String? = nil, importVolume: ImportVolumeTaskDetails? = nil) {
            self.importInstance = importInstance
            self.expirationTime = expirationTime
            self.tags = tags
            self.state = state
            self.conversionTaskId = conversionTaskId
            self.statusMessage = statusMessage
            self.importVolume = importVolume
        }

        private enum CodingKeys: String, CodingKey {
            case importInstance = "importInstance"
            case expirationTime = "expirationTime"
            case tags = "tagSet"
            case state = "state"
            case conversionTaskId = "conversionTaskId"
            case statusMessage = "statusMessage"
            case importVolume = "importVolume"
        }
    }

    public struct ReplaceRouteTableAssociationResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewAssociationId", location: .body(locationName: "newAssociationId"), required: false, type: .string)
        ]
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(newAssociationId: String? = nil) {
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case newAssociationId = "newAssociationId"
        }
    }

    public struct CreateFpgaImageResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FpgaImageId", location: .body(locationName: "fpgaImageId"), required: false, type: .string), 
            AWSShapeMember(label: "FpgaImageGlobalId", location: .body(locationName: "fpgaImageGlobalId"), required: false, type: .string)
        ]
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?

        public init(fpgaImageId: String? = nil, fpgaImageGlobalId: String? = nil) {
            self.fpgaImageId = fpgaImageId
            self.fpgaImageGlobalId = fpgaImageGlobalId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageId = "fpgaImageId"
            case fpgaImageGlobalId = "fpgaImageGlobalId"
        }
    }

    public struct PrefixListIdSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyVolumeResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeModification", location: .body(locationName: "volumeModification"), required: false, type: .structure)
        ]
        /// A VolumeModification object.
        public let volumeModification: VolumeModification?

        public init(volumeModification: VolumeModification? = nil) {
            self.volumeModification = volumeModification
        }

        private enum CodingKeys: String, CodingKey {
            case volumeModification = "volumeModification"
        }
    }

    public struct KeyPair: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyFingerprint", location: .body(locationName: "keyFingerprint"), required: false, type: .string), 
            AWSShapeMember(label: "KeyName", location: .body(locationName: "keyName"), required: false, type: .string), 
            AWSShapeMember(label: "KeyMaterial", location: .body(locationName: "keyMaterial"), required: false, type: .string)
        ]
        /// The SHA-1 digest of the DER encoded private key.
        public let keyFingerprint: String?
        /// The name of the key pair.
        public let keyName: String?
        /// An unencrypted PEM encoded RSA private key.
        public let keyMaterial: String?

        public init(keyFingerprint: String? = nil, keyName: String? = nil, keyMaterial: String? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
            self.keyMaterial = keyMaterial
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint = "keyFingerprint"
            case keyName = "keyName"
            case keyMaterial = "keyMaterial"
        }
    }

    public struct DescribeVpnGatewaysResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGateways", location: .body(locationName: "vpnGatewaySet"), required: false, type: .structure)
        ]
        /// Information about one or more virtual private gateways.
        public let vpnGateways: VpnGatewayList?

        public init(vpnGateways: VpnGatewayList? = nil) {
            self.vpnGateways = vpnGateways
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateways = "vpnGatewaySet"
        }
    }

    public struct DescribeSpotFleetInstancesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(dryRun: Bool? = nil, nextToken: String? = nil, spotFleetRequestId: String, maxResults: Int32? = nil) {
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case nextToken = "nextToken"
            case spotFleetRequestId = "spotFleetRequestId"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteVpcEndpointsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcEndpointIds", location: .body(locationName: "VpcEndpointId"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean)
        ]
        /// One or more endpoint IDs.
        public let vpcEndpointIds: ValueStringList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(vpcEndpointIds: ValueStringList, dryRun: Bool? = nil) {
            self.vpcEndpointIds = vpcEndpointIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case vpcEndpointIds = "VpcEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct DescribeReservedInstancesModificationsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ReservedInstancesModifications", location: .body(locationName: "reservedInstancesModificationsSet"), required: false, type: .structure)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The Reserved Instance modification information.
        public let reservedInstancesModifications: ReservedInstancesModificationList?

        public init(nextToken: String? = nil, reservedInstancesModifications: ReservedInstancesModificationList? = nil) {
            self.nextToken = nextToken
            self.reservedInstancesModifications = reservedInstancesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case reservedInstancesModifications = "reservedInstancesModificationsSet"
        }
    }

    public struct AssociateSubnetCidrBlockRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ipv6CidrBlock", location: .body(locationName: "ipv6CidrBlock"), required: true, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string)
        ]
        /// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
        public let ipv6CidrBlock: String
        /// The ID of your subnet.
        public let subnetId: String

        public init(ipv6CidrBlock: String, subnetId: String) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock = "ipv6CidrBlock"
            case subnetId = "subnetId"
        }
    }

    public struct DescribeDhcpOptionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsIds", location: .body(locationName: "DhcpOptionsId"), required: false, type: .structure), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The IDs of one or more DHCP options sets. Default: Describes all your DHCP options sets.
        public let dhcpOptionsIds: DhcpOptionsIdStringList?
        /// One or more filters.    dhcp-options-id - The ID of a set of DHCP options.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    tag:key=value - The key/value combination of a tag assigned to the resource. Specify the key of the tag in the filter name and the value of the tag in the filter value. For example, for the tag Purpose=X, specify tag:Purpose for the filter name and X for the filter value.    tag-key - The key of a tag assigned to the resource. This filter is independent of the tag-value filter. For example, if you use both the filter "tag-key=Purpose" and the filter "tag-value=X", you get any resources assigned both the tag key Purpose (regardless of what the tag's value is), and the tag value X (regardless of what the tag's key is). If you want to list only resources where Purpose is X, see the tag:key=value filter.    tag-value - The value of a tag assigned to the resource. This filter is independent of the tag-key filter.  
        public let filters: FilterList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsIds: DhcpOptionsIdStringList? = nil, filters: FilterList? = nil, dryRun: Bool? = nil) {
            self.dhcpOptionsIds = dhcpOptionsIds
            self.filters = filters
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsIds = "DhcpOptionsId"
            case filters = "Filter"
            case dryRun = "dryRun"
        }
    }

    public struct LaunchPermissionModifications: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Remove", required: false, type: .structure), 
            AWSShapeMember(label: "Add", required: false, type: .structure)
        ]
        /// The AWS account ID to remove from the list of launch permissions for the AMI.
        public let remove: LaunchPermissionList?
        /// The AWS account ID to add to the list of launch permissions for the AMI.
        public let add: LaunchPermissionList?

        public init(remove: LaunchPermissionList? = nil, add: LaunchPermissionList? = nil) {
            self.remove = remove
            self.add = add
        }

        private enum CodingKeys: String, CodingKey {
            case remove = "Remove"
            case add = "Add"
        }
    }

    public enum AllocationState: String, CustomStringConvertible, Codable {
        case available = "available"
        case underAssessment = "under-assessment"
        case permanentFailure = "permanent-failure"
        case released = "released"
        case releasedPermanentFailure = "released-permanent-failure"
        public var description: String { return self.rawValue }
    }

    public struct ModifyHostsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostIds", location: .body(locationName: "hostId"), required: true, type: .structure), 
            AWSShapeMember(label: "AutoPlacement", location: .body(locationName: "autoPlacement"), required: true, type: .enum)
        ]
        /// The host IDs of the Dedicated Hosts you want to modify.
        public let hostIds: RequestHostIdList
        /// Specify whether to enable or disable auto-placement.
        public let autoPlacement: AutoPlacement

        public init(hostIds: RequestHostIdList, autoPlacement: AutoPlacement) {
            self.hostIds = hostIds
            self.autoPlacement = autoPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostId"
            case autoPlacement = "autoPlacement"
        }
    }

    public enum NetworkInterfaceAttribute: String, CustomStringConvertible, Codable {
        case description = "description"
        case groupset = "groupSet"
        case sourcedestcheck = "sourceDestCheck"
        case attachment = "attachment"
        public var description: String { return self.rawValue }
    }

    public struct ReleaseAddressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "AllocationId", required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-VPC] The allocation ID. Required for EC2-VPC.
        public let allocationId: String?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?

        public init(dryRun: Bool? = nil, allocationId: String? = nil, publicIp: String? = nil) {
            self.dryRun = dryRun
            self.allocationId = allocationId
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case allocationId = "AllocationId"
            case publicIp = "PublicIp"
        }
    }

    public struct VpcEndpoint: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", location: .body(locationName: "creationTimestamp"), required: false, type: .timestamp), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "State", location: .body(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "VpcEndpointId", location: .body(locationName: "vpcEndpointId"), required: false, type: .string), 
            AWSShapeMember(label: "PolicyDocument", location: .body(locationName: "policyDocument"), required: false, type: .string), 
            AWSShapeMember(label: "RouteTableIds", location: .body(locationName: "routeTableIdSet"), required: false, type: .structure)
        ]
        /// The date and time the VPC endpoint was created.
        public let creationTimestamp: TimeStamp?
        /// The ID of the VPC to which the endpoint is associated.
        public let vpcId: String?
        /// The state of the VPC endpoint.
        public let state: State?
        /// The name of the AWS service to which the endpoint is associated.
        public let serviceName: String?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The policy document associated with the endpoint.
        public let policyDocument: String?
        /// One or more route tables associated with the endpoint.
        public let routeTableIds: ValueStringList?

        public init(creationTimestamp: TimeStamp? = nil, vpcId: String? = nil, state: State? = nil, serviceName: String? = nil, vpcEndpointId: String? = nil, policyDocument: String? = nil, routeTableIds: ValueStringList? = nil) {
            self.creationTimestamp = creationTimestamp
            self.vpcId = vpcId
            self.state = state
            self.serviceName = serviceName
            self.vpcEndpointId = vpcEndpointId
            self.policyDocument = policyDocument
            self.routeTableIds = routeTableIds
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "creationTimestamp"
            case vpcId = "vpcId"
            case state = "state"
            case serviceName = "serviceName"
            case vpcEndpointId = "vpcEndpointId"
            case policyDocument = "policyDocument"
            case routeTableIds = "routeTableIdSet"
        }
    }

    public struct AssociateIamInstanceProfileRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", required: true, type: .structure)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification

        public init(instanceId: String, iamInstanceProfile: IamInstanceProfileSpecification) {
            self.instanceId = instanceId
            self.iamInstanceProfile = iamInstanceProfile
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case iamInstanceProfile = "IamInstanceProfile"
        }
    }

    public enum OfferingTypeValues: String, CustomStringConvertible, Codable {
        case heavyUtilization = "Heavy Utilization"
        case mediumUtilization = "Medium Utilization"
        case lightUtilization = "Light Utilization"
        case noUpfront = "No Upfront"
        case partialUpfront = "Partial Upfront"
        case allUpfront = "All Upfront"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateVpcCidrBlockResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6CidrBlockAssociation", location: .body(locationName: "ipv6CidrBlockAssociation"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?

        public init(vpcId: String? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil) {
            self.vpcId = vpcId
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case ipv6CidrBlockAssociation = "ipv6CidrBlockAssociation"
        }
    }

    public struct InstanceList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Instance]?

        public init(item: [Instance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteDhcpOptionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpOptionsId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the DHCP options set.
        public let dhcpOptionsId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsId: String, dryRun: Bool? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun = "dryRun"
        }
    }

    public enum CurrencyCodeValues: String, CustomStringConvertible, Codable {
        case usd = "USD"
        public var description: String { return self.rawValue }
    }

    public struct DescribeHostReservationsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostReservationSet", location: .body(locationName: "hostReservationSet"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Details about the reservation's configuration.
        public let hostReservationSet: [HostReservation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hostReservationSet: [HostReservation]? = nil, nextToken: String? = nil) {
            self.hostReservationSet = hostReservationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hostReservationSet = "hostReservationSet"
            case nextToken = "nextToken"
        }
    }

    public enum RouteOrigin: String, CustomStringConvertible, Codable {
        case createroutetable = "CreateRouteTable"
        case createroute = "CreateRoute"
        case enablevgwroutepropagation = "EnableVgwRoutePropagation"
        public var description: String { return self.rawValue }
    }

    public struct ModifyNetworkInterfaceAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "Attachment", location: .body(locationName: "attachment"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "SecurityGroupId"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", location: .body(locationName: "sourceDestCheck"), required: false, type: .structure)
        ]
        /// A description for the network interface.
        public let description: AttributeValue?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.
        public let attachment: NetworkInterfaceAttachmentChanges?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
        public let groups: SecurityGroupIdStringList?
        /// Indicates whether source/destination checking is enabled. A value of true means checking is enabled, and false means checking is disabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT Instances in the Amazon Virtual Private Cloud User Guide.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(description: AttributeValue? = nil, networkInterfaceId: String, attachment: NetworkInterfaceAttachmentChanges? = nil, dryRun: Bool? = nil, groups: SecurityGroupIdStringList? = nil, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.attachment = attachment
            self.dryRun = dryRun
            self.groups = groups
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case networkInterfaceId = "networkInterfaceId"
            case attachment = "attachment"
            case dryRun = "dryRun"
            case groups = "SecurityGroupId"
            case sourceDestCheck = "sourceDestCheck"
        }
    }

    public struct ReservedInstancesIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedInstancesId", required: false, type: .list)
        ]
        public let reservedInstancesId: [String]?

        public init(reservedInstancesId: [String]? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId = "ReservedInstancesId"
        }
    }

    public struct AttributeBooleanValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .boolean)
        ]
        /// The attribute value. The valid values are true or false.
        public let value: Bool?

        public init(value: Bool? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct AttachVpnGatewayRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "VpnGatewayId", required: true, type: .string)
        ]
        /// The ID of the VPC.
        public let vpcId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(vpcId: String, dryRun: Bool? = nil, vpnGatewayId: String) {
            self.vpcId = vpcId
            self.dryRun = dryRun
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case dryRun = "dryRun"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct ActiveInstanceSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ActiveInstance]?

        public init(item: [ActiveInstance]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct CreateEgressOnlyInternetGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "EgressOnlyInternetGateway", location: .body(locationName: "egressOnlyInternetGateway"), required: false, type: .structure)
        ]
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the egress-only Internet gateway.
        public let egressOnlyInternetGateway: EgressOnlyInternetGateway?

        public init(clientToken: String? = nil, egressOnlyInternetGateway: EgressOnlyInternetGateway? = nil) {
            self.clientToken = clientToken
            self.egressOnlyInternetGateway = egressOnlyInternetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case egressOnlyInternetGateway = "egressOnlyInternetGateway"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case moveinprogress = "MoveInProgress"
        case invpc = "InVpc"
        case inclassic = "InClassic"
        public var description: String { return self.rawValue }
    }

    public struct NetworkInterfaceAttachmentChanges: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteOnTermination", location: .body(locationName: "deleteOnTermination"), required: false, type: .boolean), 
            AWSShapeMember(label: "AttachmentId", location: .body(locationName: "attachmentId"), required: false, type: .string)
        ]
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The ID of the network interface attachment.
        public let attachmentId: String?

        public init(deleteOnTermination: Bool? = nil, attachmentId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.attachmentId = attachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
            case attachmentId = "attachmentId"
        }
    }

    public struct CancelExportTaskRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportTaskId", location: .body(locationName: "exportTaskId"), required: true, type: .string)
        ]
        /// The ID of the export task. This is the ID returned by CreateInstanceExportTask.
        public let exportTaskId: String

        public init(exportTaskId: String) {
            self.exportTaskId = exportTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskId = "exportTaskId"
        }
    }

    public struct ResetImageAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: true, type: .enum), 
            AWSShapeMember(label: "ImageId", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The attribute to reset (currently you can only reset the launch permission attribute).
        public let attribute: ResetImageAttributeName
        /// The ID of the AMI.
        public let imageId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(attribute: ResetImageAttributeName, imageId: String, dryRun: Bool? = nil) {
            self.attribute = attribute
            self.imageId = imageId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case imageId = "ImageId"
            case dryRun = "dryRun"
        }
    }

    public struct RequestHostIdSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [String]?

        public init(item: [String]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct AssociateRouteTableRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: true, type: .string), 
            AWSShapeMember(label: "RouteTableId", location: .body(locationName: "routeTableId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// The ID of the subnet.
        public let subnetId: String
        /// The ID of the route table.
        public let routeTableId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(subnetId: String, routeTableId: String, dryRun: Bool? = nil) {
            self.subnetId = subnetId
            self.routeTableId = routeTableId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "subnetId"
            case routeTableId = "routeTableId"
            case dryRun = "dryRun"
        }
    }

    public struct PrivateIpAddressSpecification: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Primary", location: .body(locationName: "primary"), required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: true, type: .string)
        ]
        /// Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
        public let primary: Bool?
        /// The private IPv4 addresses.
        public let privateIpAddress: String

        public init(primary: Bool? = nil, privateIpAddress: String) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "primary"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct ClassicLinkInstance: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "groupSet"), required: false, type: .structure), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// A list of security groups.
        public let groups: GroupIdentifierList?
        /// Any tags assigned to the instance.
        public let tags: TagList?

        public init(vpcId: String? = nil, instanceId: String? = nil, groups: GroupIdentifierList? = nil, tags: TagList? = nil) {
            self.vpcId = vpcId
            self.instanceId = instanceId
            self.groups = groups
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case instanceId = "instanceId"
            case groups = "groupSet"
            case tags = "tagSet"
        }
    }

    public struct DescribePlacementGroupsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", location: .body(locationName: "Filter"), required: false, type: .structure), 
            AWSShapeMember(label: "GroupNames", location: .body(locationName: "groupName"), required: false, type: .list)
        ]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    group-name - The name of the placement group.    state - The state of the placement group (pending | available | deleting | deleted).    strategy - The strategy of the placement group (cluster).  
        public let filters: FilterList?
        /// One or more placement group names. Default: Describes all your placement groups, or only those otherwise specified.
        public let groupNames: [String]?

        public init(dryRun: Bool? = nil, filters: FilterList? = nil, groupNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "dryRun"
            case filters = "Filter"
            case groupNames = "groupName"
        }
    }

    public struct ReplaceNetworkAclAssociationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", location: .body(locationName: "associationId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkAclId", location: .body(locationName: "networkAclId"), required: true, type: .string)
        ]
        /// The ID of the current association between the original network ACL and the subnet.
        public let associationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new network ACL to associate with the subnet.
        public let networkAclId: String

        public init(associationId: String, dryRun: Bool? = nil, networkAclId: String) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "associationId"
            case dryRun = "dryRun"
            case networkAclId = "networkAclId"
        }
    }

    public struct CreateImageRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NoReboot", location: .body(locationName: "noReboot"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string)
        ]
        /// Information about one or more block device mappings.
        public let blockDeviceMappings: BlockDeviceMappingRequestList?
        /// A description for the new image.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.
        public let noReboot: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String

        public init(blockDeviceMappings: BlockDeviceMappingRequestList? = nil, description: String? = nil, dryRun: Bool? = nil, noReboot: Bool? = nil, instanceId: String, name: String) {
            self.blockDeviceMappings = blockDeviceMappings
            self.description = description
            self.dryRun = dryRun
            self.noReboot = noReboot
            self.instanceId = instanceId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case description = "description"
            case dryRun = "dryRun"
            case noReboot = "noReboot"
            case instanceId = "instanceId"
            case name = "name"
        }
    }

    public struct VpcIpv6CidrBlockAssociationSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [VpcIpv6CidrBlockAssociation]?

        public init(item: [VpcIpv6CidrBlockAssociation]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccepterPeeringConnectionOptions", location: .body(locationName: "accepterPeeringConnectionOptions"), required: false, type: .structure), 
            AWSShapeMember(label: "RequesterPeeringConnectionOptions", location: .body(locationName: "requesterPeeringConnectionOptions"), required: false, type: .structure)
        ]
        /// Information about the VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptions?
        /// Information about the VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptions?

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptions? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptions? = nil) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "accepterPeeringConnectionOptions"
            case requesterPeeringConnectionOptions = "requesterPeeringConnectionOptions"
        }
    }

    public enum BatchState: String, CustomStringConvertible, Codable {
        case submitted = "submitted"
        case active = "active"
        case cancelled = "cancelled"
        case failed = "failed"
        case cancelledRunning = "cancelled_running"
        case cancelledTerminating = "cancelled_terminating"
        case modifying = "modifying"
        public var description: String { return self.rawValue }
    }

    public struct DescribeVpcAttributeResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "EnableDnsSupport", location: .body(locationName: "enableDnsSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "EnableDnsHostnames", location: .body(locationName: "enableDnsHostnames"), required: false, type: .structure)
        ]
        /// The ID of the VPC.
        public let vpcId: String?
        /// Indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.
        public let enableDnsSupport: AttributeBooleanValue?
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.
        public let enableDnsHostnames: AttributeBooleanValue?

        public init(vpcId: String? = nil, enableDnsSupport: AttributeBooleanValue? = nil, enableDnsHostnames: AttributeBooleanValue? = nil) {
            self.vpcId = vpcId
            self.enableDnsSupport = enableDnsSupport
            self.enableDnsHostnames = enableDnsHostnames
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case enableDnsSupport = "enableDnsSupport"
            case enableDnsHostnames = "enableDnsHostnames"
        }
    }

    public struct TagDescriptionList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [TagDescription]?

        public init(item: [TagDescription]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct SubnetIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .list)
        ]
        public let subnetId: [String]?

        public init(subnetId: [String]? = nil) {
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
        }
    }

    public struct ModifyVolumeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeType", required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeId", required: true, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        /// Target EBS volume type of the volume to be modified  The API does not support modifications for volume type standard. You also cannot change the type of a volume to standard.  Default: If no type is specified, the existing type is retained. 
        public let volumeType: VolumeType?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Target IOPS rate of the volume to be modified. Only valid for Provisioned IOPS SSD (io1) volumes. For more information about io1 IOPS configuration, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops. Default: If no IOPS value is specified, the existing value is retained. 
        public let iops: Int32?
        public let volumeId: String
        /// Target size in GiB of the volume to be modified. Target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html. Default: If no size is specified, the existing size is retained. 
        public let size: Int32?

        public init(volumeType: VolumeType? = nil, dryRun: Bool? = nil, iops: Int32? = nil, volumeId: String, size: Int32? = nil) {
            self.volumeType = volumeType
            self.dryRun = dryRun
            self.iops = iops
            self.volumeId = volumeId
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case volumeType = "VolumeType"
            case dryRun = "DryRun"
            case iops = "Iops"
            case volumeId = "VolumeId"
            case size = "Size"
        }
    }

    public struct DhcpConfigurationValueList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [AttributeValue]?

        public init(item: [AttributeValue]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DescribeCustomerGatewaysResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerGateways", location: .body(locationName: "customerGatewaySet"), required: false, type: .structure)
        ]
        /// Information about one or more customer gateways.
        public let customerGateways: CustomerGatewayList?

        public init(customerGateways: CustomerGatewayList? = nil) {
            self.customerGateways = customerGateways
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateways = "customerGatewaySet"
        }
    }

    public struct ModifyInstanceAttributeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", location: .body(locationName: "blockDeviceMapping"), required: false, type: .structure), 
            AWSShapeMember(label: "DisableApiTermination", location: .body(locationName: "disableApiTermination"), required: false, type: .structure), 
            AWSShapeMember(label: "UserData", location: .body(locationName: "userData"), required: false, type: .structure), 
            AWSShapeMember(label: "SriovNetSupport", location: .body(locationName: "sriovNetSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "EbsOptimized", location: .body(locationName: "ebsOptimized"), required: false, type: .structure), 
            AWSShapeMember(label: "SourceDestCheck", required: false, type: .structure), 
            AWSShapeMember(label: "Attribute", location: .body(locationName: "attribute"), required: false, type: .enum), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .structure), 
            AWSShapeMember(label: "Ramdisk", location: .body(locationName: "ramdisk"), required: false, type: .structure), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string), 
            AWSShapeMember(label: "Kernel", location: .body(locationName: "kernel"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string), 
            AWSShapeMember(label: "EnaSupport", location: .body(locationName: "enaSupport"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceInitiatedShutdownBehavior", location: .body(locationName: "instanceInitiatedShutdownBehavior"), required: false, type: .structure), 
            AWSShapeMember(label: "Groups", location: .body(locationName: "GroupId"), required: false, type: .structure)
        ]
        /// Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Updating the Block Device Mapping when Launching an Instance in the Amazon Elastic Compute Cloud User Guide.
        public let blockDeviceMappings: InstanceBlockDeviceMappingSpecificationList?
        /// If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this paramater for Spot Instances.
        public let disableApiTermination: AttributeBooleanValue?
        /// Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let userData: BlobAttributeValue?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let sriovNetSupport: AttributeValue?
        /// Specifies whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: AttributeBooleanValue?
        /// Specifies whether source/destination checking is enabled. A value of true means that checking is enabled, and false means checking is disabled. This value must be false for a NAT instance to perform NAT.
        public let sourceDestCheck: AttributeBooleanValue?
        /// The name of the attribute.
        public let attribute: InstanceAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Changes the instance type to the specified value. For more information, see Instance Types. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
        public let instanceType: AttributeValue?
        /// Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let ramdisk: AttributeValue?
        /// A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
        public let value: String?
        /// Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let kernel: AttributeValue?
        /// The ID of the instance.
        public let instanceId: String
        /// Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let enaSupport: AttributeBooleanValue?
        /// Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// [EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.
        public let groups: GroupIdStringList?

        public init(blockDeviceMappings: InstanceBlockDeviceMappingSpecificationList? = nil, disableApiTermination: AttributeBooleanValue? = nil, userData: BlobAttributeValue? = nil, sriovNetSupport: AttributeValue? = nil, ebsOptimized: AttributeBooleanValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, attribute: InstanceAttributeName? = nil, dryRun: Bool? = nil, instanceType: AttributeValue? = nil, ramdisk: AttributeValue? = nil, value: String? = nil, kernel: AttributeValue? = nil, instanceId: String, enaSupport: AttributeBooleanValue? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, groups: GroupIdStringList? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.disableApiTermination = disableApiTermination
            self.userData = userData
            self.sriovNetSupport = sriovNetSupport
            self.ebsOptimized = ebsOptimized
            self.sourceDestCheck = sourceDestCheck
            self.attribute = attribute
            self.dryRun = dryRun
            self.instanceType = instanceType
            self.ramdisk = ramdisk
            self.value = value
            self.kernel = kernel
            self.instanceId = instanceId
            self.enaSupport = enaSupport
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case disableApiTermination = "disableApiTermination"
            case userData = "userData"
            case sriovNetSupport = "sriovNetSupport"
            case ebsOptimized = "ebsOptimized"
            case sourceDestCheck = "SourceDestCheck"
            case attribute = "attribute"
            case dryRun = "dryRun"
            case instanceType = "instanceType"
            case ramdisk = "ramdisk"
            case value = "value"
            case kernel = "kernel"
            case instanceId = "instanceId"
            case enaSupport = "enaSupport"
            case instanceInitiatedShutdownBehavior = "instanceInitiatedShutdownBehavior"
            case groups = "GroupId"
        }
    }

    public struct ScheduledInstanceRecurrence: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Frequency", location: .body(locationName: "frequency"), required: false, type: .string), 
            AWSShapeMember(label: "OccurrenceUnit", location: .body(locationName: "occurrenceUnit"), required: false, type: .string), 
            AWSShapeMember(label: "OccurrenceRelativeToEnd", location: .body(locationName: "occurrenceRelativeToEnd"), required: false, type: .boolean), 
            AWSShapeMember(label: "Interval", location: .body(locationName: "interval"), required: false, type: .integer), 
            AWSShapeMember(label: "OccurrenceDaySet", location: .body(locationName: "occurrenceDaySet"), required: false, type: .structure)
        ]
        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
        public let occurrenceUnit: String?
        /// Indicates whether the occurrence is relative to the end of the specified week or month.
        public let occurrenceRelativeToEnd: Bool?
        /// The interval quantity. The interval unit depends on the value of frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int32?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
        public let occurrenceDaySet: OccurrenceDaySet?

        public init(frequency: String? = nil, occurrenceUnit: String? = nil, occurrenceRelativeToEnd: Bool? = nil, interval: Int32? = nil, occurrenceDaySet: OccurrenceDaySet? = nil) {
            self.frequency = frequency
            self.occurrenceUnit = occurrenceUnit
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.interval = interval
            self.occurrenceDaySet = occurrenceDaySet
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "frequency"
            case occurrenceUnit = "occurrenceUnit"
            case occurrenceRelativeToEnd = "occurrenceRelativeToEnd"
            case interval = "interval"
            case occurrenceDaySet = "occurrenceDaySet"
        }
    }

    public struct CreateVpnGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpnGateway", location: .body(locationName: "vpnGateway"), required: false, type: .structure)
        ]
        /// Information about the virtual private gateway.
        public let vpnGateway: VpnGateway?

        public init(vpnGateway: VpnGateway? = nil) {
            self.vpnGateway = vpnGateway
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateway = "vpnGateway"
        }
    }

    public struct SnapshotDetail: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .string), 
            AWSShapeMember(label: "Progress", location: .body(locationName: "progress"), required: false, type: .string), 
            AWSShapeMember(label: "Url", location: .body(locationName: "url"), required: false, type: .string), 
            AWSShapeMember(label: "DiskImageSize", location: .body(locationName: "diskImageSize"), required: false, type: .double), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", location: .body(locationName: "snapshotId"), required: false, type: .string), 
            AWSShapeMember(label: "UserBucket", location: .body(locationName: "userBucket"), required: false, type: .structure), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", location: .body(locationName: "deviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// A brief status of the snapshot creation.
        public let status: String?
        /// The percentage of progress for the task.
        public let progress: String?
        /// The URL used to access the disk image.
        public let url: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?
        /// A detailed status message for the snapshot creation.
        public let statusMessage: String?
        /// The block device mapping for the snapshot.
        public let deviceName: String?
        /// A description for the snapshot.
        public let description: String?

        public init(status: String? = nil, progress: String? = nil, url: String? = nil, diskImageSize: Double? = nil, format: String? = nil, snapshotId: String? = nil, userBucket: UserBucketDetails? = nil, statusMessage: String? = nil, deviceName: String? = nil, description: String? = nil) {
            self.status = status
            self.progress = progress
            self.url = url
            self.diskImageSize = diskImageSize
            self.format = format
            self.snapshotId = snapshotId
            self.userBucket = userBucket
            self.statusMessage = statusMessage
            self.deviceName = deviceName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case progress = "progress"
            case url = "url"
            case diskImageSize = "diskImageSize"
            case format = "format"
            case snapshotId = "snapshotId"
            case userBucket = "userBucket"
            case statusMessage = "statusMessage"
            case deviceName = "deviceName"
            case description = "description"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcIds", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// One or more VPC IDs.
        public let vpcIds: VpcClassicLinkIdList?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int32?

        public init(vpcIds: VpcClassicLinkIdList? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.vpcIds = vpcIds
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case vpcIds = "VpcIds"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteNatGatewayResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NatGatewayId", location: .body(locationName: "natGatewayId"), required: false, type: .string)
        ]
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayId: String? = nil) {
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayId = "natGatewayId"
        }
    }

    public struct AttachNetworkInterfaceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceIndex", location: .body(locationName: "deviceIndex"), required: true, type: .integer), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: true, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: true, type: .string)
        ]
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int32
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(deviceIndex: Int32, networkInterfaceId: String, dryRun: Bool? = nil, instanceId: String) {
            self.deviceIndex = deviceIndex
            self.networkInterfaceId = networkInterfaceId
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceIndex = "deviceIndex"
            case networkInterfaceId = "networkInterfaceId"
            case dryRun = "dryRun"
            case instanceId = "instanceId"
        }
    }

    public struct PrivateIpAddressStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", required: false, type: .list)
        ]
        public let privateIpAddress: [String]?

        public init(privateIpAddress: [String]? = nil) {
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct IpPermission: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserIdGroupPairs", location: .body(locationName: "groups"), required: false, type: .structure), 
            AWSShapeMember(label: "IpRanges", location: .body(locationName: "ipRanges"), required: false, type: .structure), 
            AWSShapeMember(label: "Ipv6Ranges", location: .body(locationName: "ipv6Ranges"), required: false, type: .structure), 
            AWSShapeMember(label: "PrefixListIds", location: .body(locationName: "prefixListIds"), required: false, type: .structure), 
            AWSShapeMember(label: "ToPort", location: .body(locationName: "toPort"), required: false, type: .integer), 
            AWSShapeMember(label: "IpProtocol", location: .body(locationName: "ipProtocol"), required: false, type: .string), 
            AWSShapeMember(label: "FromPort", location: .body(locationName: "fromPort"), required: false, type: .integer)
        ]
        /// One or more security group and AWS account ID pairs.
        public let userIdGroupPairs: UserIdGroupPairList?
        /// One or more IPv4 ranges.
        public let ipRanges: IpRangeList?
        /// [EC2-VPC only] One or more IPv6 ranges.
        public let ipv6Ranges: Ipv6RangeList?
        /// (Valid for AuthorizeSecurityGroupEgress, RevokeSecurityGroupEgress and DescribeSecurityGroups only) One or more prefix list IDs for an AWS service. In an AuthorizeSecurityGroupEgress request, this is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.
        public let prefixListIds: PrefixListIdList?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type.
        public let toPort: Int32?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers).  [EC2-VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6) allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For 58 (ICMPv6), you can optionally specify a port range; if you don't, traffic for all types and codes is allowed when authorizing rules. 
        public let ipProtocol: String?
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types.
        public let fromPort: Int32?

        public init(userIdGroupPairs: UserIdGroupPairList? = nil, ipRanges: IpRangeList? = nil, ipv6Ranges: Ipv6RangeList? = nil, prefixListIds: PrefixListIdList? = nil, toPort: Int32? = nil, ipProtocol: String? = nil, fromPort: Int32? = nil) {
            self.userIdGroupPairs = userIdGroupPairs
            self.ipRanges = ipRanges
            self.ipv6Ranges = ipv6Ranges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.ipProtocol = ipProtocol
            self.fromPort = fromPort
        }

        private enum CodingKeys: String, CodingKey {
            case userIdGroupPairs = "groups"
            case ipRanges = "ipRanges"
            case ipv6Ranges = "ipv6Ranges"
            case prefixListIds = "prefixListIds"
            case toPort = "toPort"
            case ipProtocol = "ipProtocol"
            case fromPort = "fromPort"
        }
    }

    public struct VgwTelemetry: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "LastStatusChange", location: .body(locationName: "lastStatusChange"), required: false, type: .timestamp), 
            AWSShapeMember(label: "OutsideIpAddress", location: .body(locationName: "outsideIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", location: .body(locationName: "statusMessage"), required: false, type: .string), 
            AWSShapeMember(label: "AcceptedRouteCount", location: .body(locationName: "acceptedRouteCount"), required: false, type: .integer)
        ]
        /// The status of the VPN tunnel.
        public let status: TelemetryStatus?
        /// The date and time of the last change in status.
        public let lastStatusChange: TimeStamp?
        /// The Internet-routable IP address of the virtual private gateway's outside interface.
        public let outsideIpAddress: String?
        /// If an error occurs, a description of the error.
        public let statusMessage: String?
        /// The number of accepted routes.
        public let acceptedRouteCount: Int32?

        public init(status: TelemetryStatus? = nil, lastStatusChange: TimeStamp? = nil, outsideIpAddress: String? = nil, statusMessage: String? = nil, acceptedRouteCount: Int32? = nil) {
            self.status = status
            self.lastStatusChange = lastStatusChange
            self.outsideIpAddress = outsideIpAddress
            self.statusMessage = statusMessage
            self.acceptedRouteCount = acceptedRouteCount
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case lastStatusChange = "lastStatusChange"
            case outsideIpAddress = "outsideIpAddress"
            case statusMessage = "statusMessage"
            case acceptedRouteCount = "acceptedRouteCount"
        }
    }

    public struct PrefixListIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [PrefixListId]?

        public init(item: [PrefixListId]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReplaceNetworkAclAssociationResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewAssociationId", location: .body(locationName: "newAssociationId"), required: false, type: .string)
        ]
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(newAssociationId: String? = nil) {
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case newAssociationId = "newAssociationId"
        }
    }

    public struct NetworkAclEntryList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [NetworkAclEntry]?

        public init(item: [NetworkAclEntry]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct Ipv6CidrBlockSet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Ipv6CidrBlock]?

        public init(item: [Ipv6CidrBlock]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DiskImageVolumeDescription: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Size", location: .body(locationName: "size"), required: false, type: .long), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: true, type: .string)
        ]
        /// The size of the volume, in GiB.
        public let size: Int64?
        /// The volume identifier.
        public let id: String

        public init(size: Int64? = nil, id: String) {
            self.size = size
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case size = "size"
            case id = "id"
        }
    }

    public enum VolumeState: String, CustomStringConvertible, Codable {
        case creating = "creating"
        case available = "available"
        case inUse = "in-use"
        case deleting = "deleting"
        case deleted = "deleted"
        case error = "error"
        public var description: String { return self.rawValue }
    }

    public struct AttributeValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]
        /// The attribute value. Note that the value is case-sensitive.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
        }
    }

    public struct BundleIdStringList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BundleId", required: false, type: .list)
        ]
        public let bundleId: [String]?

        public init(bundleId: [String]? = nil) {
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "BundleId"
        }
    }

    public struct ImportInstanceResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConversionTask", location: .body(locationName: "conversionTask"), required: false, type: .structure)
        ]
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask = "conversionTask"
        }
    }

    public struct CreateDhcpOptionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DhcpConfigurations", location: .body(locationName: "dhcpConfiguration"), required: true, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// A DHCP configuration option.
        public let dhcpConfigurations: NewDhcpConfigurationList
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpConfigurations: NewDhcpConfigurationList, dryRun: Bool? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfiguration"
            case dryRun = "dryRun"
        }
    }

    public struct ModifyIdentityIdFormatRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalArn", location: .body(locationName: "principalArn"), required: true, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: true, type: .string), 
            AWSShapeMember(label: "UseLongIds", location: .body(locationName: "useLongIds"), required: true, type: .boolean)
        ]
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account.
        public let principalArn: String
        /// The type of resource: instance | reservation | snapshot | volume 
        public let resource: String
        /// Indicates whether the resource should use longer IDs (17-character IDs)
        public let useLongIds: Bool

        public init(principalArn: String, resource: String, useLongIds: Bool) {
            self.principalArn = principalArn
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn = "principalArn"
            case resource = "resource"
            case useLongIds = "useLongIds"
        }
    }

    public struct SpotFleetRequestConfig: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivityStatus", location: .body(locationName: "activityStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "CreateTime", location: .body(locationName: "createTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "SpotFleetRequestState", location: .body(locationName: "spotFleetRequestState"), required: true, type: .enum), 
            AWSShapeMember(label: "SpotFleetRequestConfig", location: .body(locationName: "spotFleetRequestConfig"), required: true, type: .structure), 
            AWSShapeMember(label: "SpotFleetRequestId", location: .body(locationName: "spotFleetRequestId"), required: true, type: .string)
        ]
        /// The progress of the Spot fleet request. If there is an error, the status is error. After all bids are placed, the status is pending_fulfillment. If the size of the fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the fleet is decreased, the status is pending_termination while Spot instances are terminating.
        public let activityStatus: ActivityStatus?
        /// The creation date and time of the request.
        public let createTime: TimeStamp
        /// The state of the Spot fleet request.
        public let spotFleetRequestState: BatchState
        /// Information about the configuration of the Spot fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData
        /// The ID of the Spot fleet request.
        public let spotFleetRequestId: String

        public init(activityStatus: ActivityStatus? = nil, createTime: TimeStamp, spotFleetRequestState: BatchState, spotFleetRequestConfig: SpotFleetRequestConfigData, spotFleetRequestId: String) {
            self.activityStatus = activityStatus
            self.createTime = createTime
            self.spotFleetRequestState = spotFleetRequestState
            self.spotFleetRequestConfig = spotFleetRequestConfig
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus = "activityStatus"
            case createTime = "createTime"
            case spotFleetRequestState = "spotFleetRequestState"
            case spotFleetRequestConfig = "spotFleetRequestConfig"
            case spotFleetRequestId = "spotFleetRequestId"
        }
    }

    public struct ModifyHostsResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Successful", location: .body(locationName: "successful"), required: false, type: .structure), 
            AWSShapeMember(label: "Unsuccessful", location: .body(locationName: "unsuccessful"), required: false, type: .structure)
        ]
        /// The IDs of the Dedicated Hosts that were successfully modified.
        public let successful: ResponseHostIdList?
        /// The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.
        public let unsuccessful: UnsuccessfulItemList?

        public init(successful: ResponseHostIdList? = nil, unsuccessful: UnsuccessfulItemList? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful = "successful"
            case unsuccessful = "unsuccessful"
        }
    }

    public struct DisassociateAddressRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", required: false, type: .string), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean)
        ]
        /// [EC2-VPC] The association ID. Required for EC2-VPC.
        public let associationId: String?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String? = nil, publicIp: String? = nil, dryRun: Bool? = nil) {
            self.associationId = associationId
            self.publicIp = publicIp
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case publicIp = "PublicIp"
            case dryRun = "dryRun"
        }
    }

    public struct ScheduledInstancesEbs: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean)
        ]
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// The volume type. gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, Throughput Optimized HDD for st1, Cold HDD for sc1, or standard for Magnetic. Default: standard 
        public let volumeType: String?
        /// The number of I/O operations per second (IOPS) that the volume supports. For io1 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about gp2 baseline performance, I/O credits, and bursting, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Constraint: Range is 100-20000 IOPS for io1 volumes and 100-10000 IOPS for gp2 volumes. Condition: This parameter is required for requests to create io1volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.
        public let iops: Int32?
        /// Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.
        public let encrypted: Bool?

        public init(snapshotId: String? = nil, deleteOnTermination: Bool? = nil, volumeSize: Int32? = nil, volumeType: String? = nil, iops: Int32? = nil, encrypted: Bool? = nil) {
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.volumeSize = volumeSize
            self.volumeType = volumeType
            self.iops = iops
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case deleteOnTermination = "DeleteOnTermination"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
            case iops = "Iops"
            case encrypted = "Encrypted"
        }
    }

    public struct UnmonitorInstancesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceMonitorings", location: .body(locationName: "instancesSet"), required: false, type: .structure)
        ]
        /// The monitoring information.
        public let instanceMonitorings: InstanceMonitoringList?

        public init(instanceMonitorings: InstanceMonitoringList? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct InternetGateway: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", location: .body(locationName: "tagSet"), required: false, type: .structure), 
            AWSShapeMember(label: "InternetGatewayId", location: .body(locationName: "internetGatewayId"), required: false, type: .string), 
            AWSShapeMember(label: "Attachments", location: .body(locationName: "attachmentSet"), required: false, type: .structure)
        ]
        /// Any tags assigned to the Internet gateway.
        public let tags: TagList?
        /// The ID of the Internet gateway.
        public let internetGatewayId: String?
        /// Any VPCs attached to the Internet gateway.
        public let attachments: InternetGatewayAttachmentList?

        public init(tags: TagList? = nil, internetGatewayId: String? = nil, attachments: InternetGatewayAttachmentList? = nil) {
            self.tags = tags
            self.internetGatewayId = internetGatewayId
            self.attachments = attachments
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tagSet"
            case internetGatewayId = "internetGatewayId"
            case attachments = "attachmentSet"
        }
    }

    public struct CreateVolumePermissionModifications: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Remove", required: false, type: .structure), 
            AWSShapeMember(label: "Add", required: false, type: .structure)
        ]
        /// Removes a specific AWS account ID or group from a volume's list of create volume permissions.
        public let remove: CreateVolumePermissionList?
        /// Adds a specific AWS account ID or group to a volume's list of create volume permissions.
        public let add: CreateVolumePermissionList?

        public init(remove: CreateVolumePermissionList? = nil, add: CreateVolumePermissionList? = nil) {
            self.remove = remove
            self.add = add
        }

        private enum CodingKeys: String, CodingKey {
            case remove = "Remove"
            case add = "Add"
        }
    }

    public struct DescribeSpotFleetRequestsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SpotFleetRequestIds", location: .body(locationName: "spotFleetRequestId"), required: false, type: .structure), 
            AWSShapeMember(label: "DryRun", location: .body(locationName: "dryRun"), required: false, type: .boolean), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The IDs of the Spot fleet requests.
        public let spotFleetRequestIds: ValueStringList?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int32?

        public init(spotFleetRequestIds: ValueStringList? = nil, dryRun: Bool? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.spotFleetRequestIds = spotFleetRequestIds
            self.dryRun = dryRun
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestIds = "spotFleetRequestId"
            case dryRun = "dryRun"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DescribeNetworkInterfacesResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaceSet"), required: false, type: .structure)
        ]
        /// Information about one or more network interfaces.
        public let networkInterfaces: NetworkInterfaceList?

        public init(networkInterfaces: NetworkInterfaceList? = nil) {
            self.networkInterfaces = networkInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaces = "networkInterfaceSet"
        }
    }

    public struct AssociationIdList: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociationId", required: false, type: .list)
        ]
        public let associationId: [String]?

        public init(associationId: [String]? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
        }
    }

    public struct TargetConfigurationRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer)
        ]
        /// The Convertible Reserved Instance offering ID.
        public let offeringId: String
        /// The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int32?

        public init(offeringId: String, instanceCount: Int32? = nil) {
            self.offeringId = offeringId
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case offeringId = "OfferingId"
            case instanceCount = "InstanceCount"
        }
    }

    public struct DescribeInstanceStatusResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceStatuses", location: .body(locationName: "instanceStatusSet"), required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// One or more instance status descriptions.
        public let instanceStatuses: InstanceStatusList?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceStatuses: InstanceStatusList? = nil, nextToken: String? = nil) {
            self.instanceStatuses = instanceStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceStatuses = "instanceStatusSet"
            case nextToken = "nextToken"
        }
    }

    public enum NetworkInterfaceStatus: String, CustomStringConvertible, Codable {
        case available = "available"
        case attaching = "attaching"
        case inUse = "in-use"
        case detaching = "detaching"
        public var description: String { return self.rawValue }
    }

}